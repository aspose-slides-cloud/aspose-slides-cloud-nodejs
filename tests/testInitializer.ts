/**
 * Aspose.Slides for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as sdkApi from "../sdk/api";
import * as requests from "../sdk/requests";

var assert = require('assert');

export class TestInitializer {
    static readonly testRules = require("../testRules.json");

    public static getStreamValue() {
        return require('fs').createReadStream("TestData/" + "test.ppt");
    }

    public static getValue(functionName: string, name: string) : any {
        var value = "test" + name;
        TestInitializer.enumerateRules(TestInitializer.testRules.Values, functionName, name, function(r) {
            if ("Value" in r) {
                value = r.Value;
            }
        });
        return value;
    }

    public static invalidizeValue(value: any, name: string, type: string, functionName: string) : any {
        var invalidValue = null;
        if (type == "Buffer" || type == "Array&lt;Buffer&gt;") {
            return null;
        }
        TestInitializer.enumerateRules(TestInitializer.testRules.Values, functionName, name, function(r) {
            if ("InvalidValue" in r) {
                invalidValue = r.InvalidValue;
            }
        });
        return TestInitializer.untemplatize(invalidValue, value);
    }

    public static initializeFileApi() {
        const config = require("../testConfig.json");
        return new sdkApi.SlidesApi(config.AppSid, config.AppKey, config.BaseUrl, config.AuthBaseUrl, config.Debug);
    }

    public static initialize(functionName: string, invalidFieldName: string, invalidFieldValue: any) {
        const files = [];
        TestInitializer.enumerateRules(TestInitializer.testRules.Files, functionName, invalidFieldName, function(r) {
            const actualName = TestInitializer.untemplatize(r.File, invalidFieldValue);
            var path = "TempSlidesSDK";
            if ("Folder" in r) {
                path = TestInitializer.untemplatize(r.Folder, invalidFieldValue)
            }
            path = path + "/" + actualName;
            files[path] = r;
            files[path].ActualName = actualName;
        });
        const promises = [];
        const fileApi = TestInitializer.initializeFileApi();
        for (var path in files) {
            var rule = files[path];
            if (rule.Action == "Put") {
                promises.push(new Promise((resolve, reject) => {
                    const request = new requests.UploadFileRequest();
                    request.file = require('fs').createReadStream("TestData/" + files[path].ActualName);
                    request.path = path;
                    fileApi
                        .uploadFile(request)
                        .then(() => resolve())
                        .catch(() => reject(new Error("Could not upload file " + path)));
                }));
            } else if (rule.Action == "Delete") {
                promises.push(new Promise((resolve, reject) => {
                    const request = new requests.DeleteFileRequest();
                    request.path = path;
                    fileApi
                        .deleteFile(request)
                        .then(() => resolve())
                        .catch(() => reject(new Error("Could not delete file " + path)));
                }));
            }
        }
        return Promise.all(promises);
    }

    public static assertValidCall(call: Promise<any>, isBinary: boolean, functionName: string) {
        return call.then((result) => {
            var code = 0;
            TestInitializer.enumerateRules(TestInitializer.testRules.Results, functionName, null, function(r) {
                if ("Code" in r) {
                    code = r.Code;
                }
            });
            assert.equal(code, result.response.statusCode);
            if (result.body && isBinary) {
                assert(result.body.length > 0);
            }
        }).catch((err) => {
            assert.fail(err);
        });
    }

    public static assertInvalidCall(call: Promise<any>, functionName: string, fieldName: string, fieldValue: any) {
        var failed = false;
        return call
            .then(() => {
                failed = true;
                TestInitializer.enumerateRules(TestInitializer.testRules.OKToNotFail, functionName, fieldName, function() { failed = false; });
                if (failed) {
                    assert.fail('Must have failed');
                }
            }).catch((err) => {
                if (failed) {
                    assert.fail(err);
                } else {
                    var code = 0;
                    var message = "Unexpeceted message";
                    TestInitializer.enumerateRules(TestInitializer.testRules.Results, functionName, fieldName, function(r) {
                        if ("Code" in r) {
                            code = r.Code;
                        }
                        if ("Message" in r) {
                            message = r.Message;
                        }
                    });
                }
                if (err.code) {
                    assert.equal(code, err.code);
                }
                if (err.message) {
                    assert(err.message.includes(TestInitializer.untemplatize(message, fieldValue)));
                }
            });
    }

    private static enumerateRules(rules: any, functionName: string, fieldName: string, action: (rule: any) => void) {
        for (var i in rules) {
            if (TestInitializer.applies(rules[i], functionName, fieldName)) {
                action(rules[i]);
            }
        }
    }

    private static applies(rule: any, functionName: string, fieldName: string) : boolean {
        return (!("Method" in rule) || (functionName && rule.Method.toLowerCase() == functionName.toLowerCase()))
            && (!("Invalid" in rule) || rule.Invalid == !!fieldName)
            && (!("Parameter" in rule) || (fieldName && rule.Parameter.toLowerCase() == fieldName.toLowerCase()))
            && (!("Language" in rule) || rule.Language.toLowerCase() == "nodejs");
    }

    private static untemplatize(t: any, value: any) : string {
        return t && t.replace ? t.replace("%v", value) : t;
    }
}
