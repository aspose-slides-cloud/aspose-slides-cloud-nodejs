/*
* MIT License

* Copyright (c) 2018 Aspose Pty Ltd

* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:

* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.

* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

import "mocha";
import * as model from "../sdk/model";
import { TestInitializer } from "./testInitializer";

describe("Tests for copyFile", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varsrcPath = <string>TestInitializer.getValue("copyFile", "srcPath");
            let vardestPath = <string>TestInitializer.getValue("copyFile", "destPath");
            let varsrcStorageName = <string>TestInitializer.getValue("copyFile", "srcStorageName");
            let vardestStorageName = <string>TestInitializer.getValue("copyFile", "destStorageName");
            let varversionId = <string>TestInitializer.getValue("copyFile", "versionId");
            return TestInitializer.initialize("copyFile", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().copyFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), false, "copyFile");
            });
        });
    });

    it("invalid srcPath test", () => {
        const field = "srcPath";
        let varsrcPath = <string>TestInitializer.getValue("copyFile", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("copyFile", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFile", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("copyFile", "destStorageName");
        let varversionId = <string>TestInitializer.getValue("copyFile", "versionId");
        varsrcPath = <string>TestInitializer.invalidizeValue(varsrcPath, field, "string", "copyFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFile", field, varsrcPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "copyFile", field, varsrcPath);
            });
        });
    });

    it("invalid destPath test", () => {
        const field = "destPath";
        let varsrcPath = <string>TestInitializer.getValue("copyFile", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("copyFile", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFile", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("copyFile", "destStorageName");
        let varversionId = <string>TestInitializer.getValue("copyFile", "versionId");
        vardestPath = <string>TestInitializer.invalidizeValue(vardestPath, field, "string", "copyFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFile", field, vardestPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "copyFile", field, vardestPath);
            });
        });
    });

    it("invalid srcStorageName test", () => {
        const field = "srcStorageName";
        let varsrcPath = <string>TestInitializer.getValue("copyFile", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("copyFile", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFile", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("copyFile", "destStorageName");
        let varversionId = <string>TestInitializer.getValue("copyFile", "versionId");
        varsrcStorageName = <string>TestInitializer.invalidizeValue(varsrcStorageName, field, "string", "copyFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFile", field, varsrcStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "copyFile", field, varsrcStorageName);
            });
        });
    });

    it("invalid destStorageName test", () => {
        const field = "destStorageName";
        let varsrcPath = <string>TestInitializer.getValue("copyFile", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("copyFile", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFile", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("copyFile", "destStorageName");
        let varversionId = <string>TestInitializer.getValue("copyFile", "versionId");
        vardestStorageName = <string>TestInitializer.invalidizeValue(vardestStorageName, field, "string", "copyFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFile", field, vardestStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "copyFile", field, vardestStorageName);
            });
        });
    });

    it("invalid versionId test", () => {
        const field = "versionId";
        let varsrcPath = <string>TestInitializer.getValue("copyFile", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("copyFile", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFile", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("copyFile", "destStorageName");
        let varversionId = <string>TestInitializer.getValue("copyFile", "versionId");
        varversionId = <string>TestInitializer.invalidizeValue(varversionId, field, "string", "copyFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFile", field, varversionId).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "copyFile", field, varversionId);
            });
        });
    });
});

describe("Tests for copyFolder", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varsrcPath = <string>TestInitializer.getValue("copyFolder", "srcPath");
            let vardestPath = <string>TestInitializer.getValue("copyFolder", "destPath");
            let varsrcStorageName = <string>TestInitializer.getValue("copyFolder", "srcStorageName");
            let vardestStorageName = <string>TestInitializer.getValue("copyFolder", "destStorageName");
            return TestInitializer.initialize("copyFolder", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().copyFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), false, "copyFolder");
            });
        });
    });

    it("invalid srcPath test", () => {
        const field = "srcPath";
        let varsrcPath = <string>TestInitializer.getValue("copyFolder", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("copyFolder", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFolder", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("copyFolder", "destStorageName");
        varsrcPath = <string>TestInitializer.invalidizeValue(varsrcPath, field, "string", "copyFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFolder", field, varsrcPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "copyFolder", field, varsrcPath);
            });
        });
    });

    it("invalid destPath test", () => {
        const field = "destPath";
        let varsrcPath = <string>TestInitializer.getValue("copyFolder", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("copyFolder", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFolder", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("copyFolder", "destStorageName");
        vardestPath = <string>TestInitializer.invalidizeValue(vardestPath, field, "string", "copyFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFolder", field, vardestPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "copyFolder", field, vardestPath);
            });
        });
    });

    it("invalid srcStorageName test", () => {
        const field = "srcStorageName";
        let varsrcPath = <string>TestInitializer.getValue("copyFolder", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("copyFolder", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFolder", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("copyFolder", "destStorageName");
        varsrcStorageName = <string>TestInitializer.invalidizeValue(varsrcStorageName, field, "string", "copyFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFolder", field, varsrcStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "copyFolder", field, varsrcStorageName);
            });
        });
    });

    it("invalid destStorageName test", () => {
        const field = "destStorageName";
        let varsrcPath = <string>TestInitializer.getValue("copyFolder", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("copyFolder", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFolder", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("copyFolder", "destStorageName");
        vardestStorageName = <string>TestInitializer.invalidizeValue(vardestStorageName, field, "string", "copyFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFolder", field, vardestStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "copyFolder", field, vardestStorageName);
            });
        });
    });
});

describe("Tests for createFolder", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("createFolder", "path");
            let varstorageName = <string>TestInitializer.getValue("createFolder", "storageName");
            return TestInitializer.initialize("createFolder", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createFolder(varpath, varstorageName), false, "createFolder");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("createFolder", "path");
        let varstorageName = <string>TestInitializer.getValue("createFolder", "storageName");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "createFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createFolder", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createFolder(varpath, varstorageName), "createFolder", field, varpath);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("createFolder", "path");
        let varstorageName = <string>TestInitializer.getValue("createFolder", "storageName");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "createFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createFolder", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createFolder(varpath, varstorageName), "createFolder", field, varstorageName);
            });
        });
    });
});

describe("Tests for deleteChartCategory", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteChartCategory", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex");
            let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex");
            let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password");
            let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage");
            return TestInitializer.initialize("deleteChartCategory", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), false, "deleteChartCategory");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex");
        let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartCategory", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), "deleteChartCategory", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex");
        let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartCategory", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), "deleteChartCategory", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex");
        let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartCategory", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), "deleteChartCategory", field, varshapeIndex);
            });
        });
    });

    it("invalid categoryIndex test", () => {
        const field = "categoryIndex";
        let varname = <string>TestInitializer.getValue("deleteChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex");
        let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage");
        varcategoryIndex = <number>TestInitializer.invalidizeValue(varcategoryIndex, field, "number", "deleteChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartCategory", field, varcategoryIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), "deleteChartCategory", field, varcategoryIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex");
        let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartCategory", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), "deleteChartCategory", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex");
        let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartCategory", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), "deleteChartCategory", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex");
        let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartCategory", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), "deleteChartCategory", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteChartDataPoint", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex");
            let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex");
            let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex");
            let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password");
            let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage");
            return TestInitializer.initialize("deleteChartDataPoint", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), false, "deleteChartDataPoint");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varshapeIndex);
            });
        });
    });

    it("invalid seriesIndex test", () => {
        const field = "seriesIndex";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage");
        varseriesIndex = <number>TestInitializer.invalidizeValue(varseriesIndex, field, "number", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varseriesIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varseriesIndex);
            });
        });
    });

    it("invalid pointIndex test", () => {
        const field = "pointIndex";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage");
        varpointIndex = <number>TestInitializer.invalidizeValue(varpointIndex, field, "number", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varpointIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varpointIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteChartSeries", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteChartSeries", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex");
            let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex");
            let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password");
            let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage");
            return TestInitializer.initialize("deleteChartSeries", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), false, "deleteChartSeries");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartSeries", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), "deleteChartSeries", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartSeries", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), "deleteChartSeries", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartSeries", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), "deleteChartSeries", field, varshapeIndex);
            });
        });
    });

    it("invalid seriesIndex test", () => {
        const field = "seriesIndex";
        let varname = <string>TestInitializer.getValue("deleteChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage");
        varseriesIndex = <number>TestInitializer.invalidizeValue(varseriesIndex, field, "number", "deleteChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartSeries", field, varseriesIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), "deleteChartSeries", field, varseriesIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartSeries", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), "deleteChartSeries", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartSeries", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), "deleteChartSeries", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex");
        let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartSeries", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), "deleteChartSeries", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteFile", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("deleteFile", "path");
            let varstorageName = <string>TestInitializer.getValue("deleteFile", "storageName");
            let varversionId = <string>TestInitializer.getValue("deleteFile", "versionId");
            return TestInitializer.initialize("deleteFile", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteFile(varpath, varstorageName, varversionId), false, "deleteFile");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("deleteFile", "path");
        let varstorageName = <string>TestInitializer.getValue("deleteFile", "storageName");
        let varversionId = <string>TestInitializer.getValue("deleteFile", "versionId");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteFile", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteFile(varpath, varstorageName, varversionId), "deleteFile", field, varpath);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("deleteFile", "path");
        let varstorageName = <string>TestInitializer.getValue("deleteFile", "storageName");
        let varversionId = <string>TestInitializer.getValue("deleteFile", "versionId");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "deleteFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteFile", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteFile(varpath, varstorageName, varversionId), "deleteFile", field, varstorageName);
            });
        });
    });

    it("invalid versionId test", () => {
        const field = "versionId";
        let varpath = <string>TestInitializer.getValue("deleteFile", "path");
        let varstorageName = <string>TestInitializer.getValue("deleteFile", "storageName");
        let varversionId = <string>TestInitializer.getValue("deleteFile", "versionId");
        varversionId = <string>TestInitializer.invalidizeValue(varversionId, field, "string", "deleteFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteFile", field, varversionId).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteFile(varpath, varstorageName, varversionId), "deleteFile", field, varversionId);
            });
        });
    });
});

describe("Tests for deleteFolder", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("deleteFolder", "path");
            let varstorageName = <string>TestInitializer.getValue("deleteFolder", "storageName");
            let varrecursive = <boolean>TestInitializer.getValue("deleteFolder", "recursive");
            return TestInitializer.initialize("deleteFolder", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteFolder(varpath, varstorageName, varrecursive), false, "deleteFolder");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("deleteFolder", "path");
        let varstorageName = <string>TestInitializer.getValue("deleteFolder", "storageName");
        let varrecursive = <boolean>TestInitializer.getValue("deleteFolder", "recursive");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteFolder", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteFolder(varpath, varstorageName, varrecursive), "deleteFolder", field, varpath);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("deleteFolder", "path");
        let varstorageName = <string>TestInitializer.getValue("deleteFolder", "storageName");
        let varrecursive = <boolean>TestInitializer.getValue("deleteFolder", "recursive");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "deleteFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteFolder", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteFolder(varpath, varstorageName, varrecursive), "deleteFolder", field, varstorageName);
            });
        });
    });

    it("invalid recursive test", () => {
        const field = "recursive";
        let varpath = <string>TestInitializer.getValue("deleteFolder", "path");
        let varstorageName = <string>TestInitializer.getValue("deleteFolder", "storageName");
        let varrecursive = <boolean>TestInitializer.getValue("deleteFolder", "recursive");
        varrecursive = <boolean>TestInitializer.invalidizeValue(varrecursive, field, "boolean", "deleteFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteFolder", field, varrecursive).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteFolder(varpath, varstorageName, varrecursive), "deleteFolder", field, varrecursive);
            });
        });
    });
});

describe("Tests for deleteNotesSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteNotesSlide", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlide", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("deleteNotesSlide", "password");
            let varfolder = <string>TestInitializer.getValue("deleteNotesSlide", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteNotesSlide", "storage");
            return TestInitializer.initialize("deleteNotesSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), false, "deleteNotesSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlide", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteNotesSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlide", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteNotesSlide", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlide", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteNotesSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlide", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteNotesSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlide", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteNotesSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteNotesSlideParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex");
            let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password");
            let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage");
            return TestInitializer.initialize("deleteNotesSlideParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "deleteNotesSlideParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteNotesSlideParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteNotesSlideParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteNotesSlideParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deleteNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteNotesSlideParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteNotesSlideParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteNotesSlideParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteNotesSlideParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteNotesSlideParagraphs", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex");
            let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs");
            let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password");
            let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage");
            return TestInitializer.initialize("deleteNotesSlideParagraphs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), false, "deleteNotesSlideParagraphs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraphs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteNotesSlideParagraphs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraphs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteNotesSlideParagraphs", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraphs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteNotesSlideParagraphs", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphs test", () => {
        const field = "paragraphs";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage");
        varparagraphs = <Array<number>>TestInitializer.invalidizeValue(varparagraphs, field, "Array&lt;number&gt;", "deleteNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraphs", field, varparagraphs).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteNotesSlideParagraphs", field, varparagraphs);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraphs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteNotesSlideParagraphs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraphs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteNotesSlideParagraphs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraphs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteNotesSlideParagraphs", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteNotesSlidePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex");
            let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex");
            let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password");
            let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage");
            return TestInitializer.initialize("deleteNotesSlidePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), false, "deleteNotesSlidePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varportionIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteNotesSlidePortions", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex");
            let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions");
            let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password");
            let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage");
            return TestInitializer.initialize("deleteNotesSlidePortions", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), false, "deleteNotesSlidePortions");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varparagraphIndex);
            });
        });
    });

    it("invalid portions test", () => {
        const field = "portions";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage");
        varportions = <Array<number>>TestInitializer.invalidizeValue(varportions, field, "Array&lt;number&gt;", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varportions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varportions);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteNotesSlideShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteNotesSlideShape", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "shapeIndex");
            let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShape", "password");
            let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShape", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShape", "storage");
            return TestInitializer.initialize("deleteNotesSlideShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), false, "deleteNotesSlideShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShape", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteNotesSlideShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShape", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteNotesSlideShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShape", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteNotesSlideShape", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShape", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteNotesSlideShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShape", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteNotesSlideShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShape", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteNotesSlideShape", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteNotesSlideShapes", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteNotesSlideShapes", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShapes", "slideIndex");
            let varshapes = <Array<number>>TestInitializer.getValue("deleteNotesSlideShapes", "shapes");
            let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShapes", "password");
            let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShapes", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShapes", "storage");
            return TestInitializer.initialize("deleteNotesSlideShapes", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteNotesSlideShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), false, "deleteNotesSlideShapes");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShapes", "slideIndex");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteNotesSlideShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShapes", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShapes", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteNotesSlideShapes", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShapes", "slideIndex");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteNotesSlideShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShapes", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShapes", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteNotesSlideShapes", field, varslideIndex);
            });
        });
    });

    it("invalid shapes test", () => {
        const field = "shapes";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShapes", "slideIndex");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteNotesSlideShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShapes", "storage");
        varshapes = <Array<number>>TestInitializer.invalidizeValue(varshapes, field, "Array&lt;number&gt;", "deleteNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShapes", field, varshapes).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteNotesSlideShapes", field, varshapes);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShapes", "slideIndex");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteNotesSlideShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShapes", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShapes", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteNotesSlideShapes", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShapes", "slideIndex");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteNotesSlideShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShapes", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShapes", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteNotesSlideShapes", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShapes", "slideIndex");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteNotesSlideShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShapes", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShapes", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteNotesSlideShapes", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteParagraph", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex");
            let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password");
            let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage");
            return TestInitializer.initialize("deleteParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "deleteParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deleteParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deleteParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteParagraphs", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteParagraphs", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex");
            let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs");
            let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password");
            let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage");
            return TestInitializer.initialize("deleteParagraphs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), false, "deleteParagraphs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraphs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteParagraphs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraphs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteParagraphs", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraphs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteParagraphs", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphs test", () => {
        const field = "paragraphs";
        let varname = <string>TestInitializer.getValue("deleteParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage");
        varparagraphs = <Array<number>>TestInitializer.invalidizeValue(varparagraphs, field, "Array&lt;number&gt;", "deleteParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraphs", field, varparagraphs).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteParagraphs", field, varparagraphs);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraphs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteParagraphs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraphs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteParagraphs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraphs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteParagraphs", field, varstorage);
            });
        });
    });
});

describe("Tests for deletePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deletePortion", "name");
            let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex");
            let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex");
            let varpassword = <string>TestInitializer.getValue("deletePortion", "password");
            let varfolder = <string>TestInitializer.getValue("deletePortion", "folder");
            let varstorage = <string>TestInitializer.getValue("deletePortion", "storage");
            return TestInitializer.initialize("deletePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), false, "deletePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deletePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deletePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deletePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deletePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("deletePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varportionIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deletePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deletePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deletePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for deletePortions", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deletePortions", "name");
            let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex");
            let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions");
            let varpassword = <string>TestInitializer.getValue("deletePortions", "password");
            let varfolder = <string>TestInitializer.getValue("deletePortions", "folder");
            let varstorage = <string>TestInitializer.getValue("deletePortions", "storage");
            return TestInitializer.initialize("deletePortions", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), false, "deletePortions");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deletePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deletePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deletePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deletePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varparagraphIndex);
            });
        });
    });

    it("invalid portions test", () => {
        const field = "portions";
        let varname = <string>TestInitializer.getValue("deletePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage");
        varportions = <Array<number>>TestInitializer.invalidizeValue(varportions, field, "Array&lt;number&gt;", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varportions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varportions);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deletePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deletePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deletePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSection", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSection", "name");
            let varsectionIndex = <number>TestInitializer.getValue("deleteSection", "sectionIndex");
            let varwithSlides = <boolean>TestInitializer.getValue("deleteSection", "withSlides");
            let varpassword = <string>TestInitializer.getValue("deleteSection", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSection", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSection", "storage");
            return TestInitializer.initialize("deleteSection", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSection(varname, varsectionIndex, varwithSlides, varpassword, varfolder, varstorage), false, "deleteSection");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSection", "name");
        let varsectionIndex = <number>TestInitializer.getValue("deleteSection", "sectionIndex");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSection", "withSlides");
        let varpassword = <string>TestInitializer.getValue("deleteSection", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSection", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSection", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSection", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSection(varname, varsectionIndex, varwithSlides, varpassword, varfolder, varstorage), "deleteSection", field, varname);
            });
        });
    });

    it("invalid sectionIndex test", () => {
        const field = "sectionIndex";
        let varname = <string>TestInitializer.getValue("deleteSection", "name");
        let varsectionIndex = <number>TestInitializer.getValue("deleteSection", "sectionIndex");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSection", "withSlides");
        let varpassword = <string>TestInitializer.getValue("deleteSection", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSection", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSection", "storage");
        varsectionIndex = <number>TestInitializer.invalidizeValue(varsectionIndex, field, "number", "deleteSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSection", field, varsectionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSection(varname, varsectionIndex, varwithSlides, varpassword, varfolder, varstorage), "deleteSection", field, varsectionIndex);
            });
        });
    });

    it("invalid withSlides test", () => {
        const field = "withSlides";
        let varname = <string>TestInitializer.getValue("deleteSection", "name");
        let varsectionIndex = <number>TestInitializer.getValue("deleteSection", "sectionIndex");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSection", "withSlides");
        let varpassword = <string>TestInitializer.getValue("deleteSection", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSection", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSection", "storage");
        varwithSlides = <boolean>TestInitializer.invalidizeValue(varwithSlides, field, "boolean", "deleteSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSection", field, varwithSlides).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSection(varname, varsectionIndex, varwithSlides, varpassword, varfolder, varstorage), "deleteSection", field, varwithSlides);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSection", "name");
        let varsectionIndex = <number>TestInitializer.getValue("deleteSection", "sectionIndex");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSection", "withSlides");
        let varpassword = <string>TestInitializer.getValue("deleteSection", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSection", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSection", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSection", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSection(varname, varsectionIndex, varwithSlides, varpassword, varfolder, varstorage), "deleteSection", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSection", "name");
        let varsectionIndex = <number>TestInitializer.getValue("deleteSection", "sectionIndex");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSection", "withSlides");
        let varpassword = <string>TestInitializer.getValue("deleteSection", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSection", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSection", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSection", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSection(varname, varsectionIndex, varwithSlides, varpassword, varfolder, varstorage), "deleteSection", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSection", "name");
        let varsectionIndex = <number>TestInitializer.getValue("deleteSection", "sectionIndex");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSection", "withSlides");
        let varpassword = <string>TestInitializer.getValue("deleteSection", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSection", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSection", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSection", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSection(varname, varsectionIndex, varwithSlides, varpassword, varfolder, varstorage), "deleteSection", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSections", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSections", "name");
            let varsections = <Array<number>>TestInitializer.getValue("deleteSections", "sections");
            let varwithSlides = <boolean>TestInitializer.getValue("deleteSections", "withSlides");
            let varpassword = <string>TestInitializer.getValue("deleteSections", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSections", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSections", "storage");
            return TestInitializer.initialize("deleteSections", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSections(varname, varsections, varwithSlides, varpassword, varfolder, varstorage), false, "deleteSections");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSections", "name");
        let varsections = <Array<number>>TestInitializer.getValue("deleteSections", "sections");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSections", "withSlides");
        let varpassword = <string>TestInitializer.getValue("deleteSections", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSections", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSections", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSections", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSections(varname, varsections, varwithSlides, varpassword, varfolder, varstorage), "deleteSections", field, varname);
            });
        });
    });

    it("invalid sections test", () => {
        const field = "sections";
        let varname = <string>TestInitializer.getValue("deleteSections", "name");
        let varsections = <Array<number>>TestInitializer.getValue("deleteSections", "sections");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSections", "withSlides");
        let varpassword = <string>TestInitializer.getValue("deleteSections", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSections", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSections", "storage");
        varsections = <Array<number>>TestInitializer.invalidizeValue(varsections, field, "Array&lt;number&gt;", "deleteSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSections", field, varsections).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSections(varname, varsections, varwithSlides, varpassword, varfolder, varstorage), "deleteSections", field, varsections);
            });
        });
    });

    it("invalid withSlides test", () => {
        const field = "withSlides";
        let varname = <string>TestInitializer.getValue("deleteSections", "name");
        let varsections = <Array<number>>TestInitializer.getValue("deleteSections", "sections");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSections", "withSlides");
        let varpassword = <string>TestInitializer.getValue("deleteSections", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSections", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSections", "storage");
        varwithSlides = <boolean>TestInitializer.invalidizeValue(varwithSlides, field, "boolean", "deleteSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSections", field, varwithSlides).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSections(varname, varsections, varwithSlides, varpassword, varfolder, varstorage), "deleteSections", field, varwithSlides);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSections", "name");
        let varsections = <Array<number>>TestInitializer.getValue("deleteSections", "sections");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSections", "withSlides");
        let varpassword = <string>TestInitializer.getValue("deleteSections", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSections", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSections", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSections", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSections(varname, varsections, varwithSlides, varpassword, varfolder, varstorage), "deleteSections", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSections", "name");
        let varsections = <Array<number>>TestInitializer.getValue("deleteSections", "sections");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSections", "withSlides");
        let varpassword = <string>TestInitializer.getValue("deleteSections", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSections", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSections", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSections", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSections(varname, varsections, varwithSlides, varpassword, varfolder, varstorage), "deleteSections", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSections", "name");
        let varsections = <Array<number>>TestInitializer.getValue("deleteSections", "sections");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSections", "withSlides");
        let varpassword = <string>TestInitializer.getValue("deleteSections", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSections", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSections", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSections", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSections(varname, varsections, varwithSlides, varpassword, varfolder, varstorage), "deleteSections", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteAnimation", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlideAnimation", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimation", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("deleteSlideAnimation", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSlideAnimation", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSlideAnimation", "storage");
            return TestInitializer.initialize("deleteSlideAnimation", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteAnimation(varname, varslideIndex, varpassword, varfolder, varstorage), false, "deleteSlideAnimation");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimation", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimation", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimation", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimation(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideAnimation", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimation", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimation", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimation", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimation(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideAnimation", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimation", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimation", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimation", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimation(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideAnimation", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimation", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimation", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimation", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimation(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideAnimation", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimation", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimation", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimation", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimation(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideAnimation", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteAnimationEffect", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationEffect", "slideIndex");
            let vareffectIndex = <number>TestInitializer.getValue("deleteSlideAnimationEffect", "effectIndex");
            let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "storage");
            return TestInitializer.initialize("deleteSlideAnimationEffect", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteAnimationEffect(varname, varslideIndex, vareffectIndex, varpassword, varfolder, varstorage), false, "deleteSlideAnimationEffect");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationEffect", "slideIndex");
        let vareffectIndex = <number>TestInitializer.getValue("deleteSlideAnimationEffect", "effectIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationEffect", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationEffect(varname, varslideIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationEffect", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationEffect", "slideIndex");
        let vareffectIndex = <number>TestInitializer.getValue("deleteSlideAnimationEffect", "effectIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationEffect", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationEffect(varname, varslideIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationEffect", field, varslideIndex);
            });
        });
    });

    it("invalid effectIndex test", () => {
        const field = "effectIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationEffect", "slideIndex");
        let vareffectIndex = <number>TestInitializer.getValue("deleteSlideAnimationEffect", "effectIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "storage");
        vareffectIndex = <number>TestInitializer.invalidizeValue(vareffectIndex, field, "number", "deleteSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationEffect", field, vareffectIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationEffect(varname, varslideIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationEffect", field, vareffectIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationEffect", "slideIndex");
        let vareffectIndex = <number>TestInitializer.getValue("deleteSlideAnimationEffect", "effectIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationEffect", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationEffect(varname, varslideIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationEffect", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationEffect", "slideIndex");
        let vareffectIndex = <number>TestInitializer.getValue("deleteSlideAnimationEffect", "effectIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationEffect", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationEffect(varname, varslideIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationEffect", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationEffect", "slideIndex");
        let vareffectIndex = <number>TestInitializer.getValue("deleteSlideAnimationEffect", "effectIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationEffect", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationEffect", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationEffect(varname, varslideIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationEffect", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteAnimationInteractiveSequence", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "slideIndex");
            let varsequenceIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
            let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "storage");
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequence", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteAnimationInteractiveSequence(varname, varslideIndex, varsequenceIndex, varpassword, varfolder, varstorage), false, "deleteSlideAnimationInteractiveSequence");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlideAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequence", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequence(varname, varslideIndex, varsequenceIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequence", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSlideAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequence", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequence(varname, varslideIndex, varsequenceIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequence", field, varslideIndex);
            });
        });
    });

    it("invalid sequenceIndex test", () => {
        const field = "sequenceIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "storage");
        varsequenceIndex = <number>TestInitializer.invalidizeValue(varsequenceIndex, field, "number", "deleteSlideAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequence", field, varsequenceIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequence(varname, varslideIndex, varsequenceIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequence", field, varsequenceIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlideAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequence", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequence(varname, varslideIndex, varsequenceIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequence", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlideAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequence", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequence(varname, varslideIndex, varsequenceIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequence", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "sequenceIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequence", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlideAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequence", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequence(varname, varslideIndex, varsequenceIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequence", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteAnimationInteractiveSequenceEffect", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
            let varsequenceIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
            let vareffectIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
            let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequenceEffect", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), false, "deleteSlideAnimationInteractiveSequenceEffect");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffectIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequenceEffect", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequenceEffect", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffectIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequenceEffect", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequenceEffect", field, varslideIndex);
            });
        });
    });

    it("invalid sequenceIndex test", () => {
        const field = "sequenceIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffectIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
        varsequenceIndex = <number>TestInitializer.invalidizeValue(varsequenceIndex, field, "number", "deleteSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequenceEffect", field, varsequenceIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequenceEffect", field, varsequenceIndex);
            });
        });
    });

    it("invalid effectIndex test", () => {
        const field = "effectIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffectIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
        vareffectIndex = <number>TestInitializer.invalidizeValue(vareffectIndex, field, "number", "deleteSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequenceEffect", field, vareffectIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequenceEffect", field, vareffectIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffectIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequenceEffect", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequenceEffect", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffectIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequenceEffect", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequenceEffect", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffectIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequenceEffect", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequenceEffect", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequenceEffect", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteAnimationInteractiveSequences", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "storage");
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequences", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteAnimationInteractiveSequences(varname, varslideIndex, varpassword, varfolder, varstorage), false, "deleteSlideAnimationInteractiveSequences");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlideAnimationInteractiveSequences");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequences", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequences(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequences", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSlideAnimationInteractiveSequences");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequences", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequences(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequences", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlideAnimationInteractiveSequences");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequences", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequences(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequences", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlideAnimationInteractiveSequences");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequences", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequences(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequences", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationInteractiveSequences", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlideAnimationInteractiveSequences");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationInteractiveSequences", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequences(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationInteractiveSequences", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteAnimationMainSequence", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationMainSequence", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "storage");
            return TestInitializer.initialize("deleteSlideAnimationMainSequence", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteAnimationMainSequence(varname, varslideIndex, varpassword, varfolder, varstorage), false, "deleteSlideAnimationMainSequence");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationMainSequence", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlideAnimationMainSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationMainSequence", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationMainSequence(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationMainSequence", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationMainSequence", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSlideAnimationMainSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationMainSequence", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationMainSequence(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationMainSequence", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationMainSequence", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlideAnimationMainSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationMainSequence", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationMainSequence(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationMainSequence", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationMainSequence", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlideAnimationMainSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationMainSequence", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationMainSequence(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationMainSequence", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideAnimationMainSequence", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideAnimationMainSequence", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlideAnimationMainSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideAnimationMainSequence", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationMainSequence(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideAnimationMainSequence", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlideByIndex", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSlideByIndex", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("deleteSlideByIndex", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSlideByIndex", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSlideByIndex", "storage");
            return TestInitializer.initialize("deleteSlideByIndex", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSlide(varname, varslideIndex, varpassword, varfolder, varstorage), false, "deleteSlideByIndex");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlideByIndex", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideByIndex", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideByIndex", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideByIndex", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideByIndex", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlideByIndex");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideByIndex", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideByIndex", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideByIndex", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideByIndex", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideByIndex", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideByIndex", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideByIndex", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSlideByIndex");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideByIndex", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideByIndex", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlideByIndex", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideByIndex", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideByIndex", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideByIndex", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideByIndex", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlideByIndex");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideByIndex", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideByIndex", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlideByIndex", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideByIndex", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideByIndex", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideByIndex", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideByIndex", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlideByIndex");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideByIndex", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideByIndex", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlideByIndex", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideByIndex", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideByIndex", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideByIndex", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideByIndex", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlideByIndex");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideByIndex", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlideByIndex", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlideShape", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSlideShape", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("deleteSlideShape", "shapeIndex");
            let varpassword = <string>TestInitializer.getValue("deleteSlideShape", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSlideShape", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSlideShape", "storage");
            return TestInitializer.initialize("deleteSlideShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), false, "deleteSlideShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideShape", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteSlideShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideShape", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteSlideShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideShape", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteSlideShape", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideShape", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteSlideShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideShape", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteSlideShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideShape", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteSlideShape", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteShapes", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlideShapes", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSlideShapes", "slideIndex");
            let varshapes = <Array<number>>TestInitializer.getValue("deleteSlideShapes", "shapes");
            let varpassword = <string>TestInitializer.getValue("deleteSlideShapes", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSlideShapes", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSlideShapes", "storage");
            return TestInitializer.initialize("deleteSlideShapes", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), false, "deleteSlideShapes");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideShapes", "slideIndex");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSlideShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideShapes", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideShapes", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteSlideShapes", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideShapes", "slideIndex");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSlideShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideShapes", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideShapes", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteSlideShapes", field, varslideIndex);
            });
        });
    });

    it("invalid shapes test", () => {
        const field = "shapes";
        let varname = <string>TestInitializer.getValue("deleteSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideShapes", "slideIndex");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSlideShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideShapes", "storage");
        varshapes = <Array<number>>TestInitializer.invalidizeValue(varshapes, field, "Array&lt;number&gt;", "deleteSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideShapes", field, varshapes).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteSlideShapes", field, varshapes);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideShapes", "slideIndex");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSlideShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideShapes", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideShapes", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteSlideShapes", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideShapes", "slideIndex");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSlideShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideShapes", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideShapes", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteSlideShapes", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideShapes", "slideIndex");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSlideShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideShapes", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideShapes", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteSlideShapes", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSubshape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlideSubshape", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "slideIndex");
            let varpath = <string>TestInitializer.getValue("deleteSlideSubshape", "path");
            let varshapeIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "shapeIndex");
            let varpassword = <string>TestInitializer.getValue("deleteSlideSubshape", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSlideSubshape", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSlideSubshape", "storage");
            return TestInitializer.initialize("deleteSlideSubshape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), false, "deleteSlideSubshape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlideSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSlideSubshape", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideSubshape", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlideSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideSubshape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "deleteSlideSubshape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSlideSubshape", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideSubshape", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSlideSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideSubshape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "deleteSlideSubshape", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("deleteSlideSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSlideSubshape", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideSubshape", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteSlideSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideSubshape", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "deleteSlideSubshape", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSlideSubshape", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideSubshape", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteSlideSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideSubshape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "deleteSlideSubshape", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlideSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSlideSubshape", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideSubshape", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlideSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideSubshape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "deleteSlideSubshape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlideSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSlideSubshape", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideSubshape", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlideSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideSubshape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "deleteSlideSubshape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlideSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSlideSubshape", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSlideSubshape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlideSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideSubshape", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlideSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideSubshape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "deleteSlideSubshape", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSubshapes", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlideSubshapes", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshapes", "slideIndex");
            let varpath = <string>TestInitializer.getValue("deleteSlideSubshapes", "path");
            let varshapes = <Array<number>>TestInitializer.getValue("deleteSlideSubshapes", "shapes");
            let varpassword = <string>TestInitializer.getValue("deleteSlideSubshapes", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSlideSubshapes", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSlideSubshapes", "storage");
            return TestInitializer.initialize("deleteSlideSubshapes", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), false, "deleteSlideSubshapes");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlideSubshapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshapes", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSlideSubshapes", "path");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSlideSubshapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteSlideSubshapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideSubshapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideSubshapes", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlideSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideSubshapes", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), "deleteSlideSubshapes", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideSubshapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshapes", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSlideSubshapes", "path");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSlideSubshapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteSlideSubshapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideSubshapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideSubshapes", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSlideSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideSubshapes", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), "deleteSlideSubshapes", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("deleteSlideSubshapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshapes", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSlideSubshapes", "path");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSlideSubshapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteSlideSubshapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideSubshapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideSubshapes", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteSlideSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideSubshapes", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), "deleteSlideSubshapes", field, varpath);
            });
        });
    });

    it("invalid shapes test", () => {
        const field = "shapes";
        let varname = <string>TestInitializer.getValue("deleteSlideSubshapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshapes", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSlideSubshapes", "path");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSlideSubshapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteSlideSubshapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideSubshapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideSubshapes", "storage");
        varshapes = <Array<number>>TestInitializer.invalidizeValue(varshapes, field, "Array&lt;number&gt;", "deleteSlideSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideSubshapes", field, varshapes).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), "deleteSlideSubshapes", field, varshapes);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlideSubshapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshapes", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSlideSubshapes", "path");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSlideSubshapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteSlideSubshapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideSubshapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideSubshapes", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlideSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideSubshapes", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), "deleteSlideSubshapes", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlideSubshapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshapes", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSlideSubshapes", "path");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSlideSubshapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteSlideSubshapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideSubshapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideSubshapes", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlideSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideSubshapes", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), "deleteSlideSubshapes", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlideSubshapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideSubshapes", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSlideSubshapes", "path");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSlideSubshapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("deleteSlideSubshapes", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlideSubshapes", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlideSubshapes", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlideSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideSubshapes", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), "deleteSlideSubshapes", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSlides", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "name");
            let varslides = <Array<number>>TestInitializer.getValue("deleteSlidesCleanSlidesList", "slides");
            let varpassword = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "storage");
            return TestInitializer.initialize("deleteSlidesCleanSlidesList", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSlides(varname, varslides, varpassword, varfolder, varstorage), false, "deleteSlidesCleanSlidesList");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "name");
        let varslides = <Array<number>>TestInitializer.getValue("deleteSlidesCleanSlidesList", "slides");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlidesCleanSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesCleanSlidesList", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlides(varname, varslides, varpassword, varfolder, varstorage), "deleteSlidesCleanSlidesList", field, varname);
            });
        });
    });

    it("invalid slides test", () => {
        const field = "slides";
        let varname = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "name");
        let varslides = <Array<number>>TestInitializer.getValue("deleteSlidesCleanSlidesList", "slides");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "storage");
        varslides = <Array<number>>TestInitializer.invalidizeValue(varslides, field, "Array&lt;number&gt;", "deleteSlidesCleanSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesCleanSlidesList", field, varslides).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlides(varname, varslides, varpassword, varfolder, varstorage), "deleteSlidesCleanSlidesList", field, varslides);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "name");
        let varslides = <Array<number>>TestInitializer.getValue("deleteSlidesCleanSlidesList", "slides");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlidesCleanSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesCleanSlidesList", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlides(varname, varslides, varpassword, varfolder, varstorage), "deleteSlidesCleanSlidesList", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "name");
        let varslides = <Array<number>>TestInitializer.getValue("deleteSlidesCleanSlidesList", "slides");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlidesCleanSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesCleanSlidesList", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlides(varname, varslides, varpassword, varfolder, varstorage), "deleteSlidesCleanSlidesList", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "name");
        let varslides = <Array<number>>TestInitializer.getValue("deleteSlidesCleanSlidesList", "slides");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesCleanSlidesList", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlidesCleanSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesCleanSlidesList", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlides(varname, varslides, varpassword, varfolder, varstorage), "deleteSlidesCleanSlidesList", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteDocumentProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "name");
            let varpassword = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "storage");
            return TestInitializer.initialize("deleteSlidesDocumentProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteDocumentProperties(varname, varpassword, varfolder, varstorage), false, "deleteSlidesDocumentProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "name");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlidesDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesDocumentProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperties(varname, varpassword, varfolder, varstorage), "deleteSlidesDocumentProperties", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "name");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlidesDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesDocumentProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperties(varname, varpassword, varfolder, varstorage), "deleteSlidesDocumentProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "name");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlidesDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesDocumentProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperties(varname, varpassword, varfolder, varstorage), "deleteSlidesDocumentProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "name");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesDocumentProperties", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlidesDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesDocumentProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperties(varname, varpassword, varfolder, varstorage), "deleteSlidesDocumentProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteDocumentProperty", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "name");
            let varpropertyName = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "propertyName");
            let varpassword = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "storage");
            return TestInitializer.initialize("deleteSlidesDocumentProperty", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), false, "deleteSlidesDocumentProperty");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "propertyName");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlidesDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesDocumentProperty", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "deleteSlidesDocumentProperty", field, varname);
            });
        });
    });

    it("invalid propertyName test", () => {
        const field = "propertyName";
        let varname = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "propertyName");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "storage");
        varpropertyName = <string>TestInitializer.invalidizeValue(varpropertyName, field, "string", "deleteSlidesDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesDocumentProperty", field, varpropertyName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "deleteSlidesDocumentProperty", field, varpropertyName);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "propertyName");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlidesDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesDocumentProperty", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "deleteSlidesDocumentProperty", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "propertyName");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlidesDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesDocumentProperty", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "deleteSlidesDocumentProperty", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "propertyName");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesDocumentProperty", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlidesDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesDocumentProperty", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "deleteSlidesDocumentProperty", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteBackground", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSlidesSlideBackground", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "storage");
            return TestInitializer.initialize("deleteSlidesSlideBackground", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteBackground(varname, varslideIndex, varpassword, varfolder, varstorage), false, "deleteSlidesSlideBackground");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlidesSlideBackground", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesSlideBackground", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlidesSlideBackground", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlidesSlideBackground", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesSlideBackground", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlidesSlideBackground", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlidesSlideBackground", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesSlideBackground", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlidesSlideBackground", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlidesSlideBackground", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesSlideBackground", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlidesSlideBackground", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlidesSlideBackground", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSlidesSlideBackground", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlidesSlideBackground", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlidesSlideBackground", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSubshapeParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex");
            let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path");
            let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex");
            let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage");
            return TestInitializer.initialize("deleteSubshapeParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "deleteSubshapeParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSubshapeParagraphs", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex");
            let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path");
            let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex");
            let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs");
            let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage");
            return TestInitializer.initialize("deleteSubshapeParagraphs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), false, "deleteSubshapeParagraphs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphs test", () => {
        const field = "paragraphs";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage");
        varparagraphs = <Array<number>>TestInitializer.invalidizeValue(varparagraphs, field, "Array&lt;number&gt;", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varparagraphs).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varparagraphs);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSubshapePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex");
            let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path");
            let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex");
            let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex");
            let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage");
            return TestInitializer.initialize("deleteSubshapePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), false, "deleteSubshapePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varportionIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSubshapePortions", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name");
            let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex");
            let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path");
            let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex");
            let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions");
            let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password");
            let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder");
            let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage");
            return TestInitializer.initialize("deleteSubshapePortions", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), false, "deleteSubshapePortions");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varparagraphIndex);
            });
        });
    });

    it("invalid portions test", () => {
        const field = "portions";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage");
        varportions = <Array<number>>TestInitializer.invalidizeValue(varportions, field, "Array&lt;number&gt;", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varportions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varportions);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varstorage);
            });
        });
    });
});

describe("Tests for downloadFile", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("downloadFile", "path");
            let varstorageName = <string>TestInitializer.getValue("downloadFile", "storageName");
            let varversionId = <string>TestInitializer.getValue("downloadFile", "versionId");
            return TestInitializer.initialize("downloadFile", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadFile(varpath, varstorageName, varversionId), true, "downloadFile");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("downloadFile", "path");
        let varstorageName = <string>TestInitializer.getValue("downloadFile", "storageName");
        let varversionId = <string>TestInitializer.getValue("downloadFile", "versionId");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "downloadFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadFile", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadFile(varpath, varstorageName, varversionId), "downloadFile", field, varpath);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("downloadFile", "path");
        let varstorageName = <string>TestInitializer.getValue("downloadFile", "storageName");
        let varversionId = <string>TestInitializer.getValue("downloadFile", "versionId");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "downloadFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadFile", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadFile(varpath, varstorageName, varversionId), "downloadFile", field, varstorageName);
            });
        });
    });

    it("invalid versionId test", () => {
        const field = "versionId";
        let varpath = <string>TestInitializer.getValue("downloadFile", "path");
        let varstorageName = <string>TestInitializer.getValue("downloadFile", "storageName");
        let varversionId = <string>TestInitializer.getValue("downloadFile", "versionId");
        varversionId = <string>TestInitializer.invalidizeValue(varversionId, field, "string", "downloadFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadFile", field, varversionId).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadFile(varpath, varstorageName, varversionId), "downloadFile", field, varversionId);
            });
        });
    });
});

describe("Tests for getDiscUsage", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varstorageName = <string>TestInitializer.getValue("getDiscUsage", "storageName");
            return TestInitializer.initialize("getDiscUsage", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getDiscUsage(varstorageName), false, "getDiscUsage");
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varstorageName = <string>TestInitializer.getValue("getDiscUsage", "storageName");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "getDiscUsage");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getDiscUsage", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDiscUsage(varstorageName), "getDiscUsage", field, varstorageName);
            });
        });
    });
});

describe("Tests for getFileVersions", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("getFileVersions", "path");
            let varstorageName = <string>TestInitializer.getValue("getFileVersions", "storageName");
            return TestInitializer.initialize("getFileVersions", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getFileVersions(varpath, varstorageName), false, "getFileVersions");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("getFileVersions", "path");
        let varstorageName = <string>TestInitializer.getValue("getFileVersions", "storageName");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getFileVersions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFileVersions", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFileVersions(varpath, varstorageName), "getFileVersions", field, varpath);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("getFileVersions", "path");
        let varstorageName = <string>TestInitializer.getValue("getFileVersions", "storageName");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "getFileVersions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFileVersions", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFileVersions(varpath, varstorageName), "getFileVersions", field, varstorageName);
            });
        });
    });
});

describe("Tests for getFilesList", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("getFilesList", "path");
            let varstorageName = <string>TestInitializer.getValue("getFilesList", "storageName");
            return TestInitializer.initialize("getFilesList", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getFilesList(varpath, varstorageName), false, "getFilesList");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("getFilesList", "path");
        let varstorageName = <string>TestInitializer.getValue("getFilesList", "storageName");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getFilesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFilesList", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFilesList(varpath, varstorageName), "getFilesList", field, varpath);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("getFilesList", "path");
        let varstorageName = <string>TestInitializer.getValue("getFilesList", "storageName");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "getFilesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFilesList", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFilesList(varpath, varstorageName), "getFilesList", field, varstorageName);
            });
        });
    });
});

describe("Tests for getLayoutSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getLayoutSlide", "name");
            let varslideIndex = <number>TestInitializer.getValue("getLayoutSlide", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getLayoutSlide", "password");
            let varfolder = <string>TestInitializer.getValue("getLayoutSlide", "folder");
            let varstorage = <string>TestInitializer.getValue("getLayoutSlide", "storage");
            return TestInitializer.initialize("getLayoutSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getLayoutSlide(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getLayoutSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getLayoutSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getLayoutSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlide", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getLayoutSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getLayoutSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getLayoutSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlide", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getLayoutSlide", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getLayoutSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getLayoutSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlide", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getLayoutSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getLayoutSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getLayoutSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlide", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getLayoutSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getLayoutSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getLayoutSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlide", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getLayoutSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for getLayoutSlides", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getLayoutSlidesList", "name");
            let varpassword = <string>TestInitializer.getValue("getLayoutSlidesList", "password");
            let varfolder = <string>TestInitializer.getValue("getLayoutSlidesList", "folder");
            let varstorage = <string>TestInitializer.getValue("getLayoutSlidesList", "storage");
            return TestInitializer.initialize("getLayoutSlidesList", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getLayoutSlides(varname, varpassword, varfolder, varstorage), false, "getLayoutSlidesList");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getLayoutSlidesList", "name");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlidesList", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getLayoutSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlidesList", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlides(varname, varpassword, varfolder, varstorage), "getLayoutSlidesList", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getLayoutSlidesList", "name");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlidesList", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getLayoutSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlidesList", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlides(varname, varpassword, varfolder, varstorage), "getLayoutSlidesList", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getLayoutSlidesList", "name");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlidesList", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getLayoutSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlidesList", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlides(varname, varpassword, varfolder, varstorage), "getLayoutSlidesList", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getLayoutSlidesList", "name");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlidesList", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getLayoutSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlidesList", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlides(varname, varpassword, varfolder, varstorage), "getLayoutSlidesList", field, varstorage);
            });
        });
    });
});

describe("Tests for getMasterSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getMasterSlide", "name");
            let varslideIndex = <number>TestInitializer.getValue("getMasterSlide", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getMasterSlide", "password");
            let varfolder = <string>TestInitializer.getValue("getMasterSlide", "folder");
            let varstorage = <string>TestInitializer.getValue("getMasterSlide", "storage");
            return TestInitializer.initialize("getMasterSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getMasterSlide(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getMasterSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getMasterSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getMasterSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getMasterSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getMasterSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getMasterSlide", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getMasterSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getMasterSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getMasterSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getMasterSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getMasterSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getMasterSlide", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getMasterSlide", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getMasterSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getMasterSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getMasterSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getMasterSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getMasterSlide", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getMasterSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getMasterSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getMasterSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getMasterSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getMasterSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getMasterSlide", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getMasterSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getMasterSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getMasterSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getMasterSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getMasterSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getMasterSlide", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getMasterSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for getMasterSlides", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getMasterSlidesList", "name");
            let varpassword = <string>TestInitializer.getValue("getMasterSlidesList", "password");
            let varfolder = <string>TestInitializer.getValue("getMasterSlidesList", "folder");
            let varstorage = <string>TestInitializer.getValue("getMasterSlidesList", "storage");
            return TestInitializer.initialize("getMasterSlidesList", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getMasterSlides(varname, varpassword, varfolder, varstorage), false, "getMasterSlidesList");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getMasterSlidesList", "name");
        let varpassword = <string>TestInitializer.getValue("getMasterSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("getMasterSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("getMasterSlidesList", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getMasterSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlidesList", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlides(varname, varpassword, varfolder, varstorage), "getMasterSlidesList", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getMasterSlidesList", "name");
        let varpassword = <string>TestInitializer.getValue("getMasterSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("getMasterSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("getMasterSlidesList", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getMasterSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlidesList", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlides(varname, varpassword, varfolder, varstorage), "getMasterSlidesList", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getMasterSlidesList", "name");
        let varpassword = <string>TestInitializer.getValue("getMasterSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("getMasterSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("getMasterSlidesList", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getMasterSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlidesList", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlides(varname, varpassword, varfolder, varstorage), "getMasterSlidesList", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getMasterSlidesList", "name");
        let varpassword = <string>TestInitializer.getValue("getMasterSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("getMasterSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("getMasterSlidesList", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getMasterSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlidesList", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlides(varname, varpassword, varfolder, varstorage), "getMasterSlidesList", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlide", "name");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlide", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getNotesSlide", "password");
            let varfolder = <string>TestInitializer.getValue("getNotesSlide", "folder");
            let varstorage = <string>TestInitializer.getValue("getNotesSlide", "storage");
            return TestInitializer.initialize("getNotesSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getNotesSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlide", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlide", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlide", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlide", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlide", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlide", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for notesSlideExists", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlideExists", "name");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlideExists", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getNotesSlideExists", "password");
            let varfolder = <string>TestInitializer.getValue("getNotesSlideExists", "folder");
            let varstorage = <string>TestInitializer.getValue("getNotesSlideExists", "storage");
            return TestInitializer.initialize("getNotesSlideExists", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().notesSlideExists(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getNotesSlideExists");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlideExists", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideExists", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideExists", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideExists", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideExists", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlideExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideExists", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExists(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideExists", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideExists", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideExists", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideExists", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideExists", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideExists", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlideExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideExists", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExists(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideExists", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlideExists", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideExists", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideExists", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideExists", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideExists", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlideExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideExists", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExists(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideExists", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlideExists", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideExists", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideExists", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideExists", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideExists", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlideExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideExists", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExists(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideExists", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlideExists", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideExists", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideExists", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideExists", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideExists", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlideExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideExists", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExists(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideExists", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlideHeaderFooter", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "name");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlideHeaderFooter", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "password");
            let varfolder = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "folder");
            let varstorage = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "storage");
            return TestInitializer.initialize("getNotesSlideHeaderFooter", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getNotesSlideHeaderFooter");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideHeaderFooter", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideHeaderFooter", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideHeaderFooter", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideHeaderFooter", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideHeaderFooter", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideHeaderFooter", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideHeaderFooter", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideHeaderFooter", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideHeaderFooter", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideHeaderFooter", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideHeaderFooter", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideHeaderFooter", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideHeaderFooter", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideHeaderFooter", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideHeaderFooter", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlideShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlideShape", "name");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShape", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShape", "shapeIndex");
            let varpassword = <string>TestInitializer.getValue("getNotesSlideShape", "password");
            let varfolder = <string>TestInitializer.getValue("getNotesSlideShape", "folder");
            let varstorage = <string>TestInitializer.getValue("getNotesSlideShape", "storage");
            return TestInitializer.initialize("getNotesSlideShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), false, "getNotesSlideShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShape", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShape", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShape", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShape", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShape", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShape", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShape", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShape", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlideParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "name");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "paragraphIndex");
            let varpassword = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "password");
            let varfolder = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "folder");
            let varstorage = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "storage");
            return TestInitializer.initialize("getNotesSlideShapeParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "getNotesSlideShapeParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapeParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideShapeParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapeParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideShapeParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getNotesSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapeParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideShapeParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getNotesSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapeParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideShapeParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapeParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideShapeParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapeParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideShapeParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapeParagraph", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapeParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideShapeParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlideParagraphs", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "name");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraphs", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraphs", "shapeIndex");
            let varpassword = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "password");
            let varfolder = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "folder");
            let varstorage = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "storage");
            return TestInitializer.initialize("getNotesSlideShapeParagraphs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), false, "getNotesSlideShapeParagraphs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlideShapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapeParagraphs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShapeParagraphs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlideShapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapeParagraphs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShapeParagraphs", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getNotesSlideShapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapeParagraphs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShapeParagraphs", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlideShapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapeParagraphs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShapeParagraphs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlideShapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapeParagraphs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShapeParagraphs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapeParagraphs", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlideShapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapeParagraphs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShapeParagraphs", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlidePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlideShapePortion", "name");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "paragraphIndex");
            let varportionIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "portionIndex");
            let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortion", "password");
            let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortion", "folder");
            let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortion", "storage");
            return TestInitializer.initialize("getNotesSlideShapePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), false, "getNotesSlideShapePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortion", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlideShapePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortion", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlideShapePortion", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortion", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlideShapePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortion", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlideShapePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortion", "storage");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "getNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapePortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlideShapePortion", field, varportionIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortion", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlideShapePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortion", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlideShapePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlideShapePortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortion", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlideShapePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlidePortions", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlideShapePortions", "name");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "paragraphIndex");
            let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortions", "password");
            let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortions", "folder");
            let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortions", "storage");
            return TestInitializer.initialize("getNotesSlideShapePortions", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "getNotesSlideShapePortions");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortions", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlideShapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapePortions", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideShapePortions", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortions", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlideShapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapePortions", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideShapePortions", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortions", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getNotesSlideShapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapePortions", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideShapePortions", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortions", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getNotesSlideShapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapePortions", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideShapePortions", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortions", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlideShapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapePortions", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideShapePortions", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortions", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlideShapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapePortions", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideShapePortions", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapePortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideShapePortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapePortions", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapePortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapePortions", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlideShapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapePortions", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideShapePortions", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlideShapes", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlideShapes", "name");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapes", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getNotesSlideShapes", "password");
            let varfolder = <string>TestInitializer.getValue("getNotesSlideShapes", "folder");
            let varstorage = <string>TestInitializer.getValue("getNotesSlideShapes", "storage");
            return TestInitializer.initialize("getNotesSlideShapes", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlideShapes(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getNotesSlideShapes");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapes", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapes", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapes", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideShapes", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapes", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapes", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapes", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideShapes", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapes", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapes", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapes", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideShapes", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapes", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapes", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapes", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideShapes", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapes", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapes", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapes", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideShapes", field, varstorage);
            });
        });
    });
});

describe("Tests for downloadNotesSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlideWithFormat", "name");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlideWithFormat", "slideIndex");
            let varformat = <string>TestInitializer.getValue("getNotesSlideWithFormat", "format");
            let varwidth = <number>TestInitializer.getValue("getNotesSlideWithFormat", "width");
            let varheight = <number>TestInitializer.getValue("getNotesSlideWithFormat", "height");
            let varpassword = <string>TestInitializer.getValue("getNotesSlideWithFormat", "password");
            let varfolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "folder");
            let varstorage = <string>TestInitializer.getValue("getNotesSlideWithFormat", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "fontsFolder");
            return TestInitializer.initialize("getNotesSlideWithFormat", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), true, "getNotesSlideWithFormat");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlideWithFormat", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("getNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("getNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("getNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideWithFormat", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "fontsFolder");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideWithFormat", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "getNotesSlideWithFormat", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideWithFormat", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("getNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("getNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("getNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideWithFormat", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "fontsFolder");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideWithFormat", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "getNotesSlideWithFormat", field, varslideIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("getNotesSlideWithFormat", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("getNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("getNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("getNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideWithFormat", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "getNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideWithFormat", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "getNotesSlideWithFormat", field, varformat);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let varname = <string>TestInitializer.getValue("getNotesSlideWithFormat", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("getNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("getNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("getNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideWithFormat", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "fontsFolder");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "getNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideWithFormat", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "getNotesSlideWithFormat", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let varname = <string>TestInitializer.getValue("getNotesSlideWithFormat", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("getNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("getNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("getNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideWithFormat", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "fontsFolder");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "getNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideWithFormat", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "getNotesSlideWithFormat", field, varheight);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlideWithFormat", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("getNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("getNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("getNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideWithFormat", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideWithFormat", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "getNotesSlideWithFormat", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlideWithFormat", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("getNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("getNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("getNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideWithFormat", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "fontsFolder");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideWithFormat", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "getNotesSlideWithFormat", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlideWithFormat", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("getNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("getNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("getNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideWithFormat", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideWithFormat", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "getNotesSlideWithFormat", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("getNotesSlideWithFormat", "name");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("getNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("getNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("getNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideWithFormat", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("getNotesSlideWithFormat", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "getNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideWithFormat", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "getNotesSlideWithFormat", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for getPortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getParagraphPortion", "name");
            let varslideIndex = <number>TestInitializer.getValue("getParagraphPortion", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortion", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortion", "paragraphIndex");
            let varportionIndex = <number>TestInitializer.getValue("getParagraphPortion", "portionIndex");
            let varpassword = <string>TestInitializer.getValue("getParagraphPortion", "password");
            let varfolder = <string>TestInitializer.getValue("getParagraphPortion", "folder");
            let varstorage = <string>TestInitializer.getValue("getParagraphPortion", "storage");
            return TestInitializer.initialize("getParagraphPortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), false, "getParagraphPortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getParagraphPortion", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphPortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getParagraphPortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getParagraphPortion", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphPortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getParagraphPortion", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getParagraphPortion", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphPortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getParagraphPortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getParagraphPortion", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphPortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getParagraphPortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("getParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getParagraphPortion", "storage");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "getParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphPortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getParagraphPortion", field, varportionIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getParagraphPortion", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphPortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getParagraphPortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getParagraphPortion", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphPortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getParagraphPortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getParagraphPortion", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphPortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getParagraphPortion", field, varstorage);
            });
        });
    });
});

describe("Tests for getPortions", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getParagraphPortions", "name");
            let varslideIndex = <number>TestInitializer.getValue("getParagraphPortions", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortions", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortions", "paragraphIndex");
            let varpassword = <string>TestInitializer.getValue("getParagraphPortions", "password");
            let varfolder = <string>TestInitializer.getValue("getParagraphPortions", "folder");
            let varstorage = <string>TestInitializer.getValue("getParagraphPortions", "storage");
            return TestInitializer.initialize("getParagraphPortions", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "getParagraphPortions");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getParagraphPortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphPortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getParagraphPortions", "password");
        let varfolder = <string>TestInitializer.getValue("getParagraphPortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getParagraphPortions", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getParagraphPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphPortions", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getParagraphPortions", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getParagraphPortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphPortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getParagraphPortions", "password");
        let varfolder = <string>TestInitializer.getValue("getParagraphPortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getParagraphPortions", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getParagraphPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphPortions", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getParagraphPortions", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getParagraphPortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphPortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getParagraphPortions", "password");
        let varfolder = <string>TestInitializer.getValue("getParagraphPortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getParagraphPortions", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getParagraphPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphPortions", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getParagraphPortions", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getParagraphPortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphPortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getParagraphPortions", "password");
        let varfolder = <string>TestInitializer.getValue("getParagraphPortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getParagraphPortions", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getParagraphPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphPortions", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getParagraphPortions", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getParagraphPortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphPortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getParagraphPortions", "password");
        let varfolder = <string>TestInitializer.getValue("getParagraphPortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getParagraphPortions", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getParagraphPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphPortions", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getParagraphPortions", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getParagraphPortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphPortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getParagraphPortions", "password");
        let varfolder = <string>TestInitializer.getValue("getParagraphPortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getParagraphPortions", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getParagraphPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphPortions", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getParagraphPortions", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getParagraphPortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphPortions", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphPortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraphPortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getParagraphPortions", "password");
        let varfolder = <string>TestInitializer.getValue("getParagraphPortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getParagraphPortions", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getParagraphPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphPortions", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getParagraphPortions", field, varstorage);
            });
        });
    });
});

describe("Tests for getSections", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSections", "name");
            let varpassword = <string>TestInitializer.getValue("getSections", "password");
            let varfolder = <string>TestInitializer.getValue("getSections", "folder");
            let varstorage = <string>TestInitializer.getValue("getSections", "storage");
            return TestInitializer.initialize("getSections", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSections(varname, varpassword, varfolder, varstorage), false, "getSections");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSections", "name");
        let varpassword = <string>TestInitializer.getValue("getSections", "password");
        let varfolder = <string>TestInitializer.getValue("getSections", "folder");
        let varstorage = <string>TestInitializer.getValue("getSections", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSections", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSections(varname, varpassword, varfolder, varstorage), "getSections", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSections", "name");
        let varpassword = <string>TestInitializer.getValue("getSections", "password");
        let varfolder = <string>TestInitializer.getValue("getSections", "folder");
        let varstorage = <string>TestInitializer.getValue("getSections", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSections", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSections(varname, varpassword, varfolder, varstorage), "getSections", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSections", "name");
        let varpassword = <string>TestInitializer.getValue("getSections", "password");
        let varfolder = <string>TestInitializer.getValue("getSections", "folder");
        let varstorage = <string>TestInitializer.getValue("getSections", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSections", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSections(varname, varpassword, varfolder, varstorage), "getSections", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSections", "name");
        let varpassword = <string>TestInitializer.getValue("getSections", "password");
        let varfolder = <string>TestInitializer.getValue("getSections", "folder");
        let varstorage = <string>TestInitializer.getValue("getSections", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSections", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSections(varname, varpassword, varfolder, varstorage), "getSections", field, varstorage);
            });
        });
    });
});

describe("Tests for getAnimation", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlideAnimation", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlideAnimation", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("getSlideAnimation", "shapeIndex");
            let varpassword = <string>TestInitializer.getValue("getSlideAnimation", "password");
            let varfolder = <string>TestInitializer.getValue("getSlideAnimation", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlideAnimation", "storage");
            return TestInitializer.initialize("getSlideAnimation", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getAnimation(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), false, "getSlideAnimation");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideAnimation", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideAnimation", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideAnimation", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideAnimation", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getAnimation(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideAnimation", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideAnimation", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideAnimation", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideAnimation", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideAnimation", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getAnimation(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideAnimation", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideAnimation", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideAnimation", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideAnimation", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideAnimation", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getAnimation(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideAnimation", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideAnimation", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideAnimation", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideAnimation", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideAnimation", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getAnimation(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideAnimation", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideAnimation", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideAnimation", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideAnimation", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideAnimation", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getAnimation(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideAnimation", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideAnimation", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideAnimation", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideAnimation", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideAnimation", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getAnimation(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideAnimation", field, varstorage);
            });
        });
    });
});

describe("Tests for getSlideHeaderFooter", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlideHeaderFooter", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlideHeaderFooter", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getSlideHeaderFooter", "password");
            let varfolder = <string>TestInitializer.getValue("getSlideHeaderFooter", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlideHeaderFooter", "storage");
            return TestInitializer.initialize("getSlideHeaderFooter", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getSlideHeaderFooter");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideHeaderFooter", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideHeaderFooter", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideHeaderFooter", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideHeaderFooter", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideHeaderFooter", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideHeaderFooter", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideHeaderFooter", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideHeaderFooter", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideHeaderFooter", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideHeaderFooter", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideHeaderFooter", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideHeaderFooter", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideHeaderFooter", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideHeaderFooter", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideHeaderFooter", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideHeaderFooter", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideHeaderFooter", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideHeaderFooter", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideHeaderFooter", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideHeaderFooter", field, varstorage);
            });
        });
    });
});

describe("Tests for getShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlideShape", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlideShape", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("getSlideShape", "shapeIndex");
            let varpassword = <string>TestInitializer.getValue("getSlideShape", "password");
            let varfolder = <string>TestInitializer.getValue("getSlideShape", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlideShape", "storage");
            return TestInitializer.initialize("getSlideShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), false, "getSlideShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShape", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShape", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShape", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideShape", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShape", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShape", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShape", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideShape", field, varstorage);
            });
        });
    });
});

describe("Tests for getParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlideShapeParagraph", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "paragraphIndex");
            let varpassword = <string>TestInitializer.getValue("getSlideShapeParagraph", "password");
            let varfolder = <string>TestInitializer.getValue("getSlideShapeParagraph", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlideShapeParagraph", "storage");
            return TestInitializer.initialize("getSlideShapeParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "getSlideShapeParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapeParagraph", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapeParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSlideShapeParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapeParagraph", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapeParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSlideShapeParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapeParagraph", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapeParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSlideShapeParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapeParagraph", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapeParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSlideShapeParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapeParagraph", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapeParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSlideShapeParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapeParagraph", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapeParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSlideShapeParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSlideShapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapeParagraph", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapeParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSlideShapeParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for getParagraphs", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlideShapeParagraphs", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlideShapeParagraphs", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("getSlideShapeParagraphs", "shapeIndex");
            let varpassword = <string>TestInitializer.getValue("getSlideShapeParagraphs", "password");
            let varfolder = <string>TestInitializer.getValue("getSlideShapeParagraphs", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlideShapeParagraphs", "storage");
            return TestInitializer.initialize("getSlideShapeParagraphs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), false, "getSlideShapeParagraphs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlideShapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapeParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapeParagraphs", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlideShapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapeParagraphs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideShapeParagraphs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlideShapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapeParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapeParagraphs", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlideShapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapeParagraphs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideShapeParagraphs", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getSlideShapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapeParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapeParagraphs", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getSlideShapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapeParagraphs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideShapeParagraphs", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlideShapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapeParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapeParagraphs", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlideShapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapeParagraphs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideShapeParagraphs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlideShapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapeParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapeParagraphs", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlideShapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapeParagraphs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideShapeParagraphs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlideShapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapeParagraphs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideShapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapeParagraphs", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlideShapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapeParagraphs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getSlideShapeParagraphs", field, varstorage);
            });
        });
    });
});

describe("Tests for getShapes", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlideShapes", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlideShapes", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getSlideShapes", "password");
            let varfolder = <string>TestInitializer.getValue("getSlideShapes", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlideShapes", "storage");
            return TestInitializer.initialize("getSlideShapes", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getShapes(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getSlideShapes");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapes", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapes", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapes", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideShapes", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapes", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapes", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapes", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideShapes", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapes", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapes", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapes", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideShapes", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapes", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapes", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapes", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideShapes", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlideShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideShapes", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideShapes", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideShapes", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideShapes", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideShapes", field, varstorage);
            });
        });
    });
});

describe("Tests for getSubshape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlideSubshape", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlideSubshape", "slideIndex");
            let varpath = <string>TestInitializer.getValue("getSlideSubshape", "path");
            let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshape", "shapeIndex");
            let varpassword = <string>TestInitializer.getValue("getSlideSubshape", "password");
            let varfolder = <string>TestInitializer.getValue("getSlideSubshape", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlideSubshape", "storage");
            return TestInitializer.initialize("getSlideSubshape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), false, "getSlideSubshape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlideSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshape", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshape", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlideSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSlideSubshape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlideSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshape", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshape", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlideSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSlideSubshape", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("getSlideSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshape", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshape", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getSlideSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshape", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSlideSubshape", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getSlideSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshape", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshape", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getSlideSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSlideSubshape", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlideSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshape", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshape", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlideSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSlideSubshape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlideSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshape", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshape", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlideSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSlideSubshape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlideSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshape", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshape", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshape", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlideSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSlideSubshape", field, varstorage);
            });
        });
    });
});

describe("Tests for getSubshapeParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "slideIndex");
            let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "path");
            let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "paragraphIndex");
            let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "password");
            let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "storage");
            return TestInitializer.initialize("getSlideSubshapeParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "getSlideSubshapeParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlideSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapeParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSlideSubshapeParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlideSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapeParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSlideSubshapeParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getSlideSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapeParagraph", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSlideSubshapeParagraph", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getSlideSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapeParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSlideSubshapeParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getSlideSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapeParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSlideSubshapeParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlideSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapeParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSlideSubshapeParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlideSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapeParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSlideSubshapeParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraph", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraph", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlideSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapeParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSlideSubshapeParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for getSubshapeParagraphs", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "slideIndex");
            let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "path");
            let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "shapeIndex");
            let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "password");
            let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "storage");
            return TestInitializer.initialize("getSlideSubshapeParagraphs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), false, "getSlideSubshapeParagraphs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlideSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapeParagraphs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSlideSubshapeParagraphs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlideSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapeParagraphs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSlideSubshapeParagraphs", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getSlideSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapeParagraphs", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSlideSubshapeParagraphs", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getSlideSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapeParagraphs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSlideSubshapeParagraphs", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlideSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapeParagraphs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSlideSubshapeParagraphs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlideSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapeParagraphs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSlideSubshapeParagraphs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSlideSubshapeParagraphs", "shapeIndex");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapeParagraphs", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlideSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapeParagraphs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSlideSubshapeParagraphs", field, varstorage);
            });
        });
    });
});

describe("Tests for getSubshapes", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlideSubshapes", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapes", "slideIndex");
            let varpath = <string>TestInitializer.getValue("getSlideSubshapes", "path");
            let varpassword = <string>TestInitializer.getValue("getSlideSubshapes", "password");
            let varfolder = <string>TestInitializer.getValue("getSlideSubshapes", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlideSubshapes", "storage");
            return TestInitializer.initialize("getSlideSubshapes", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSubshapes(varname, varslideIndex, varpath, varpassword, varfolder, varstorage), false, "getSlideSubshapes");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlideSubshapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapes", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapes", "path");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapes", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapes", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlideSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapes", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapes(varname, varslideIndex, varpath, varpassword, varfolder, varstorage), "getSlideSubshapes", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlideSubshapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapes", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapes", "path");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapes", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapes", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlideSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapes", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapes(varname, varslideIndex, varpath, varpassword, varfolder, varstorage), "getSlideSubshapes", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("getSlideSubshapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapes", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapes", "path");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapes", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapes", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getSlideSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapes", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapes(varname, varslideIndex, varpath, varpassword, varfolder, varstorage), "getSlideSubshapes", field, varpath);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlideSubshapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapes", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapes", "path");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapes", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapes", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlideSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapes", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapes(varname, varslideIndex, varpath, varpassword, varfolder, varstorage), "getSlideSubshapes", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlideSubshapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapes", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapes", "path");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapes", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapes", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlideSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapes", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapes(varname, varslideIndex, varpath, varpassword, varfolder, varstorage), "getSlideSubshapes", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlideSubshapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlideSubshapes", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSlideSubshapes", "path");
        let varpassword = <string>TestInitializer.getValue("getSlideSubshapes", "password");
        let varfolder = <string>TestInitializer.getValue("getSlideSubshapes", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlideSubshapes", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlideSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideSubshapes", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapes(varname, varslideIndex, varpath, varpassword, varfolder, varstorage), "getSlideSubshapes", field, varstorage);
            });
        });
    });
});

describe("Tests for getApiInfo", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesApiInfo", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getApiInfo(), false, "getSlidesApiInfo");
            });
        });
    });
});

describe("Tests for getPresentation", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesDocument", "name");
            let varpassword = <string>TestInitializer.getValue("getSlidesDocument", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesDocument", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesDocument", "storage");
            return TestInitializer.initialize("getSlidesDocument", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getPresentation(varname, varpassword, varfolder, varstorage), false, "getSlidesDocument");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesDocument", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesDocument", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesDocument", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesDocument", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesDocument");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesDocument", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentation(varname, varpassword, varfolder, varstorage), "getSlidesDocument", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesDocument", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesDocument", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesDocument", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesDocument", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesDocument");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesDocument", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentation(varname, varpassword, varfolder, varstorage), "getSlidesDocument", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesDocument", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesDocument", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesDocument", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesDocument", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesDocument");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesDocument", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentation(varname, varpassword, varfolder, varstorage), "getSlidesDocument", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesDocument", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesDocument", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesDocument", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesDocument", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesDocument");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesDocument", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentation(varname, varpassword, varfolder, varstorage), "getSlidesDocument", field, varstorage);
            });
        });
    });
});

describe("Tests for getDocumentProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesDocumentProperties", "name");
            let varpassword = <string>TestInitializer.getValue("getSlidesDocumentProperties", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesDocumentProperties", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesDocumentProperties", "storage");
            return TestInitializer.initialize("getSlidesDocumentProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getDocumentProperties(varname, varpassword, varfolder, varstorage), false, "getSlidesDocumentProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesDocumentProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesDocumentProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesDocumentProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesDocumentProperties", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesDocumentProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperties(varname, varpassword, varfolder, varstorage), "getSlidesDocumentProperties", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesDocumentProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesDocumentProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesDocumentProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesDocumentProperties", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesDocumentProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperties(varname, varpassword, varfolder, varstorage), "getSlidesDocumentProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesDocumentProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesDocumentProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesDocumentProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesDocumentProperties", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesDocumentProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperties(varname, varpassword, varfolder, varstorage), "getSlidesDocumentProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesDocumentProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesDocumentProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesDocumentProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesDocumentProperties", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesDocumentProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperties(varname, varpassword, varfolder, varstorage), "getSlidesDocumentProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for getDocumentProperty", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesDocumentProperty", "name");
            let varpropertyName = <string>TestInitializer.getValue("getSlidesDocumentProperty", "propertyName");
            let varpassword = <string>TestInitializer.getValue("getSlidesDocumentProperty", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesDocumentProperty", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesDocumentProperty", "storage");
            return TestInitializer.initialize("getSlidesDocumentProperty", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), false, "getSlidesDocumentProperty");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("getSlidesDocumentProperty", "propertyName");
        let varpassword = <string>TestInitializer.getValue("getSlidesDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesDocumentProperty", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesDocumentProperty", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "getSlidesDocumentProperty", field, varname);
            });
        });
    });

    it("invalid propertyName test", () => {
        const field = "propertyName";
        let varname = <string>TestInitializer.getValue("getSlidesDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("getSlidesDocumentProperty", "propertyName");
        let varpassword = <string>TestInitializer.getValue("getSlidesDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesDocumentProperty", "storage");
        varpropertyName = <string>TestInitializer.invalidizeValue(varpropertyName, field, "string", "getSlidesDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesDocumentProperty", field, varpropertyName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "getSlidesDocumentProperty", field, varpropertyName);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("getSlidesDocumentProperty", "propertyName");
        let varpassword = <string>TestInitializer.getValue("getSlidesDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesDocumentProperty", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesDocumentProperty", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "getSlidesDocumentProperty", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("getSlidesDocumentProperty", "propertyName");
        let varpassword = <string>TestInitializer.getValue("getSlidesDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesDocumentProperty", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesDocumentProperty", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "getSlidesDocumentProperty", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("getSlidesDocumentProperty", "propertyName");
        let varpassword = <string>TestInitializer.getValue("getSlidesDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesDocumentProperty", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesDocumentProperty", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "getSlidesDocumentProperty", field, varstorage);
            });
        });
    });
});

describe("Tests for downloadImageDefaultFormat", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "name");
            let varindex = <number>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "index");
            let varpassword = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "storage");
            return TestInitializer.initialize("getSlidesImageWithDefaultFormat", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImageDefaultFormat(varname, varindex, varpassword, varfolder, varstorage), true, "getSlidesImageWithDefaultFormat");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "name");
        let varindex = <number>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "index");
        let varpassword = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesImageWithDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesImageWithDefaultFormat", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormat(varname, varindex, varpassword, varfolder, varstorage), "getSlidesImageWithDefaultFormat", field, varname);
            });
        });
    });

    it("invalid index test", () => {
        const field = "index";
        let varname = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "name");
        let varindex = <number>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "index");
        let varpassword = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "storage");
        varindex = <number>TestInitializer.invalidizeValue(varindex, field, "number", "getSlidesImageWithDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesImageWithDefaultFormat", field, varindex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormat(varname, varindex, varpassword, varfolder, varstorage), "getSlidesImageWithDefaultFormat", field, varindex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "name");
        let varindex = <number>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "index");
        let varpassword = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesImageWithDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesImageWithDefaultFormat", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormat(varname, varindex, varpassword, varfolder, varstorage), "getSlidesImageWithDefaultFormat", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "name");
        let varindex = <number>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "index");
        let varpassword = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesImageWithDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesImageWithDefaultFormat", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormat(varname, varindex, varpassword, varfolder, varstorage), "getSlidesImageWithDefaultFormat", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "name");
        let varindex = <number>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "index");
        let varpassword = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesImageWithDefaultFormat", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesImageWithDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesImageWithDefaultFormat", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormat(varname, varindex, varpassword, varfolder, varstorage), "getSlidesImageWithDefaultFormat", field, varstorage);
            });
        });
    });
});

describe("Tests for downloadImage", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesImageWithFormat", "name");
            let varindex = <number>TestInitializer.getValue("getSlidesImageWithFormat", "index");
            let varformat = <string>TestInitializer.getValue("getSlidesImageWithFormat", "format");
            let varpassword = <string>TestInitializer.getValue("getSlidesImageWithFormat", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesImageWithFormat", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesImageWithFormat", "storage");
            return TestInitializer.initialize("getSlidesImageWithFormat", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImage(varname, varindex, varformat, varpassword, varfolder, varstorage), true, "getSlidesImageWithFormat");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesImageWithFormat", "name");
        let varindex = <number>TestInitializer.getValue("getSlidesImageWithFormat", "index");
        let varformat = <string>TestInitializer.getValue("getSlidesImageWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("getSlidesImageWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesImageWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesImageWithFormat", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesImageWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesImageWithFormat", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImage(varname, varindex, varformat, varpassword, varfolder, varstorage), "getSlidesImageWithFormat", field, varname);
            });
        });
    });

    it("invalid index test", () => {
        const field = "index";
        let varname = <string>TestInitializer.getValue("getSlidesImageWithFormat", "name");
        let varindex = <number>TestInitializer.getValue("getSlidesImageWithFormat", "index");
        let varformat = <string>TestInitializer.getValue("getSlidesImageWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("getSlidesImageWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesImageWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesImageWithFormat", "storage");
        varindex = <number>TestInitializer.invalidizeValue(varindex, field, "number", "getSlidesImageWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesImageWithFormat", field, varindex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImage(varname, varindex, varformat, varpassword, varfolder, varstorage), "getSlidesImageWithFormat", field, varindex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("getSlidesImageWithFormat", "name");
        let varindex = <number>TestInitializer.getValue("getSlidesImageWithFormat", "index");
        let varformat = <string>TestInitializer.getValue("getSlidesImageWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("getSlidesImageWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesImageWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesImageWithFormat", "storage");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "getSlidesImageWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesImageWithFormat", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImage(varname, varindex, varformat, varpassword, varfolder, varstorage), "getSlidesImageWithFormat", field, varformat);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesImageWithFormat", "name");
        let varindex = <number>TestInitializer.getValue("getSlidesImageWithFormat", "index");
        let varformat = <string>TestInitializer.getValue("getSlidesImageWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("getSlidesImageWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesImageWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesImageWithFormat", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesImageWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesImageWithFormat", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImage(varname, varindex, varformat, varpassword, varfolder, varstorage), "getSlidesImageWithFormat", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesImageWithFormat", "name");
        let varindex = <number>TestInitializer.getValue("getSlidesImageWithFormat", "index");
        let varformat = <string>TestInitializer.getValue("getSlidesImageWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("getSlidesImageWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesImageWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesImageWithFormat", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesImageWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesImageWithFormat", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImage(varname, varindex, varformat, varpassword, varfolder, varstorage), "getSlidesImageWithFormat", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesImageWithFormat", "name");
        let varindex = <number>TestInitializer.getValue("getSlidesImageWithFormat", "index");
        let varformat = <string>TestInitializer.getValue("getSlidesImageWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("getSlidesImageWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesImageWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesImageWithFormat", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesImageWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesImageWithFormat", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImage(varname, varindex, varformat, varpassword, varfolder, varstorage), "getSlidesImageWithFormat", field, varstorage);
            });
        });
    });
});

describe("Tests for getPresentationImages", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesImages", "name");
            let varpassword = <string>TestInitializer.getValue("getSlidesImages", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesImages", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesImages", "storage");
            return TestInitializer.initialize("getSlidesImages", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getPresentationImages(varname, varpassword, varfolder, varstorage), false, "getSlidesImages");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesImages", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesImages", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesImages", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesImages", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesImages", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationImages(varname, varpassword, varfolder, varstorage), "getSlidesImages", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesImages", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesImages", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesImages", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesImages", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesImages", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationImages(varname, varpassword, varfolder, varstorage), "getSlidesImages", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesImages", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesImages", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesImages", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesImages", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesImages", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationImages(varname, varpassword, varfolder, varstorage), "getSlidesImages", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesImages", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesImages", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesImages", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesImages", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesImages", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationImages(varname, varpassword, varfolder, varstorage), "getSlidesImages", field, varstorage);
            });
        });
    });
});

describe("Tests for getPlaceholder", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesPlaceholder", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlidesPlaceholder", "slideIndex");
            let varplaceholderIndex = <number>TestInitializer.getValue("getSlidesPlaceholder", "placeholderIndex");
            let varpassword = <string>TestInitializer.getValue("getSlidesPlaceholder", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesPlaceholder", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesPlaceholder", "storage");
            return TestInitializer.initialize("getSlidesPlaceholder", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getPlaceholder(varname, varslideIndex, varplaceholderIndex, varpassword, varfolder, varstorage), false, "getSlidesPlaceholder");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesPlaceholder", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesPlaceholder", "slideIndex");
        let varplaceholderIndex = <number>TestInitializer.getValue("getSlidesPlaceholder", "placeholderIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesPlaceholder", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPlaceholder", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPlaceholder", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesPlaceholder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPlaceholder", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholder(varname, varslideIndex, varplaceholderIndex, varpassword, varfolder, varstorage), "getSlidesPlaceholder", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlidesPlaceholder", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesPlaceholder", "slideIndex");
        let varplaceholderIndex = <number>TestInitializer.getValue("getSlidesPlaceholder", "placeholderIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesPlaceholder", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPlaceholder", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPlaceholder", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlidesPlaceholder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPlaceholder", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholder(varname, varslideIndex, varplaceholderIndex, varpassword, varfolder, varstorage), "getSlidesPlaceholder", field, varslideIndex);
            });
        });
    });

    it("invalid placeholderIndex test", () => {
        const field = "placeholderIndex";
        let varname = <string>TestInitializer.getValue("getSlidesPlaceholder", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesPlaceholder", "slideIndex");
        let varplaceholderIndex = <number>TestInitializer.getValue("getSlidesPlaceholder", "placeholderIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesPlaceholder", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPlaceholder", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPlaceholder", "storage");
        varplaceholderIndex = <number>TestInitializer.invalidizeValue(varplaceholderIndex, field, "number", "getSlidesPlaceholder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPlaceholder", field, varplaceholderIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholder(varname, varslideIndex, varplaceholderIndex, varpassword, varfolder, varstorage), "getSlidesPlaceholder", field, varplaceholderIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesPlaceholder", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesPlaceholder", "slideIndex");
        let varplaceholderIndex = <number>TestInitializer.getValue("getSlidesPlaceholder", "placeholderIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesPlaceholder", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPlaceholder", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPlaceholder", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesPlaceholder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPlaceholder", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholder(varname, varslideIndex, varplaceholderIndex, varpassword, varfolder, varstorage), "getSlidesPlaceholder", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesPlaceholder", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesPlaceholder", "slideIndex");
        let varplaceholderIndex = <number>TestInitializer.getValue("getSlidesPlaceholder", "placeholderIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesPlaceholder", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPlaceholder", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPlaceholder", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesPlaceholder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPlaceholder", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholder(varname, varslideIndex, varplaceholderIndex, varpassword, varfolder, varstorage), "getSlidesPlaceholder", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesPlaceholder", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesPlaceholder", "slideIndex");
        let varplaceholderIndex = <number>TestInitializer.getValue("getSlidesPlaceholder", "placeholderIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesPlaceholder", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPlaceholder", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPlaceholder", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesPlaceholder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPlaceholder", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholder(varname, varslideIndex, varplaceholderIndex, varpassword, varfolder, varstorage), "getSlidesPlaceholder", field, varstorage);
            });
        });
    });
});

describe("Tests for getPlaceholders", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesPlaceholders", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlidesPlaceholders", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getSlidesPlaceholders", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesPlaceholders", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesPlaceholders", "storage");
            return TestInitializer.initialize("getSlidesPlaceholders", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getPlaceholders(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getSlidesPlaceholders");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesPlaceholders", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesPlaceholders", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesPlaceholders", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPlaceholders", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPlaceholders", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesPlaceholders");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPlaceholders", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholders(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesPlaceholders", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlidesPlaceholders", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesPlaceholders", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesPlaceholders", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPlaceholders", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPlaceholders", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlidesPlaceholders");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPlaceholders", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholders(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesPlaceholders", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesPlaceholders", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesPlaceholders", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesPlaceholders", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPlaceholders", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPlaceholders", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesPlaceholders");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPlaceholders", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholders(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesPlaceholders", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesPlaceholders", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesPlaceholders", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesPlaceholders", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPlaceholders", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPlaceholders", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesPlaceholders");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPlaceholders", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholders(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesPlaceholders", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesPlaceholders", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesPlaceholders", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesPlaceholders", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPlaceholders", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPlaceholders", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesPlaceholders");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPlaceholders", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholders(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesPlaceholders", field, varstorage);
            });
        });
    });
});

describe("Tests for getPresentationTextItems", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "name");
            let varwithEmpty = <boolean>TestInitializer.getValue("getSlidesPresentationTextItems", "withEmpty");
            let varpassword = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "storage");
            return TestInitializer.initialize("getSlidesPresentationTextItems", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getPresentationTextItems(varname, varwithEmpty, varpassword, varfolder, varstorage), false, "getSlidesPresentationTextItems");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "name");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlidesPresentationTextItems", "withEmpty");
        let varpassword = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesPresentationTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPresentationTextItems", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationTextItems(varname, varwithEmpty, varpassword, varfolder, varstorage), "getSlidesPresentationTextItems", field, varname);
            });
        });
    });

    it("invalid withEmpty test", () => {
        const field = "withEmpty";
        let varname = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "name");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlidesPresentationTextItems", "withEmpty");
        let varpassword = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "storage");
        varwithEmpty = <boolean>TestInitializer.invalidizeValue(varwithEmpty, field, "boolean", "getSlidesPresentationTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPresentationTextItems", field, varwithEmpty).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationTextItems(varname, varwithEmpty, varpassword, varfolder, varstorage), "getSlidesPresentationTextItems", field, varwithEmpty);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "name");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlidesPresentationTextItems", "withEmpty");
        let varpassword = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesPresentationTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPresentationTextItems", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationTextItems(varname, varwithEmpty, varpassword, varfolder, varstorage), "getSlidesPresentationTextItems", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "name");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlidesPresentationTextItems", "withEmpty");
        let varpassword = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesPresentationTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPresentationTextItems", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationTextItems(varname, varwithEmpty, varpassword, varfolder, varstorage), "getSlidesPresentationTextItems", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "name");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlidesPresentationTextItems", "withEmpty");
        let varpassword = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesPresentationTextItems", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesPresentationTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesPresentationTextItems", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationTextItems(varname, varwithEmpty, varpassword, varfolder, varstorage), "getSlidesPresentationTextItems", field, varstorage);
            });
        });
    });
});

describe("Tests for getProtectionProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesProtectionProperties", "name");
            let varpassword = <string>TestInitializer.getValue("getSlidesProtectionProperties", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesProtectionProperties", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesProtectionProperties", "storage");
            return TestInitializer.initialize("getSlidesProtectionProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getProtectionProperties(varname, varpassword, varfolder, varstorage), false, "getSlidesProtectionProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesProtectionProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesProtectionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesProtectionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesProtectionProperties", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesProtectionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesProtectionProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getProtectionProperties(varname, varpassword, varfolder, varstorage), "getSlidesProtectionProperties", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesProtectionProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesProtectionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesProtectionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesProtectionProperties", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesProtectionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesProtectionProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getProtectionProperties(varname, varpassword, varfolder, varstorage), "getSlidesProtectionProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesProtectionProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesProtectionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesProtectionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesProtectionProperties", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesProtectionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesProtectionProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getProtectionProperties(varname, varpassword, varfolder, varstorage), "getSlidesProtectionProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesProtectionProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesProtectionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesProtectionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesProtectionProperties", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesProtectionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesProtectionProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getProtectionProperties(varname, varpassword, varfolder, varstorage), "getSlidesProtectionProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for getSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesSlide", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlidesSlide", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getSlidesSlide", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesSlide", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesSlide", "storage");
            return TestInitializer.initialize("getSlidesSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSlide(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getSlidesSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlide", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlidesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlide", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlidesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlide", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlide", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlide", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlide", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for getBackground", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesSlideBackground", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideBackground", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getSlidesSlideBackground", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesSlideBackground", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesSlideBackground", "storage");
            return TestInitializer.initialize("getSlidesSlideBackground", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getBackground(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getSlidesSlideBackground");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideBackground", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideBackground", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideBackground", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlideBackground", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideBackground", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideBackground", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideBackground", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlideBackground", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideBackground", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideBackground", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideBackground", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlideBackground", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideBackground", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideBackground", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideBackground", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlideBackground", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideBackground", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideBackground", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideBackground", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlideBackground", field, varstorage);
            });
        });
    });
});

describe("Tests for getComments", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesSlideComments", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideComments", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getSlidesSlideComments", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesSlideComments", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesSlideComments", "storage");
            return TestInitializer.initialize("getSlidesSlideComments", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getComments(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getSlidesSlideComments");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesSlideComments", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideComments", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideComments", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideComments", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideComments", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideComments", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getComments(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlideComments", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlidesSlideComments", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideComments", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideComments", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideComments", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideComments", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlidesSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideComments", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getComments(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlideComments", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesSlideComments", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideComments", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideComments", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideComments", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideComments", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideComments", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getComments(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlideComments", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesSlideComments", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideComments", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideComments", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideComments", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideComments", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideComments", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getComments(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlideComments", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesSlideComments", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideComments", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideComments", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideComments", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideComments", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideComments", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getComments(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlideComments", field, varstorage);
            });
        });
    });
});

describe("Tests for getSlideImages", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesSlideImages", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideImages", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getSlidesSlideImages", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesSlideImages", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesSlideImages", "storage");
            return TestInitializer.initialize("getSlidesSlideImages", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSlideImages(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getSlidesSlideImages");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesSlideImages", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideImages", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideImages", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideImages", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideImages", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesSlideImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideImages", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideImages(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlideImages", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlidesSlideImages", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideImages", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideImages", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideImages", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideImages", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlidesSlideImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideImages", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideImages(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlideImages", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesSlideImages", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideImages", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideImages", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideImages", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideImages", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesSlideImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideImages", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideImages(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlideImages", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesSlideImages", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideImages", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideImages", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideImages", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideImages", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesSlideImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideImages", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideImages(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlideImages", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesSlideImages", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideImages", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideImages", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideImages", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideImages", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesSlideImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideImages", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideImages(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesSlideImages", field, varstorage);
            });
        });
    });
});

describe("Tests for getSlideProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesSlideProperties", "name");
            let varpassword = <string>TestInitializer.getValue("getSlidesSlideProperties", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesSlideProperties", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesSlideProperties", "storage");
            return TestInitializer.initialize("getSlidesSlideProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSlideProperties(varname, varpassword, varfolder, varstorage), false, "getSlidesSlideProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesSlideProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideProperties", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideProperties(varname, varpassword, varfolder, varstorage), "getSlidesSlideProperties", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesSlideProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideProperties", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideProperties(varname, varpassword, varfolder, varstorage), "getSlidesSlideProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesSlideProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideProperties", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideProperties(varname, varpassword, varfolder, varstorage), "getSlidesSlideProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesSlideProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideProperties", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideProperties(varname, varpassword, varfolder, varstorage), "getSlidesSlideProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for getSlideTextItems", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesSlideTextItems", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideTextItems", "slideIndex");
            let varwithEmpty = <boolean>TestInitializer.getValue("getSlidesSlideTextItems", "withEmpty");
            let varpassword = <string>TestInitializer.getValue("getSlidesSlideTextItems", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesSlideTextItems", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesSlideTextItems", "storage");
            return TestInitializer.initialize("getSlidesSlideTextItems", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSlideTextItems(varname, varslideIndex, varwithEmpty, varpassword, varfolder, varstorage), false, "getSlidesSlideTextItems");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesSlideTextItems", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideTextItems", "slideIndex");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlidesSlideTextItems", "withEmpty");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideTextItems", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideTextItems", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideTextItems", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesSlideTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideTextItems", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideTextItems(varname, varslideIndex, varwithEmpty, varpassword, varfolder, varstorage), "getSlidesSlideTextItems", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlidesSlideTextItems", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideTextItems", "slideIndex");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlidesSlideTextItems", "withEmpty");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideTextItems", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideTextItems", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideTextItems", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlidesSlideTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideTextItems", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideTextItems(varname, varslideIndex, varwithEmpty, varpassword, varfolder, varstorage), "getSlidesSlideTextItems", field, varslideIndex);
            });
        });
    });

    it("invalid withEmpty test", () => {
        const field = "withEmpty";
        let varname = <string>TestInitializer.getValue("getSlidesSlideTextItems", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideTextItems", "slideIndex");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlidesSlideTextItems", "withEmpty");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideTextItems", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideTextItems", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideTextItems", "storage");
        varwithEmpty = <boolean>TestInitializer.invalidizeValue(varwithEmpty, field, "boolean", "getSlidesSlideTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideTextItems", field, varwithEmpty).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideTextItems(varname, varslideIndex, varwithEmpty, varpassword, varfolder, varstorage), "getSlidesSlideTextItems", field, varwithEmpty);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesSlideTextItems", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideTextItems", "slideIndex");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlidesSlideTextItems", "withEmpty");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideTextItems", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideTextItems", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideTextItems", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesSlideTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideTextItems", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideTextItems(varname, varslideIndex, varwithEmpty, varpassword, varfolder, varstorage), "getSlidesSlideTextItems", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesSlideTextItems", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideTextItems", "slideIndex");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlidesSlideTextItems", "withEmpty");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideTextItems", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideTextItems", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideTextItems", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesSlideTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideTextItems", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideTextItems(varname, varslideIndex, varwithEmpty, varpassword, varfolder, varstorage), "getSlidesSlideTextItems", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesSlideTextItems", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesSlideTextItems", "slideIndex");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlidesSlideTextItems", "withEmpty");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlideTextItems", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlideTextItems", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlideTextItems", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesSlideTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlideTextItems", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideTextItems(varname, varslideIndex, varwithEmpty, varpassword, varfolder, varstorage), "getSlidesSlideTextItems", field, varstorage);
            });
        });
    });
});

describe("Tests for getSlides", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesSlidesList", "name");
            let varpassword = <string>TestInitializer.getValue("getSlidesSlidesList", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesSlidesList", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesSlidesList", "storage");
            return TestInitializer.initialize("getSlidesSlidesList", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSlides(varname, varpassword, varfolder, varstorage), false, "getSlidesSlidesList");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesSlidesList", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlidesList", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlidesList", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlides(varname, varpassword, varfolder, varstorage), "getSlidesSlidesList", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesSlidesList", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlidesList", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlidesList", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlides(varname, varpassword, varfolder, varstorage), "getSlidesSlidesList", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesSlidesList", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlidesList", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlidesList", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlides(varname, varpassword, varfolder, varstorage), "getSlidesSlidesList", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesSlidesList", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesSlidesList", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesSlidesList", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesSlidesList", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesSlidesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesSlidesList", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlides(varname, varpassword, varfolder, varstorage), "getSlidesSlidesList", field, varstorage);
            });
        });
    });
});

describe("Tests for getTheme", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesTheme", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlidesTheme", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getSlidesTheme", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesTheme", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesTheme", "storage");
            return TestInitializer.initialize("getSlidesTheme", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getTheme(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getSlidesTheme");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesTheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesTheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesTheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesTheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesTheme", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesTheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesTheme", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getTheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesTheme", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlidesTheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesTheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesTheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesTheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesTheme", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlidesTheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesTheme", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getTheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesTheme", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesTheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesTheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesTheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesTheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesTheme", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesTheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesTheme", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getTheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesTheme", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesTheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesTheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesTheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesTheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesTheme", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesTheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesTheme", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getTheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesTheme", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesTheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesTheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesTheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesTheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesTheme", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesTheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesTheme", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getTheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesTheme", field, varstorage);
            });
        });
    });
});

describe("Tests for getColorScheme", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeColorScheme", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "storage");
            return TestInitializer.initialize("getSlidesThemeColorScheme", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getColorScheme(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getSlidesThemeColorScheme");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeColorScheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesThemeColorScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesThemeColorScheme", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getColorScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesThemeColorScheme", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeColorScheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlidesThemeColorScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesThemeColorScheme", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getColorScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesThemeColorScheme", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeColorScheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesThemeColorScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesThemeColorScheme", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getColorScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesThemeColorScheme", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeColorScheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesThemeColorScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesThemeColorScheme", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getColorScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesThemeColorScheme", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeColorScheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesThemeColorScheme", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesThemeColorScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesThemeColorScheme", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getColorScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesThemeColorScheme", field, varstorage);
            });
        });
    });
});

describe("Tests for getFontScheme", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeFontScheme", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "storage");
            return TestInitializer.initialize("getSlidesThemeFontScheme", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getFontScheme(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getSlidesThemeFontScheme");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeFontScheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesThemeFontScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesThemeFontScheme", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFontScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesThemeFontScheme", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeFontScheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlidesThemeFontScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesThemeFontScheme", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFontScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesThemeFontScheme", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeFontScheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesThemeFontScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesThemeFontScheme", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFontScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesThemeFontScheme", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeFontScheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesThemeFontScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesThemeFontScheme", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFontScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesThemeFontScheme", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeFontScheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesThemeFontScheme", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesThemeFontScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesThemeFontScheme", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFontScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesThemeFontScheme", field, varstorage);
            });
        });
    });
});

describe("Tests for getFormatScheme", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeFormatScheme", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "storage");
            return TestInitializer.initialize("getSlidesThemeFormatScheme", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getFormatScheme(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getSlidesThemeFormatScheme");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeFormatScheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesThemeFormatScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesThemeFormatScheme", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFormatScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesThemeFormatScheme", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeFormatScheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlidesThemeFormatScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesThemeFormatScheme", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFormatScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesThemeFormatScheme", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeFormatScheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesThemeFormatScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesThemeFormatScheme", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFormatScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesThemeFormatScheme", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeFormatScheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesThemeFormatScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesThemeFormatScheme", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFormatScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesThemeFormatScheme", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSlidesThemeFormatScheme", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesThemeFormatScheme", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesThemeFormatScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesThemeFormatScheme", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFormatScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlidesThemeFormatScheme", field, varstorage);
            });
        });
    });
});

describe("Tests for getViewProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlidesViewProperties", "name");
            let varpassword = <string>TestInitializer.getValue("getSlidesViewProperties", "password");
            let varfolder = <string>TestInitializer.getValue("getSlidesViewProperties", "folder");
            let varstorage = <string>TestInitializer.getValue("getSlidesViewProperties", "storage");
            return TestInitializer.initialize("getSlidesViewProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getViewProperties(varname, varpassword, varfolder, varstorage), false, "getSlidesViewProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlidesViewProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesViewProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesViewProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesViewProperties", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlidesViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesViewProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getViewProperties(varname, varpassword, varfolder, varstorage), "getSlidesViewProperties", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlidesViewProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesViewProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesViewProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesViewProperties", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlidesViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesViewProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getViewProperties(varname, varpassword, varfolder, varstorage), "getSlidesViewProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlidesViewProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesViewProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesViewProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesViewProperties", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlidesViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesViewProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getViewProperties(varname, varpassword, varfolder, varstorage), "getSlidesViewProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlidesViewProperties", "name");
        let varpassword = <string>TestInitializer.getValue("getSlidesViewProperties", "password");
        let varfolder = <string>TestInitializer.getValue("getSlidesViewProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("getSlidesViewProperties", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlidesViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlidesViewProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getViewProperties(varname, varpassword, varfolder, varstorage), "getSlidesViewProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for getSubshapePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "slideIndex");
            let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "path");
            let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "paragraphIndex");
            let varportionIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "portionIndex");
            let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "password");
            let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "folder");
            let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "storage");
            return TestInitializer.initialize("getSubshapeParagraphPortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), false, "getSubshapeParagraphPortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSubshapeParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSubshapeParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortion", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getSubshapeParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortion", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortion", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getSubshapeParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getSubshapeParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "storage");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "getSubshapeParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortion", field, varportionIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSubshapeParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSubshapeParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortion", "portionIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortion", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSubshapeParagraphPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortion", field, varstorage);
            });
        });
    });
});

describe("Tests for getSubshapePortions", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "name");
            let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "slideIndex");
            let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "path");
            let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "paragraphIndex");
            let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "password");
            let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "folder");
            let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "storage");
            return TestInitializer.initialize("getSubshapeParagraphPortions", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "getSubshapeParagraphPortions");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSubshapeParagraphPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortions", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortions", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSubshapeParagraphPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortions", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortions", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getSubshapeParagraphPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortions", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortions", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getSubshapeParagraphPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortions", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortions", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getSubshapeParagraphPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortions", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortions", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSubshapeParagraphPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortions", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortions", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSubshapeParagraphPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortions", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortions", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "name");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "slideIndex");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "path");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraphPortions", "paragraphIndex");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "password");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "folder");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphPortions", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSubshapeParagraphPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphPortions", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphPortions", field, varstorage);
            });
        });
    });
});

describe("Tests for moveFile", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varsrcPath = <string>TestInitializer.getValue("moveFile", "srcPath");
            let vardestPath = <string>TestInitializer.getValue("moveFile", "destPath");
            let varsrcStorageName = <string>TestInitializer.getValue("moveFile", "srcStorageName");
            let vardestStorageName = <string>TestInitializer.getValue("moveFile", "destStorageName");
            let varversionId = <string>TestInitializer.getValue("moveFile", "versionId");
            return TestInitializer.initialize("moveFile", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().moveFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), false, "moveFile");
            });
        });
    });

    it("invalid srcPath test", () => {
        const field = "srcPath";
        let varsrcPath = <string>TestInitializer.getValue("moveFile", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("moveFile", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFile", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("moveFile", "destStorageName");
        let varversionId = <string>TestInitializer.getValue("moveFile", "versionId");
        varsrcPath = <string>TestInitializer.invalidizeValue(varsrcPath, field, "string", "moveFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFile", field, varsrcPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "moveFile", field, varsrcPath);
            });
        });
    });

    it("invalid destPath test", () => {
        const field = "destPath";
        let varsrcPath = <string>TestInitializer.getValue("moveFile", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("moveFile", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFile", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("moveFile", "destStorageName");
        let varversionId = <string>TestInitializer.getValue("moveFile", "versionId");
        vardestPath = <string>TestInitializer.invalidizeValue(vardestPath, field, "string", "moveFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFile", field, vardestPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "moveFile", field, vardestPath);
            });
        });
    });

    it("invalid srcStorageName test", () => {
        const field = "srcStorageName";
        let varsrcPath = <string>TestInitializer.getValue("moveFile", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("moveFile", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFile", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("moveFile", "destStorageName");
        let varversionId = <string>TestInitializer.getValue("moveFile", "versionId");
        varsrcStorageName = <string>TestInitializer.invalidizeValue(varsrcStorageName, field, "string", "moveFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFile", field, varsrcStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "moveFile", field, varsrcStorageName);
            });
        });
    });

    it("invalid destStorageName test", () => {
        const field = "destStorageName";
        let varsrcPath = <string>TestInitializer.getValue("moveFile", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("moveFile", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFile", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("moveFile", "destStorageName");
        let varversionId = <string>TestInitializer.getValue("moveFile", "versionId");
        vardestStorageName = <string>TestInitializer.invalidizeValue(vardestStorageName, field, "string", "moveFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFile", field, vardestStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "moveFile", field, vardestStorageName);
            });
        });
    });

    it("invalid versionId test", () => {
        const field = "versionId";
        let varsrcPath = <string>TestInitializer.getValue("moveFile", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("moveFile", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFile", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("moveFile", "destStorageName");
        let varversionId = <string>TestInitializer.getValue("moveFile", "versionId");
        varversionId = <string>TestInitializer.invalidizeValue(varversionId, field, "string", "moveFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFile", field, varversionId).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "moveFile", field, varversionId);
            });
        });
    });
});

describe("Tests for moveFolder", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varsrcPath = <string>TestInitializer.getValue("moveFolder", "srcPath");
            let vardestPath = <string>TestInitializer.getValue("moveFolder", "destPath");
            let varsrcStorageName = <string>TestInitializer.getValue("moveFolder", "srcStorageName");
            let vardestStorageName = <string>TestInitializer.getValue("moveFolder", "destStorageName");
            return TestInitializer.initialize("moveFolder", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().moveFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), false, "moveFolder");
            });
        });
    });

    it("invalid srcPath test", () => {
        const field = "srcPath";
        let varsrcPath = <string>TestInitializer.getValue("moveFolder", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("moveFolder", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFolder", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("moveFolder", "destStorageName");
        varsrcPath = <string>TestInitializer.invalidizeValue(varsrcPath, field, "string", "moveFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFolder", field, varsrcPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "moveFolder", field, varsrcPath);
            });
        });
    });

    it("invalid destPath test", () => {
        const field = "destPath";
        let varsrcPath = <string>TestInitializer.getValue("moveFolder", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("moveFolder", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFolder", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("moveFolder", "destStorageName");
        vardestPath = <string>TestInitializer.invalidizeValue(vardestPath, field, "string", "moveFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFolder", field, vardestPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "moveFolder", field, vardestPath);
            });
        });
    });

    it("invalid srcStorageName test", () => {
        const field = "srcStorageName";
        let varsrcPath = <string>TestInitializer.getValue("moveFolder", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("moveFolder", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFolder", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("moveFolder", "destStorageName");
        varsrcStorageName = <string>TestInitializer.invalidizeValue(varsrcStorageName, field, "string", "moveFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFolder", field, varsrcStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "moveFolder", field, varsrcStorageName);
            });
        });
    });

    it("invalid destStorageName test", () => {
        const field = "destStorageName";
        let varsrcPath = <string>TestInitializer.getValue("moveFolder", "srcPath");
        let vardestPath = <string>TestInitializer.getValue("moveFolder", "destPath");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFolder", "srcStorageName");
        let vardestStorageName = <string>TestInitializer.getValue("moveFolder", "destStorageName");
        vardestStorageName = <string>TestInitializer.invalidizeValue(vardestStorageName, field, "string", "moveFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFolder", field, vardestStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "moveFolder", field, vardestStorageName);
            });
        });
    });
});

describe("Tests for objectExists", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("objectExists", "path");
            let varstorageName = <string>TestInitializer.getValue("objectExists", "storageName");
            let varversionId = <string>TestInitializer.getValue("objectExists", "versionId");
            return TestInitializer.initialize("objectExists", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().objectExists(varpath, varstorageName, varversionId), false, "objectExists");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("objectExists", "path");
        let varstorageName = <string>TestInitializer.getValue("objectExists", "storageName");
        let varversionId = <string>TestInitializer.getValue("objectExists", "versionId");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "objectExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("objectExists", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().objectExists(varpath, varstorageName, varversionId), "objectExists", field, varpath);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("objectExists", "path");
        let varstorageName = <string>TestInitializer.getValue("objectExists", "storageName");
        let varversionId = <string>TestInitializer.getValue("objectExists", "versionId");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "objectExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("objectExists", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().objectExists(varpath, varstorageName, varversionId), "objectExists", field, varstorageName);
            });
        });
    });

    it("invalid versionId test", () => {
        const field = "versionId";
        let varpath = <string>TestInitializer.getValue("objectExists", "path");
        let varstorageName = <string>TestInitializer.getValue("objectExists", "storageName");
        let varversionId = <string>TestInitializer.getValue("objectExists", "versionId");
        varversionId = <string>TestInitializer.invalidizeValue(varversionId, field, "string", "objectExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("objectExists", field, varversionId).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().objectExists(varpath, varstorageName, varversionId), "objectExists", field, varversionId);
            });
        });
    });
});

describe("Tests for createParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postAddNewParagraph", "name");
            let varslideIndex = <number>TestInitializer.getValue("postAddNewParagraph", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("postAddNewParagraph", "shapeIndex");
            let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewParagraph", "dto");
            let varposition = <number>TestInitializer.getValue("postAddNewParagraph", "position");
            let varpassword = <string>TestInitializer.getValue("postAddNewParagraph", "password");
            let varfolder = <string>TestInitializer.getValue("postAddNewParagraph", "folder");
            let varstorage = <string>TestInitializer.getValue("postAddNewParagraph", "storage");
            return TestInitializer.initialize("postAddNewParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), false, "postAddNewParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewParagraph", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewParagraph", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("postAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewParagraph", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "postAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("postAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewParagraph", "storage");
        vardto = <model.Paragraph>TestInitializer.invalidizeValue(vardto, field, "Paragraph", "postAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewParagraph", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewParagraph", field, vardto);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("postAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewParagraph", "storage");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "postAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewParagraph", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewParagraph", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewParagraph", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewParagraph", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewParagraph", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for createPortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postAddNewPortion", "name");
            let varslideIndex = <number>TestInitializer.getValue("postAddNewPortion", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("postAddNewPortion", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("postAddNewPortion", "paragraphIndex");
            let vardto = <model.Portion>TestInitializer.getValue("postAddNewPortion", "dto");
            let varposition = <number>TestInitializer.getValue("postAddNewPortion", "position");
            let varpassword = <string>TestInitializer.getValue("postAddNewPortion", "password");
            let varfolder = <string>TestInitializer.getValue("postAddNewPortion", "folder");
            let varstorage = <string>TestInitializer.getValue("postAddNewPortion", "storage");
            return TestInitializer.initialize("postAddNewPortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), false, "postAddNewPortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewPortion", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewPortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewPortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewPortion", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewPortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewPortion", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("postAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewPortion", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "postAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewPortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewPortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("postAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewPortion", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "postAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewPortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewPortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("postAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewPortion", "storage");
        vardto = <model.Portion>TestInitializer.invalidizeValue(vardto, field, "Portion", "postAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewPortion", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewPortion", field, vardto);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("postAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewPortion", "storage");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "postAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewPortion", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewPortion", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewPortion", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewPortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewPortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewPortion", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewPortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewPortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewPortion", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewPortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewPortion", field, varstorage);
            });
        });
    });
});

describe("Tests for createShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postAddNewShape", "name");
            let varslideIndex = <number>TestInitializer.getValue("postAddNewShape", "slideIndex");
            let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewShape", "dto");
            let varshapeToClone = <number>TestInitializer.getValue("postAddNewShape", "shapeToClone");
            let varposition = <number>TestInitializer.getValue("postAddNewShape", "position");
            let varpassword = <string>TestInitializer.getValue("postAddNewShape", "password");
            let varfolder = <string>TestInitializer.getValue("postAddNewShape", "folder");
            let varstorage = <string>TestInitializer.getValue("postAddNewShape", "storage");
            return TestInitializer.initialize("postAddNewShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), false, "postAddNewShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewShape", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewShape", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewShape", field, varslideIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("postAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewShape", "storage");
        vardto = <model.ShapeBase>TestInitializer.invalidizeValue(vardto, field, "ShapeBase", "postAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewShape", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewShape", field, vardto);
            });
        });
    });

    it("invalid shapeToClone test", () => {
        const field = "shapeToClone";
        let varname = <string>TestInitializer.getValue("postAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewShape", "storage");
        varshapeToClone = <number>TestInitializer.invalidizeValue(varshapeToClone, field, "number", "postAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewShape", field, varshapeToClone).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewShape", field, varshapeToClone);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("postAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewShape", "storage");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "postAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewShape", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewShape", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewShape", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewShape", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewShape", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewShape", field, varstorage);
            });
        });
    });
});

describe("Tests for createSubshape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postAddNewSubshape", "name");
            let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshape", "slideIndex");
            let varpath = <string>TestInitializer.getValue("postAddNewSubshape", "path");
            let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewSubshape", "dto");
            let varshapeToClone = <number>TestInitializer.getValue("postAddNewSubshape", "shapeToClone");
            let varposition = <number>TestInitializer.getValue("postAddNewSubshape", "position");
            let varpassword = <string>TestInitializer.getValue("postAddNewSubshape", "password");
            let varfolder = <string>TestInitializer.getValue("postAddNewSubshape", "folder");
            let varstorage = <string>TestInitializer.getValue("postAddNewSubshape", "storage");
            return TestInitializer.initialize("postAddNewSubshape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), false, "postAddNewSubshape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postAddNewSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshape", "path");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewSubshape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewSubshape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshape", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postAddNewSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewSubshape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postAddNewSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshape", "path");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewSubshape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewSubshape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshape", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postAddNewSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewSubshape", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("postAddNewSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshape", "path");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewSubshape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewSubshape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshape", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "postAddNewSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshape", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewSubshape", field, varpath);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("postAddNewSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshape", "path");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewSubshape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewSubshape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshape", "storage");
        vardto = <model.ShapeBase>TestInitializer.invalidizeValue(vardto, field, "ShapeBase", "postAddNewSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshape", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewSubshape", field, vardto);
            });
        });
    });

    it("invalid shapeToClone test", () => {
        const field = "shapeToClone";
        let varname = <string>TestInitializer.getValue("postAddNewSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshape", "path");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewSubshape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewSubshape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshape", "storage");
        varshapeToClone = <number>TestInitializer.invalidizeValue(varshapeToClone, field, "number", "postAddNewSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshape", field, varshapeToClone).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewSubshape", field, varshapeToClone);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("postAddNewSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshape", "path");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewSubshape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewSubshape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshape", "storage");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "postAddNewSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshape", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewSubshape", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postAddNewSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshape", "path");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewSubshape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewSubshape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshape", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postAddNewSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewSubshape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postAddNewSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshape", "path");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewSubshape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewSubshape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshape", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postAddNewSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewSubshape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postAddNewSubshape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshape", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshape", "path");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postAddNewSubshape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postAddNewSubshape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshape", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshape", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshape", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshape", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postAddNewSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postAddNewSubshape", field, varstorage);
            });
        });
    });
});

describe("Tests for createSubshapeParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "name");
            let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "slideIndex");
            let varpath = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "path");
            let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "shapeIndex");
            let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewSubshapeParagraph", "dto");
            let varposition = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "position");
            let varpassword = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "password");
            let varfolder = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "folder");
            let varstorage = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "storage");
            return TestInitializer.initialize("postAddNewSubshapeParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), false, "postAddNewSubshapeParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewSubshapeParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postAddNewSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapeParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapeParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewSubshapeParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postAddNewSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapeParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapeParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewSubshapeParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "postAddNewSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapeParagraph", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapeParagraph", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewSubshapeParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "postAddNewSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapeParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapeParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewSubshapeParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "storage");
        vardto = <model.Paragraph>TestInitializer.invalidizeValue(vardto, field, "Paragraph", "postAddNewSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapeParagraph", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapeParagraph", field, vardto);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewSubshapeParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "storage");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "postAddNewSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapeParagraph", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapeParagraph", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewSubshapeParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postAddNewSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapeParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapeParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewSubshapeParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postAddNewSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapeParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapeParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postAddNewSubshapeParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapeParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapeParagraph", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postAddNewSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapeParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapeParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for createSubshapePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postAddNewSubshapePortion", "name");
            let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "slideIndex");
            let varpath = <string>TestInitializer.getValue("postAddNewSubshapePortion", "path");
            let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "paragraphIndex");
            let vardto = <model.Portion>TestInitializer.getValue("postAddNewSubshapePortion", "dto");
            let varposition = <number>TestInitializer.getValue("postAddNewSubshapePortion", "position");
            let varpassword = <string>TestInitializer.getValue("postAddNewSubshapePortion", "password");
            let varfolder = <string>TestInitializer.getValue("postAddNewSubshapePortion", "folder");
            let varstorage = <string>TestInitializer.getValue("postAddNewSubshapePortion", "storage");
            return TestInitializer.initialize("postAddNewSubshapePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), false, "postAddNewSubshapePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewSubshapePortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapePortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapePortion", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postAddNewSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewSubshapePortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapePortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapePortion", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postAddNewSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapePortion", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewSubshapePortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapePortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapePortion", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "postAddNewSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapePortion", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapePortion", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewSubshapePortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapePortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapePortion", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "postAddNewSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewSubshapePortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapePortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapePortion", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "postAddNewSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewSubshapePortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapePortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapePortion", "storage");
        vardto = <model.Portion>TestInitializer.invalidizeValue(vardto, field, "Portion", "postAddNewSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapePortion", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapePortion", field, vardto);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewSubshapePortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapePortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapePortion", "storage");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "postAddNewSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapePortion", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapePortion", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewSubshapePortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapePortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapePortion", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postAddNewSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewSubshapePortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapePortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapePortion", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postAddNewSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postAddNewSubshapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postAddNewSubshapePortion", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postAddNewSubshapePortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postAddNewSubshapePortion", "dto");
        let varposition = <number>TestInitializer.getValue("postAddNewSubshapePortion", "position");
        let varpassword = <string>TestInitializer.getValue("postAddNewSubshapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNewSubshapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNewSubshapePortion", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postAddNewSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNewSubshapePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postAddNewSubshapePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for createNotesSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postAddNotesSlide", "name");
            let varslideIndex = <number>TestInitializer.getValue("postAddNotesSlide", "slideIndex");
            let vardto = <model.NotesSlide>TestInitializer.getValue("postAddNotesSlide", "dto");
            let varpassword = <string>TestInitializer.getValue("postAddNotesSlide", "password");
            let varfolder = <string>TestInitializer.getValue("postAddNotesSlide", "folder");
            let varstorage = <string>TestInitializer.getValue("postAddNotesSlide", "storage");
            return TestInitializer.initialize("postAddNotesSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), false, "postAddNotesSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postAddNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNotesSlide", "slideIndex");
        let vardto = <model.NotesSlide>TestInitializer.getValue("postAddNotesSlide", "dto");
        let varpassword = <string>TestInitializer.getValue("postAddNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNotesSlide", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postAddNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNotesSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "postAddNotesSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postAddNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNotesSlide", "slideIndex");
        let vardto = <model.NotesSlide>TestInitializer.getValue("postAddNotesSlide", "dto");
        let varpassword = <string>TestInitializer.getValue("postAddNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNotesSlide", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postAddNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNotesSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "postAddNotesSlide", field, varslideIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("postAddNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNotesSlide", "slideIndex");
        let vardto = <model.NotesSlide>TestInitializer.getValue("postAddNotesSlide", "dto");
        let varpassword = <string>TestInitializer.getValue("postAddNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNotesSlide", "storage");
        vardto = <model.NotesSlide>TestInitializer.invalidizeValue(vardto, field, "NotesSlide", "postAddNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNotesSlide", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "postAddNotesSlide", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postAddNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNotesSlide", "slideIndex");
        let vardto = <model.NotesSlide>TestInitializer.getValue("postAddNotesSlide", "dto");
        let varpassword = <string>TestInitializer.getValue("postAddNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNotesSlide", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postAddNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNotesSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "postAddNotesSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postAddNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNotesSlide", "slideIndex");
        let vardto = <model.NotesSlide>TestInitializer.getValue("postAddNotesSlide", "dto");
        let varpassword = <string>TestInitializer.getValue("postAddNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNotesSlide", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postAddNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNotesSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "postAddNotesSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postAddNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAddNotesSlide", "slideIndex");
        let vardto = <model.NotesSlide>TestInitializer.getValue("postAddNotesSlide", "dto");
        let varpassword = <string>TestInitializer.getValue("postAddNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("postAddNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("postAddNotesSlide", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postAddNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAddNotesSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "postAddNotesSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for alignShapes", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postAlignShapes", "name");
            let varslideIndex = <number>TestInitializer.getValue("postAlignShapes", "slideIndex");
            let varalignmentType = <string>TestInitializer.getValue("postAlignShapes", "alignmentType");
            let varalignToSlide = <boolean>TestInitializer.getValue("postAlignShapes", "alignToSlide");
            let varshapes = <Array<number>>TestInitializer.getValue("postAlignShapes", "shapes");
            let varpassword = <string>TestInitializer.getValue("postAlignShapes", "password");
            let varfolder = <string>TestInitializer.getValue("postAlignShapes", "folder");
            let varstorage = <string>TestInitializer.getValue("postAlignShapes", "storage");
            return TestInitializer.initialize("postAlignShapes", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), false, "postAlignShapes");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postAlignShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAlignShapes", "slideIndex");
        let varalignmentType = <string>TestInitializer.getValue("postAlignShapes", "alignmentType");
        let varalignToSlide = <boolean>TestInitializer.getValue("postAlignShapes", "alignToSlide");
        let varshapes = <Array<number>>TestInitializer.getValue("postAlignShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("postAlignShapes", "password");
        let varfolder = <string>TestInitializer.getValue("postAlignShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("postAlignShapes", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postAlignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAlignShapes", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "postAlignShapes", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postAlignShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAlignShapes", "slideIndex");
        let varalignmentType = <string>TestInitializer.getValue("postAlignShapes", "alignmentType");
        let varalignToSlide = <boolean>TestInitializer.getValue("postAlignShapes", "alignToSlide");
        let varshapes = <Array<number>>TestInitializer.getValue("postAlignShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("postAlignShapes", "password");
        let varfolder = <string>TestInitializer.getValue("postAlignShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("postAlignShapes", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postAlignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAlignShapes", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "postAlignShapes", field, varslideIndex);
            });
        });
    });

    it("invalid alignmentType test", () => {
        const field = "alignmentType";
        let varname = <string>TestInitializer.getValue("postAlignShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAlignShapes", "slideIndex");
        let varalignmentType = <string>TestInitializer.getValue("postAlignShapes", "alignmentType");
        let varalignToSlide = <boolean>TestInitializer.getValue("postAlignShapes", "alignToSlide");
        let varshapes = <Array<number>>TestInitializer.getValue("postAlignShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("postAlignShapes", "password");
        let varfolder = <string>TestInitializer.getValue("postAlignShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("postAlignShapes", "storage");
        varalignmentType = <string>TestInitializer.invalidizeValue(varalignmentType, field, "string", "postAlignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAlignShapes", field, varalignmentType).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "postAlignShapes", field, varalignmentType);
            });
        });
    });

    it("invalid alignToSlide test", () => {
        const field = "alignToSlide";
        let varname = <string>TestInitializer.getValue("postAlignShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAlignShapes", "slideIndex");
        let varalignmentType = <string>TestInitializer.getValue("postAlignShapes", "alignmentType");
        let varalignToSlide = <boolean>TestInitializer.getValue("postAlignShapes", "alignToSlide");
        let varshapes = <Array<number>>TestInitializer.getValue("postAlignShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("postAlignShapes", "password");
        let varfolder = <string>TestInitializer.getValue("postAlignShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("postAlignShapes", "storage");
        varalignToSlide = <boolean>TestInitializer.invalidizeValue(varalignToSlide, field, "boolean", "postAlignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAlignShapes", field, varalignToSlide).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "postAlignShapes", field, varalignToSlide);
            });
        });
    });

    it("invalid shapes test", () => {
        const field = "shapes";
        let varname = <string>TestInitializer.getValue("postAlignShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAlignShapes", "slideIndex");
        let varalignmentType = <string>TestInitializer.getValue("postAlignShapes", "alignmentType");
        let varalignToSlide = <boolean>TestInitializer.getValue("postAlignShapes", "alignToSlide");
        let varshapes = <Array<number>>TestInitializer.getValue("postAlignShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("postAlignShapes", "password");
        let varfolder = <string>TestInitializer.getValue("postAlignShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("postAlignShapes", "storage");
        varshapes = <Array<number>>TestInitializer.invalidizeValue(varshapes, field, "Array&lt;number&gt;", "postAlignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAlignShapes", field, varshapes).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "postAlignShapes", field, varshapes);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postAlignShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAlignShapes", "slideIndex");
        let varalignmentType = <string>TestInitializer.getValue("postAlignShapes", "alignmentType");
        let varalignToSlide = <boolean>TestInitializer.getValue("postAlignShapes", "alignToSlide");
        let varshapes = <Array<number>>TestInitializer.getValue("postAlignShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("postAlignShapes", "password");
        let varfolder = <string>TestInitializer.getValue("postAlignShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("postAlignShapes", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postAlignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAlignShapes", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "postAlignShapes", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postAlignShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAlignShapes", "slideIndex");
        let varalignmentType = <string>TestInitializer.getValue("postAlignShapes", "alignmentType");
        let varalignToSlide = <boolean>TestInitializer.getValue("postAlignShapes", "alignToSlide");
        let varshapes = <Array<number>>TestInitializer.getValue("postAlignShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("postAlignShapes", "password");
        let varfolder = <string>TestInitializer.getValue("postAlignShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("postAlignShapes", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postAlignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAlignShapes", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "postAlignShapes", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postAlignShapes", "name");
        let varslideIndex = <number>TestInitializer.getValue("postAlignShapes", "slideIndex");
        let varalignmentType = <string>TestInitializer.getValue("postAlignShapes", "alignmentType");
        let varalignToSlide = <boolean>TestInitializer.getValue("postAlignShapes", "alignToSlide");
        let varshapes = <Array<number>>TestInitializer.getValue("postAlignShapes", "shapes");
        let varpassword = <string>TestInitializer.getValue("postAlignShapes", "password");
        let varfolder = <string>TestInitializer.getValue("postAlignShapes", "folder");
        let varstorage = <string>TestInitializer.getValue("postAlignShapes", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postAlignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postAlignShapes", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "postAlignShapes", field, varstorage);
            });
        });
    });
});

describe("Tests for createChartCategory", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postChartCategory", "name");
            let varslideIndex = <number>TestInitializer.getValue("postChartCategory", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("postChartCategory", "shapeIndex");
            let varcategory = <model.ChartCategory>TestInitializer.getValue("postChartCategory", "category");
            let varpassword = <string>TestInitializer.getValue("postChartCategory", "password");
            let varfolder = <string>TestInitializer.getValue("postChartCategory", "folder");
            let varstorage = <string>TestInitializer.getValue("postChartCategory", "storage");
            return TestInitializer.initialize("postChartCategory", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), false, "postChartCategory");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartCategory", "shapeIndex");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("postChartCategory", "category");
        let varpassword = <string>TestInitializer.getValue("postChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("postChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartCategory", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartCategory", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), "postChartCategory", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartCategory", "shapeIndex");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("postChartCategory", "category");
        let varpassword = <string>TestInitializer.getValue("postChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("postChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartCategory", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartCategory", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), "postChartCategory", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("postChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartCategory", "shapeIndex");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("postChartCategory", "category");
        let varpassword = <string>TestInitializer.getValue("postChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("postChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartCategory", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "postChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartCategory", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), "postChartCategory", field, varshapeIndex);
            });
        });
    });

    it("invalid category test", () => {
        const field = "category";
        let varname = <string>TestInitializer.getValue("postChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartCategory", "shapeIndex");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("postChartCategory", "category");
        let varpassword = <string>TestInitializer.getValue("postChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("postChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartCategory", "storage");
        varcategory = <model.ChartCategory>TestInitializer.invalidizeValue(varcategory, field, "ChartCategory", "postChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartCategory", field, varcategory).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), "postChartCategory", field, varcategory);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartCategory", "shapeIndex");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("postChartCategory", "category");
        let varpassword = <string>TestInitializer.getValue("postChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("postChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartCategory", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartCategory", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), "postChartCategory", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartCategory", "shapeIndex");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("postChartCategory", "category");
        let varpassword = <string>TestInitializer.getValue("postChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("postChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartCategory", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartCategory", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), "postChartCategory", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartCategory", "shapeIndex");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("postChartCategory", "category");
        let varpassword = <string>TestInitializer.getValue("postChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("postChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartCategory", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartCategory", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), "postChartCategory", field, varstorage);
            });
        });
    });
});

describe("Tests for createChartDataPoint", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postChartDataPoint", "name");
            let varslideIndex = <number>TestInitializer.getValue("postChartDataPoint", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("postChartDataPoint", "shapeIndex");
            let varseriesIndex = <number>TestInitializer.getValue("postChartDataPoint", "seriesIndex");
            let vardataPoint = <model.DataPoint>TestInitializer.getValue("postChartDataPoint", "dataPoint");
            let varpassword = <string>TestInitializer.getValue("postChartDataPoint", "password");
            let varfolder = <string>TestInitializer.getValue("postChartDataPoint", "folder");
            let varstorage = <string>TestInitializer.getValue("postChartDataPoint", "storage");
            return TestInitializer.initialize("postChartDataPoint", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), false, "postChartDataPoint");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("postChartDataPoint", "seriesIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("postChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("postChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("postChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartDataPoint", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartDataPoint", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "postChartDataPoint", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("postChartDataPoint", "seriesIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("postChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("postChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("postChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartDataPoint", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartDataPoint", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "postChartDataPoint", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("postChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("postChartDataPoint", "seriesIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("postChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("postChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("postChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartDataPoint", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "postChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartDataPoint", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "postChartDataPoint", field, varshapeIndex);
            });
        });
    });

    it("invalid seriesIndex test", () => {
        const field = "seriesIndex";
        let varname = <string>TestInitializer.getValue("postChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("postChartDataPoint", "seriesIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("postChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("postChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("postChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartDataPoint", "storage");
        varseriesIndex = <number>TestInitializer.invalidizeValue(varseriesIndex, field, "number", "postChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartDataPoint", field, varseriesIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "postChartDataPoint", field, varseriesIndex);
            });
        });
    });

    it("invalid dataPoint test", () => {
        const field = "dataPoint";
        let varname = <string>TestInitializer.getValue("postChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("postChartDataPoint", "seriesIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("postChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("postChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("postChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartDataPoint", "storage");
        vardataPoint = <model.DataPoint>TestInitializer.invalidizeValue(vardataPoint, field, "DataPoint", "postChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartDataPoint", field, vardataPoint).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "postChartDataPoint", field, vardataPoint);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("postChartDataPoint", "seriesIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("postChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("postChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("postChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartDataPoint", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartDataPoint", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "postChartDataPoint", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("postChartDataPoint", "seriesIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("postChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("postChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("postChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartDataPoint", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartDataPoint", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "postChartDataPoint", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("postChartDataPoint", "seriesIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("postChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("postChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("postChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartDataPoint", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartDataPoint", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "postChartDataPoint", field, varstorage);
            });
        });
    });
});

describe("Tests for createChartSeries", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postChartSeries", "name");
            let varslideIndex = <number>TestInitializer.getValue("postChartSeries", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("postChartSeries", "shapeIndex");
            let varseries = <model.Series>TestInitializer.getValue("postChartSeries", "series");
            let varpassword = <string>TestInitializer.getValue("postChartSeries", "password");
            let varfolder = <string>TestInitializer.getValue("postChartSeries", "folder");
            let varstorage = <string>TestInitializer.getValue("postChartSeries", "storage");
            return TestInitializer.initialize("postChartSeries", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), false, "postChartSeries");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartSeries", "shapeIndex");
        let varseries = <model.Series>TestInitializer.getValue("postChartSeries", "series");
        let varpassword = <string>TestInitializer.getValue("postChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("postChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartSeries", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartSeries", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), "postChartSeries", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartSeries", "shapeIndex");
        let varseries = <model.Series>TestInitializer.getValue("postChartSeries", "series");
        let varpassword = <string>TestInitializer.getValue("postChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("postChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartSeries", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartSeries", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), "postChartSeries", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("postChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartSeries", "shapeIndex");
        let varseries = <model.Series>TestInitializer.getValue("postChartSeries", "series");
        let varpassword = <string>TestInitializer.getValue("postChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("postChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartSeries", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "postChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartSeries", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), "postChartSeries", field, varshapeIndex);
            });
        });
    });

    it("invalid series test", () => {
        const field = "series";
        let varname = <string>TestInitializer.getValue("postChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartSeries", "shapeIndex");
        let varseries = <model.Series>TestInitializer.getValue("postChartSeries", "series");
        let varpassword = <string>TestInitializer.getValue("postChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("postChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartSeries", "storage");
        varseries = <model.Series>TestInitializer.invalidizeValue(varseries, field, "Series", "postChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartSeries", field, varseries).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), "postChartSeries", field, varseries);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartSeries", "shapeIndex");
        let varseries = <model.Series>TestInitializer.getValue("postChartSeries", "series");
        let varpassword = <string>TestInitializer.getValue("postChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("postChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartSeries", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartSeries", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), "postChartSeries", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartSeries", "shapeIndex");
        let varseries = <model.Series>TestInitializer.getValue("postChartSeries", "series");
        let varpassword = <string>TestInitializer.getValue("postChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("postChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartSeries", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartSeries", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), "postChartSeries", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("postChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postChartSeries", "shapeIndex");
        let varseries = <model.Series>TestInitializer.getValue("postChartSeries", "series");
        let varpassword = <string>TestInitializer.getValue("postChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("postChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("postChartSeries", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postChartSeries", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), "postChartSeries", field, varstorage);
            });
        });
    });
});

describe("Tests for copyLayoutSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "name");
            let varcloneFrom = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
            let varcloneFromPosition = <number>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
            let varcloneFromPassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
            let varcloneFromStorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
            let varpassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "password");
            let varfolder = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "folder");
            let varstorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "storage");
            return TestInitializer.initialize("postCopyLayoutSlideFromSourcePresentation", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), false, "postCopyLayoutSlideFromSourcePresentation");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        let varpassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postCopyLayoutSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyLayoutSlideFromSourcePresentation", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "postCopyLayoutSlideFromSourcePresentation", field, varname);
            });
        });
    });

    it("invalid cloneFrom test", () => {
        const field = "cloneFrom";
        let varname = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        let varpassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "storage");
        varcloneFrom = <string>TestInitializer.invalidizeValue(varcloneFrom, field, "string", "postCopyLayoutSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyLayoutSlideFromSourcePresentation", field, varcloneFrom).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "postCopyLayoutSlideFromSourcePresentation", field, varcloneFrom);
            });
        });
    });

    it("invalid cloneFromPosition test", () => {
        const field = "cloneFromPosition";
        let varname = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        let varpassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "storage");
        varcloneFromPosition = <number>TestInitializer.invalidizeValue(varcloneFromPosition, field, "number", "postCopyLayoutSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyLayoutSlideFromSourcePresentation", field, varcloneFromPosition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "postCopyLayoutSlideFromSourcePresentation", field, varcloneFromPosition);
            });
        });
    });

    it("invalid cloneFromPassword test", () => {
        const field = "cloneFromPassword";
        let varname = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        let varpassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "storage");
        varcloneFromPassword = <string>TestInitializer.invalidizeValue(varcloneFromPassword, field, "string", "postCopyLayoutSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyLayoutSlideFromSourcePresentation", field, varcloneFromPassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "postCopyLayoutSlideFromSourcePresentation", field, varcloneFromPassword);
            });
        });
    });

    it("invalid cloneFromStorage test", () => {
        const field = "cloneFromStorage";
        let varname = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        let varpassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "storage");
        varcloneFromStorage = <string>TestInitializer.invalidizeValue(varcloneFromStorage, field, "string", "postCopyLayoutSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyLayoutSlideFromSourcePresentation", field, varcloneFromStorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "postCopyLayoutSlideFromSourcePresentation", field, varcloneFromStorage);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        let varpassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postCopyLayoutSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyLayoutSlideFromSourcePresentation", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "postCopyLayoutSlideFromSourcePresentation", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        let varpassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postCopyLayoutSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyLayoutSlideFromSourcePresentation", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "postCopyLayoutSlideFromSourcePresentation", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        let varpassword = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyLayoutSlideFromSourcePresentation", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postCopyLayoutSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyLayoutSlideFromSourcePresentation", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "postCopyLayoutSlideFromSourcePresentation", field, varstorage);
            });
        });
    });
});

describe("Tests for copyMasterSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "name");
            let varcloneFrom = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
            let varcloneFromPosition = <number>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
            let varcloneFromPassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
            let varcloneFromStorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
            let varapplyToAll = <boolean>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
            let varpassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "password");
            let varfolder = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "folder");
            let varstorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "storage");
            return TestInitializer.initialize("postCopyMasterSlideFromSourcePresentation", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), false, "postCopyMasterSlideFromSourcePresentation");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        let varapplyToAll = <boolean>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
        let varpassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postCopyMasterSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyMasterSlideFromSourcePresentation", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "postCopyMasterSlideFromSourcePresentation", field, varname);
            });
        });
    });

    it("invalid cloneFrom test", () => {
        const field = "cloneFrom";
        let varname = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        let varapplyToAll = <boolean>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
        let varpassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "storage");
        varcloneFrom = <string>TestInitializer.invalidizeValue(varcloneFrom, field, "string", "postCopyMasterSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyMasterSlideFromSourcePresentation", field, varcloneFrom).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "postCopyMasterSlideFromSourcePresentation", field, varcloneFrom);
            });
        });
    });

    it("invalid cloneFromPosition test", () => {
        const field = "cloneFromPosition";
        let varname = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        let varapplyToAll = <boolean>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
        let varpassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "storage");
        varcloneFromPosition = <number>TestInitializer.invalidizeValue(varcloneFromPosition, field, "number", "postCopyMasterSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyMasterSlideFromSourcePresentation", field, varcloneFromPosition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "postCopyMasterSlideFromSourcePresentation", field, varcloneFromPosition);
            });
        });
    });

    it("invalid cloneFromPassword test", () => {
        const field = "cloneFromPassword";
        let varname = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        let varapplyToAll = <boolean>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
        let varpassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "storage");
        varcloneFromPassword = <string>TestInitializer.invalidizeValue(varcloneFromPassword, field, "string", "postCopyMasterSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyMasterSlideFromSourcePresentation", field, varcloneFromPassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "postCopyMasterSlideFromSourcePresentation", field, varcloneFromPassword);
            });
        });
    });

    it("invalid cloneFromStorage test", () => {
        const field = "cloneFromStorage";
        let varname = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        let varapplyToAll = <boolean>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
        let varpassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "storage");
        varcloneFromStorage = <string>TestInitializer.invalidizeValue(varcloneFromStorage, field, "string", "postCopyMasterSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyMasterSlideFromSourcePresentation", field, varcloneFromStorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "postCopyMasterSlideFromSourcePresentation", field, varcloneFromStorage);
            });
        });
    });

    it("invalid applyToAll test", () => {
        const field = "applyToAll";
        let varname = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        let varapplyToAll = <boolean>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
        let varpassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "storage");
        varapplyToAll = <boolean>TestInitializer.invalidizeValue(varapplyToAll, field, "boolean", "postCopyMasterSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyMasterSlideFromSourcePresentation", field, varapplyToAll).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "postCopyMasterSlideFromSourcePresentation", field, varapplyToAll);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        let varapplyToAll = <boolean>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
        let varpassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postCopyMasterSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyMasterSlideFromSourcePresentation", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "postCopyMasterSlideFromSourcePresentation", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        let varapplyToAll = <boolean>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
        let varpassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postCopyMasterSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyMasterSlideFromSourcePresentation", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "postCopyMasterSlideFromSourcePresentation", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "name");
        let varcloneFrom = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        let varcloneFromPosition = <number>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        let varcloneFromPassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        let varcloneFromStorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        let varapplyToAll = <boolean>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "applyToAll");
        let varpassword = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "password");
        let varfolder = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "folder");
        let varstorage = <string>TestInitializer.getValue("postCopyMasterSlideFromSourcePresentation", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postCopyMasterSlideFromSourcePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postCopyMasterSlideFromSourcePresentation", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "postCopyMasterSlideFromSourcePresentation", field, varstorage);
            });
        });
    });
});

describe("Tests for downloadImageDefaultFormatOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("postExportImageWithDefaultFormat", "document");
            let varindex = <number>TestInitializer.getValue("postExportImageWithDefaultFormat", "index");
            let varpassword = <string>TestInitializer.getValue("postExportImageWithDefaultFormat", "password");
            return TestInitializer.initialize("postExportImageWithDefaultFormat", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImageDefaultFormatOnline(vardocument, varindex, varpassword), true, "postExportImageWithDefaultFormat");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportImageWithDefaultFormat", "document");
        let varindex = <number>TestInitializer.getValue("postExportImageWithDefaultFormat", "index");
        let varpassword = <string>TestInitializer.getValue("postExportImageWithDefaultFormat", "password");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "postExportImageWithDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImageWithDefaultFormat", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormatOnline(vardocument, varindex, varpassword), "postExportImageWithDefaultFormat", field, vardocument);
            });
        });
    });

    it("invalid index test", () => {
        const field = "index";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportImageWithDefaultFormat", "document");
        let varindex = <number>TestInitializer.getValue("postExportImageWithDefaultFormat", "index");
        let varpassword = <string>TestInitializer.getValue("postExportImageWithDefaultFormat", "password");
        varindex = <number>TestInitializer.invalidizeValue(varindex, field, "number", "postExportImageWithDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImageWithDefaultFormat", field, varindex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormatOnline(vardocument, varindex, varpassword), "postExportImageWithDefaultFormat", field, varindex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportImageWithDefaultFormat", "document");
        let varindex = <number>TestInitializer.getValue("postExportImageWithDefaultFormat", "index");
        let varpassword = <string>TestInitializer.getValue("postExportImageWithDefaultFormat", "password");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postExportImageWithDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImageWithDefaultFormat", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormatOnline(vardocument, varindex, varpassword), "postExportImageWithDefaultFormat", field, varpassword);
            });
        });
    });
});

describe("Tests for downloadImageOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("postExportImageWithFormat", "document");
            let varindex = <number>TestInitializer.getValue("postExportImageWithFormat", "index");
            let varformat = <string>TestInitializer.getValue("postExportImageWithFormat", "format");
            let varpassword = <string>TestInitializer.getValue("postExportImageWithFormat", "password");
            return TestInitializer.initialize("postExportImageWithFormat", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImageOnline(vardocument, varindex, varformat, varpassword), true, "postExportImageWithFormat");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportImageWithFormat", "document");
        let varindex = <number>TestInitializer.getValue("postExportImageWithFormat", "index");
        let varformat = <string>TestInitializer.getValue("postExportImageWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("postExportImageWithFormat", "password");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "postExportImageWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImageWithFormat", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageOnline(vardocument, varindex, varformat, varpassword), "postExportImageWithFormat", field, vardocument);
            });
        });
    });

    it("invalid index test", () => {
        const field = "index";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportImageWithFormat", "document");
        let varindex = <number>TestInitializer.getValue("postExportImageWithFormat", "index");
        let varformat = <string>TestInitializer.getValue("postExportImageWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("postExportImageWithFormat", "password");
        varindex = <number>TestInitializer.invalidizeValue(varindex, field, "number", "postExportImageWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImageWithFormat", field, varindex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageOnline(vardocument, varindex, varformat, varpassword), "postExportImageWithFormat", field, varindex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportImageWithFormat", "document");
        let varindex = <number>TestInitializer.getValue("postExportImageWithFormat", "index");
        let varformat = <string>TestInitializer.getValue("postExportImageWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("postExportImageWithFormat", "password");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "postExportImageWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImageWithFormat", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageOnline(vardocument, varindex, varformat, varpassword), "postExportImageWithFormat", field, varformat);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportImageWithFormat", "document");
        let varindex = <number>TestInitializer.getValue("postExportImageWithFormat", "index");
        let varformat = <string>TestInitializer.getValue("postExportImageWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("postExportImageWithFormat", "password");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postExportImageWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImageWithFormat", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageOnline(vardocument, varindex, varformat, varpassword), "postExportImageWithFormat", field, varpassword);
            });
        });
    });
});

describe("Tests for downloadImagesOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("postExportImagesFromRequestWithFormat", "document");
            let varformat = <string>TestInitializer.getValue("postExportImagesFromRequestWithFormat", "format");
            let varpassword = <string>TestInitializer.getValue("postExportImagesFromRequestWithFormat", "password");
            return TestInitializer.initialize("postExportImagesFromRequestWithFormat", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImagesOnline(vardocument, varformat, varpassword), true, "postExportImagesFromRequestWithFormat");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportImagesFromRequestWithFormat", "document");
        let varformat = <string>TestInitializer.getValue("postExportImagesFromRequestWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("postExportImagesFromRequestWithFormat", "password");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "postExportImagesFromRequestWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImagesFromRequestWithFormat", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesOnline(vardocument, varformat, varpassword), "postExportImagesFromRequestWithFormat", field, vardocument);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportImagesFromRequestWithFormat", "document");
        let varformat = <string>TestInitializer.getValue("postExportImagesFromRequestWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("postExportImagesFromRequestWithFormat", "password");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "postExportImagesFromRequestWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImagesFromRequestWithFormat", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesOnline(vardocument, varformat, varpassword), "postExportImagesFromRequestWithFormat", field, varformat);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportImagesFromRequestWithFormat", "document");
        let varformat = <string>TestInitializer.getValue("postExportImagesFromRequestWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("postExportImagesFromRequestWithFormat", "password");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postExportImagesFromRequestWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImagesFromRequestWithFormat", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesOnline(vardocument, varformat, varpassword), "postExportImagesFromRequestWithFormat", field, varpassword);
            });
        });
    });
});

describe("Tests for downloadImagesDefaultFormat", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "name");
            let varpassword = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "password");
            let varfolder = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "folder");
            let varstorage = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "storage");
            return TestInitializer.initialize("postExportImagesWithDefaultFormat", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImagesDefaultFormat(varname, varpassword, varfolder, varstorage), true, "postExportImagesWithDefaultFormat");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "name");
        let varpassword = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "password");
        let varfolder = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postExportImagesWithDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImagesWithDefaultFormat", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesDefaultFormat(varname, varpassword, varfolder, varstorage), "postExportImagesWithDefaultFormat", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "name");
        let varpassword = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "password");
        let varfolder = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postExportImagesWithDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImagesWithDefaultFormat", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesDefaultFormat(varname, varpassword, varfolder, varstorage), "postExportImagesWithDefaultFormat", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "name");
        let varpassword = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "password");
        let varfolder = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postExportImagesWithDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImagesWithDefaultFormat", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesDefaultFormat(varname, varpassword, varfolder, varstorage), "postExportImagesWithDefaultFormat", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "name");
        let varpassword = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "password");
        let varfolder = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("postExportImagesWithDefaultFormat", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postExportImagesWithDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImagesWithDefaultFormat", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesDefaultFormat(varname, varpassword, varfolder, varstorage), "postExportImagesWithDefaultFormat", field, varstorage);
            });
        });
    });
});

describe("Tests for downloadImages", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postExportImagesWithFormat", "name");
            let varformat = <string>TestInitializer.getValue("postExportImagesWithFormat", "format");
            let varpassword = <string>TestInitializer.getValue("postExportImagesWithFormat", "password");
            let varfolder = <string>TestInitializer.getValue("postExportImagesWithFormat", "folder");
            let varstorage = <string>TestInitializer.getValue("postExportImagesWithFormat", "storage");
            return TestInitializer.initialize("postExportImagesWithFormat", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImages(varname, varformat, varpassword, varfolder, varstorage), true, "postExportImagesWithFormat");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postExportImagesWithFormat", "name");
        let varformat = <string>TestInitializer.getValue("postExportImagesWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("postExportImagesWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("postExportImagesWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("postExportImagesWithFormat", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postExportImagesWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImagesWithFormat", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImages(varname, varformat, varpassword, varfolder, varstorage), "postExportImagesWithFormat", field, varname);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("postExportImagesWithFormat", "name");
        let varformat = <string>TestInitializer.getValue("postExportImagesWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("postExportImagesWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("postExportImagesWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("postExportImagesWithFormat", "storage");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "postExportImagesWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImagesWithFormat", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImages(varname, varformat, varpassword, varfolder, varstorage), "postExportImagesWithFormat", field, varformat);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postExportImagesWithFormat", "name");
        let varformat = <string>TestInitializer.getValue("postExportImagesWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("postExportImagesWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("postExportImagesWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("postExportImagesWithFormat", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postExportImagesWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImagesWithFormat", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImages(varname, varformat, varpassword, varfolder, varstorage), "postExportImagesWithFormat", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postExportImagesWithFormat", "name");
        let varformat = <string>TestInitializer.getValue("postExportImagesWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("postExportImagesWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("postExportImagesWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("postExportImagesWithFormat", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postExportImagesWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImagesWithFormat", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImages(varname, varformat, varpassword, varfolder, varstorage), "postExportImagesWithFormat", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postExportImagesWithFormat", "name");
        let varformat = <string>TestInitializer.getValue("postExportImagesWithFormat", "format");
        let varpassword = <string>TestInitializer.getValue("postExportImagesWithFormat", "password");
        let varfolder = <string>TestInitializer.getValue("postExportImagesWithFormat", "folder");
        let varstorage = <string>TestInitializer.getValue("postExportImagesWithFormat", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postExportImagesWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportImagesWithFormat", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImages(varname, varformat, varpassword, varfolder, varstorage), "postExportImagesWithFormat", field, varstorage);
            });
        });
    });
});

describe("Tests for downloadShapeOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("postExportShape", "document");
            let varslideIndex = <number>TestInitializer.getValue("postExportShape", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("postExportShape", "shapeIndex");
            let varformat = <string>TestInitializer.getValue("postExportShape", "format");
            let varpassword = <string>TestInitializer.getValue("postExportShape", "password");
            let varstorage = <string>TestInitializer.getValue("postExportShape", "storage");
            let varscaleX = <number>TestInitializer.getValue("postExportShape", "scaleX");
            let varscaleY = <number>TestInitializer.getValue("postExportShape", "scaleY");
            let varbounds = <string>TestInitializer.getValue("postExportShape", "bounds");
            let varfontsFolder = <string>TestInitializer.getValue("postExportShape", "fontsFolder");
            return TestInitializer.initialize("postExportShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), true, "postExportShape");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postExportShape", "format");
        let varpassword = <string>TestInitializer.getValue("postExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("postExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("postExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("postExportShape", "fontsFolder");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "postExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportShape", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "postExportShape", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postExportShape", "format");
        let varpassword = <string>TestInitializer.getValue("postExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("postExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("postExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("postExportShape", "fontsFolder");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "postExportShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postExportShape", "format");
        let varpassword = <string>TestInitializer.getValue("postExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("postExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("postExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("postExportShape", "fontsFolder");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "postExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "postExportShape", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postExportShape", "format");
        let varpassword = <string>TestInitializer.getValue("postExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("postExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("postExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("postExportShape", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "postExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportShape", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "postExportShape", field, varformat);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postExportShape", "format");
        let varpassword = <string>TestInitializer.getValue("postExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("postExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("postExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("postExportShape", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "postExportShape", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postExportShape", "format");
        let varpassword = <string>TestInitializer.getValue("postExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("postExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("postExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("postExportShape", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "postExportShape", field, varstorage);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postExportShape", "format");
        let varpassword = <string>TestInitializer.getValue("postExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("postExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("postExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("postExportShape", "fontsFolder");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "postExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportShape", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "postExportShape", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postExportShape", "format");
        let varpassword = <string>TestInitializer.getValue("postExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("postExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("postExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("postExportShape", "fontsFolder");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "postExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportShape", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "postExportShape", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postExportShape", "format");
        let varpassword = <string>TestInitializer.getValue("postExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("postExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("postExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("postExportShape", "fontsFolder");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "postExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportShape", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "postExportShape", field, varbounds);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postExportShape", "format");
        let varpassword = <string>TestInitializer.getValue("postExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("postExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("postExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("postExportShape", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "postExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportShape", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "postExportShape", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for downloadSlideOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("postExportSlide", "document");
            let varslideIndex = <number>TestInitializer.getValue("postExportSlide", "slideIndex");
            let varformat = <string>TestInitializer.getValue("postExportSlide", "format");
            let varwidth = <number>TestInitializer.getValue("postExportSlide", "width");
            let varheight = <number>TestInitializer.getValue("postExportSlide", "height");
            let varpassword = <string>TestInitializer.getValue("postExportSlide", "password");
            let varstorage = <string>TestInitializer.getValue("postExportSlide", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("postExportSlide", "fontsFolder");
            return TestInitializer.initialize("postExportSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), true, "postExportSlide");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postExportSlide", "format");
        let varwidth = <number>TestInitializer.getValue("postExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("postExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("postExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("postExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postExportSlide", "fontsFolder");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "postExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportSlide", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "postExportSlide", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postExportSlide", "format");
        let varwidth = <number>TestInitializer.getValue("postExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("postExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("postExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("postExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postExportSlide", "fontsFolder");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "postExportSlide", field, varslideIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postExportSlide", "format");
        let varwidth = <number>TestInitializer.getValue("postExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("postExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("postExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("postExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postExportSlide", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "postExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportSlide", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "postExportSlide", field, varformat);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postExportSlide", "format");
        let varwidth = <number>TestInitializer.getValue("postExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("postExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("postExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("postExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postExportSlide", "fontsFolder");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "postExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportSlide", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "postExportSlide", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postExportSlide", "format");
        let varwidth = <number>TestInitializer.getValue("postExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("postExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("postExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("postExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postExportSlide", "fontsFolder");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "postExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportSlide", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "postExportSlide", field, varheight);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postExportSlide", "format");
        let varwidth = <number>TestInitializer.getValue("postExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("postExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("postExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("postExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postExportSlide", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "postExportSlide", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postExportSlide", "format");
        let varwidth = <number>TestInitializer.getValue("postExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("postExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("postExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("postExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postExportSlide", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "postExportSlide", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("postExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postExportSlide", "format");
        let varwidth = <number>TestInitializer.getValue("postExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("postExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("postExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("postExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postExportSlide", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "postExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postExportSlide", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "postExportSlide", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for getNotesSlideOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlide", "document");
            let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlide", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("postGetNotesSlide", "password");
            return TestInitializer.initialize("postGetNotesSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlideOnline(vardocument, varslideIndex, varpassword), false, "postGetNotesSlide");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("postGetNotesSlide", "password");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "postGetNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postGetNotesSlide", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideOnline(vardocument, varslideIndex, varpassword), "postGetNotesSlide", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("postGetNotesSlide", "password");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postGetNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postGetNotesSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideOnline(vardocument, varslideIndex, varpassword), "postGetNotesSlide", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlide", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("postGetNotesSlide", "password");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postGetNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postGetNotesSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideOnline(vardocument, varslideIndex, varpassword), "postGetNotesSlide", field, varpassword);
            });
        });
    });
});

describe("Tests for notesSlideExistsOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlideExists", "document");
            let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlideExists", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("postGetNotesSlideExists", "password");
            return TestInitializer.initialize("postGetNotesSlideExists", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().notesSlideExistsOnline(vardocument, varslideIndex, varpassword), false, "postGetNotesSlideExists");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlideExists", "document");
        let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlideExists", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("postGetNotesSlideExists", "password");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "postGetNotesSlideExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postGetNotesSlideExists", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExistsOnline(vardocument, varslideIndex, varpassword), "postGetNotesSlideExists", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlideExists", "document");
        let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlideExists", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("postGetNotesSlideExists", "password");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postGetNotesSlideExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postGetNotesSlideExists", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExistsOnline(vardocument, varslideIndex, varpassword), "postGetNotesSlideExists", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlideExists", "document");
        let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlideExists", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("postGetNotesSlideExists", "password");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postGetNotesSlideExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postGetNotesSlideExists", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExistsOnline(vardocument, varslideIndex, varpassword), "postGetNotesSlideExists", field, varpassword);
            });
        });
    });
});

describe("Tests for downloadNotesSlideOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlideWithFormat", "document");
            let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "slideIndex");
            let varformat = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "format");
            let varwidth = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "width");
            let varheight = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "height");
            let varpassword = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "password");
            let varfontsFolder = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "fontsFolder");
            return TestInitializer.initialize("postGetNotesSlideWithFormat", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), true, "postGetNotesSlideWithFormat");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlideWithFormat", "document");
        let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "password");
        let varfontsFolder = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "fontsFolder");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "postGetNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postGetNotesSlideWithFormat", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), "postGetNotesSlideWithFormat", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlideWithFormat", "document");
        let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "password");
        let varfontsFolder = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "fontsFolder");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postGetNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postGetNotesSlideWithFormat", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), "postGetNotesSlideWithFormat", field, varslideIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlideWithFormat", "document");
        let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "password");
        let varfontsFolder = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "postGetNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postGetNotesSlideWithFormat", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), "postGetNotesSlideWithFormat", field, varformat);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlideWithFormat", "document");
        let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "password");
        let varfontsFolder = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "fontsFolder");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "postGetNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postGetNotesSlideWithFormat", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), "postGetNotesSlideWithFormat", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlideWithFormat", "document");
        let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "password");
        let varfontsFolder = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "fontsFolder");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "postGetNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postGetNotesSlideWithFormat", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), "postGetNotesSlideWithFormat", field, varheight);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlideWithFormat", "document");
        let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "password");
        let varfontsFolder = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postGetNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postGetNotesSlideWithFormat", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), "postGetNotesSlideWithFormat", field, varpassword);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postGetNotesSlideWithFormat", "document");
        let varslideIndex = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "format");
        let varwidth = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "width");
        let varheight = <number>TestInitializer.getValue("postGetNotesSlideWithFormat", "height");
        let varpassword = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "password");
        let varfontsFolder = <string>TestInitializer.getValue("postGetNotesSlideWithFormat", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "postGetNotesSlideWithFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postGetNotesSlideWithFormat", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), "postGetNotesSlideWithFormat", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for downloadImagesDefaultFormatOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("postImagesFromRequestWithDefaultFormat", "document");
            let varpassword = <string>TestInitializer.getValue("postImagesFromRequestWithDefaultFormat", "password");
            return TestInitializer.initialize("postImagesFromRequestWithDefaultFormat", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImagesDefaultFormatOnline(vardocument, varpassword), true, "postImagesFromRequestWithDefaultFormat");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postImagesFromRequestWithDefaultFormat", "document");
        let varpassword = <string>TestInitializer.getValue("postImagesFromRequestWithDefaultFormat", "password");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "postImagesFromRequestWithDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postImagesFromRequestWithDefaultFormat", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesDefaultFormatOnline(vardocument, varpassword), "postImagesFromRequestWithDefaultFormat", field, vardocument);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postImagesFromRequestWithDefaultFormat", "document");
        let varpassword = <string>TestInitializer.getValue("postImagesFromRequestWithDefaultFormat", "password");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postImagesFromRequestWithDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postImagesFromRequestWithDefaultFormat", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesDefaultFormatOnline(vardocument, varpassword), "postImagesFromRequestWithDefaultFormat", field, varpassword);
            });
        });
    });
});

describe("Tests for createNotesSlideParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "name");
            let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "shapeIndex");
            let vardto = <model.Paragraph>TestInitializer.getValue("postNotesSlideAddNewParagraph", "dto");
            let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "position");
            let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "password");
            let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "folder");
            let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "storage");
            return TestInitializer.initialize("postNotesSlideAddNewParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), false, "postNotesSlideAddNewParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postNotesSlideAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postNotesSlideAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postNotesSlideAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postNotesSlideAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postNotesSlideAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "postNotesSlideAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postNotesSlideAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "storage");
        vardto = <model.Paragraph>TestInitializer.invalidizeValue(vardto, field, "Paragraph", "postNotesSlideAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewParagraph", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewParagraph", field, vardto);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postNotesSlideAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "storage");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "postNotesSlideAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewParagraph", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewParagraph", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postNotesSlideAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postNotesSlideAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postNotesSlideAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postNotesSlideAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "shapeIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("postNotesSlideAddNewParagraph", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewParagraph", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewParagraph", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postNotesSlideAddNewParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for createNotesSlidePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "name");
            let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "paragraphIndex");
            let vardto = <model.Portion>TestInitializer.getValue("postNotesSlideAddNewPortion", "dto");
            let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "position");
            let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "password");
            let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "folder");
            let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "storage");
            return TestInitializer.initialize("postNotesSlideAddNewPortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), false, "postNotesSlideAddNewPortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postNotesSlideAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postNotesSlideAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewPortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewPortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postNotesSlideAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postNotesSlideAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewPortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewPortion", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postNotesSlideAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "postNotesSlideAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewPortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewPortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postNotesSlideAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "postNotesSlideAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewPortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewPortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postNotesSlideAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "storage");
        vardto = <model.Portion>TestInitializer.invalidizeValue(vardto, field, "Portion", "postNotesSlideAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewPortion", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewPortion", field, vardto);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postNotesSlideAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "storage");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "postNotesSlideAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewPortion", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewPortion", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postNotesSlideAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postNotesSlideAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewPortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewPortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postNotesSlideAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postNotesSlideAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewPortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewPortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "paragraphIndex");
        let vardto = <model.Portion>TestInitializer.getValue("postNotesSlideAddNewPortion", "dto");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewPortion", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewPortion", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postNotesSlideAddNewPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewPortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewPortion", field, varstorage);
            });
        });
    });
});

describe("Tests for createNotesSlideShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "name");
            let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "slideIndex");
            let vardto = <model.ShapeBase>TestInitializer.getValue("postNotesSlideAddNewShape", "dto");
            let varshapeToClone = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "shapeToClone");
            let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "position");
            let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "password");
            let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "folder");
            let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "storage");
            return TestInitializer.initialize("postNotesSlideAddNewShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), false, "postNotesSlideAddNewShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postNotesSlideAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postNotesSlideAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postNotesSlideAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postNotesSlideAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewShape", field, varslideIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postNotesSlideAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "storage");
        vardto = <model.ShapeBase>TestInitializer.invalidizeValue(vardto, field, "ShapeBase", "postNotesSlideAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewShape", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewShape", field, vardto);
            });
        });
    });

    it("invalid shapeToClone test", () => {
        const field = "shapeToClone";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postNotesSlideAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "storage");
        varshapeToClone = <number>TestInitializer.invalidizeValue(varshapeToClone, field, "number", "postNotesSlideAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewShape", field, varshapeToClone).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewShape", field, varshapeToClone);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postNotesSlideAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "storage");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "postNotesSlideAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewShape", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewShape", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postNotesSlideAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postNotesSlideAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postNotesSlideAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postNotesSlideAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "slideIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("postNotesSlideAddNewShape", "dto");
        let varshapeToClone = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "shapeToClone");
        let varposition = <number>TestInitializer.getValue("postNotesSlideAddNewShape", "position");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideAddNewShape", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postNotesSlideAddNewShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideAddNewShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "postNotesSlideAddNewShape", field, varstorage);
            });
        });
    });
});

describe("Tests for downloadNotesSlideShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "name");
            let varslideIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "shapeIndex");
            let varformat = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "format");
            let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postNotesSlideShapeSaveAs", "options");
            let varscaleX = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleX");
            let varscaleY = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleY");
            let varbounds = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "bounds");
            let varpassword = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "password");
            let varfolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "folder");
            let varstorage = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "fontsFolder");
            return TestInitializer.initialize("postNotesSlideShapeSaveAs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), true, "postNotesSlideShapeSaveAs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "fontsFolder");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideShapeSaveAs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postNotesSlideShapeSaveAs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "fontsFolder");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideShapeSaveAs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postNotesSlideShapeSaveAs", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "fontsFolder");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "postNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideShapeSaveAs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postNotesSlideShapeSaveAs", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "postNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideShapeSaveAs", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postNotesSlideShapeSaveAs", field, varformat);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "fontsFolder");
        varoptions = <model.IShapeExportOptions>TestInitializer.invalidizeValue(varoptions, field, "IShapeExportOptions", "postNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideShapeSaveAs", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postNotesSlideShapeSaveAs", field, varoptions);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let varname = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "fontsFolder");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "postNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideShapeSaveAs", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postNotesSlideShapeSaveAs", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let varname = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "fontsFolder");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "postNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideShapeSaveAs", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postNotesSlideShapeSaveAs", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let varname = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "fontsFolder");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "postNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideShapeSaveAs", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postNotesSlideShapeSaveAs", field, varbounds);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideShapeSaveAs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postNotesSlideShapeSaveAs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "fontsFolder");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideShapeSaveAs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postNotesSlideShapeSaveAs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideShapeSaveAs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postNotesSlideShapeSaveAs", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postNotesSlideShapeSaveAs", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "postNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postNotesSlideShapeSaveAs", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postNotesSlideShapeSaveAs", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for merge", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postPresentationMerge", "name");
            let varrequest = <model.PresentationsMergeRequest>TestInitializer.getValue("postPresentationMerge", "request");
            let varpassword = <string>TestInitializer.getValue("postPresentationMerge", "password");
            let varfolder = <string>TestInitializer.getValue("postPresentationMerge", "folder");
            let varstorage = <string>TestInitializer.getValue("postPresentationMerge", "storage");
            return TestInitializer.initialize("postPresentationMerge", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().merge(varname, varrequest, varpassword, varfolder, varstorage), false, "postPresentationMerge");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postPresentationMerge", "name");
        let varrequest = <model.PresentationsMergeRequest>TestInitializer.getValue("postPresentationMerge", "request");
        let varpassword = <string>TestInitializer.getValue("postPresentationMerge", "password");
        let varfolder = <string>TestInitializer.getValue("postPresentationMerge", "folder");
        let varstorage = <string>TestInitializer.getValue("postPresentationMerge", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postPresentationMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationMerge", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().merge(varname, varrequest, varpassword, varfolder, varstorage), "postPresentationMerge", field, varname);
            });
        });
    });

    it("invalid request test", () => {
        const field = "request";
        let varname = <string>TestInitializer.getValue("postPresentationMerge", "name");
        let varrequest = <model.PresentationsMergeRequest>TestInitializer.getValue("postPresentationMerge", "request");
        let varpassword = <string>TestInitializer.getValue("postPresentationMerge", "password");
        let varfolder = <string>TestInitializer.getValue("postPresentationMerge", "folder");
        let varstorage = <string>TestInitializer.getValue("postPresentationMerge", "storage");
        varrequest = <model.PresentationsMergeRequest>TestInitializer.invalidizeValue(varrequest, field, "PresentationsMergeRequest", "postPresentationMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationMerge", field, varrequest).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().merge(varname, varrequest, varpassword, varfolder, varstorage), "postPresentationMerge", field, varrequest);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postPresentationMerge", "name");
        let varrequest = <model.PresentationsMergeRequest>TestInitializer.getValue("postPresentationMerge", "request");
        let varpassword = <string>TestInitializer.getValue("postPresentationMerge", "password");
        let varfolder = <string>TestInitializer.getValue("postPresentationMerge", "folder");
        let varstorage = <string>TestInitializer.getValue("postPresentationMerge", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postPresentationMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationMerge", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().merge(varname, varrequest, varpassword, varfolder, varstorage), "postPresentationMerge", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postPresentationMerge", "name");
        let varrequest = <model.PresentationsMergeRequest>TestInitializer.getValue("postPresentationMerge", "request");
        let varpassword = <string>TestInitializer.getValue("postPresentationMerge", "password");
        let varfolder = <string>TestInitializer.getValue("postPresentationMerge", "folder");
        let varstorage = <string>TestInitializer.getValue("postPresentationMerge", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postPresentationMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationMerge", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().merge(varname, varrequest, varpassword, varfolder, varstorage), "postPresentationMerge", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postPresentationMerge", "name");
        let varrequest = <model.PresentationsMergeRequest>TestInitializer.getValue("postPresentationMerge", "request");
        let varpassword = <string>TestInitializer.getValue("postPresentationMerge", "password");
        let varfolder = <string>TestInitializer.getValue("postPresentationMerge", "folder");
        let varstorage = <string>TestInitializer.getValue("postPresentationMerge", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postPresentationMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationMerge", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().merge(varname, varrequest, varpassword, varfolder, varstorage), "postPresentationMerge", field, varstorage);
            });
        });
    });
});

describe("Tests for replacePresentationTextOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationReplaceText", "document");
            let varoldValue = <string>TestInitializer.getValue("postPresentationReplaceText", "oldValue");
            let varnewValue = <string>TestInitializer.getValue("postPresentationReplaceText", "newValue");
            let varignoreCase = <boolean>TestInitializer.getValue("postPresentationReplaceText", "ignoreCase");
            let varpassword = <string>TestInitializer.getValue("postPresentationReplaceText", "password");
            return TestInitializer.initialize("postPresentationReplaceText", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().replacePresentationTextOnline(vardocument, varoldValue, varnewValue, varignoreCase, varpassword), true, "postPresentationReplaceText");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationReplaceText", "document");
        let varoldValue = <string>TestInitializer.getValue("postPresentationReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postPresentationReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postPresentationReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postPresentationReplaceText", "password");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "postPresentationReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationReplaceText", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationTextOnline(vardocument, varoldValue, varnewValue, varignoreCase, varpassword), "postPresentationReplaceText", field, vardocument);
            });
        });
    });

    it("invalid oldValue test", () => {
        const field = "oldValue";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationReplaceText", "document");
        let varoldValue = <string>TestInitializer.getValue("postPresentationReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postPresentationReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postPresentationReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postPresentationReplaceText", "password");
        varoldValue = <string>TestInitializer.invalidizeValue(varoldValue, field, "string", "postPresentationReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationReplaceText", field, varoldValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationTextOnline(vardocument, varoldValue, varnewValue, varignoreCase, varpassword), "postPresentationReplaceText", field, varoldValue);
            });
        });
    });

    it("invalid newValue test", () => {
        const field = "newValue";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationReplaceText", "document");
        let varoldValue = <string>TestInitializer.getValue("postPresentationReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postPresentationReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postPresentationReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postPresentationReplaceText", "password");
        varnewValue = <string>TestInitializer.invalidizeValue(varnewValue, field, "string", "postPresentationReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationReplaceText", field, varnewValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationTextOnline(vardocument, varoldValue, varnewValue, varignoreCase, varpassword), "postPresentationReplaceText", field, varnewValue);
            });
        });
    });

    it("invalid ignoreCase test", () => {
        const field = "ignoreCase";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationReplaceText", "document");
        let varoldValue = <string>TestInitializer.getValue("postPresentationReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postPresentationReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postPresentationReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postPresentationReplaceText", "password");
        varignoreCase = <boolean>TestInitializer.invalidizeValue(varignoreCase, field, "boolean", "postPresentationReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationReplaceText", field, varignoreCase).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationTextOnline(vardocument, varoldValue, varnewValue, varignoreCase, varpassword), "postPresentationReplaceText", field, varignoreCase);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationReplaceText", "document");
        let varoldValue = <string>TestInitializer.getValue("postPresentationReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postPresentationReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postPresentationReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postPresentationReplaceText", "password");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postPresentationReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationReplaceText", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationTextOnline(vardocument, varoldValue, varnewValue, varignoreCase, varpassword), "postPresentationReplaceText", field, varpassword);
            });
        });
    });
});

describe("Tests for splitOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationSplit", "document");
            let varformat = <string>TestInitializer.getValue("postPresentationSplit", "format");
            let varwidth = <number>TestInitializer.getValue("postPresentationSplit", "width");
            let varheight = <number>TestInitializer.getValue("postPresentationSplit", "height");
            let varfrom = <number>TestInitializer.getValue("postPresentationSplit", "from");
            let varto = <number>TestInitializer.getValue("postPresentationSplit", "to");
            let varpassword = <string>TestInitializer.getValue("postPresentationSplit", "password");
            let varstorage = <string>TestInitializer.getValue("postPresentationSplit", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("postPresentationSplit", "fontsFolder");
            return TestInitializer.initialize("postPresentationSplit", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), true, "postPresentationSplit");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("postPresentationSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("postPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("postPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("postPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("postPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postPresentationSplit", "fontsFolder");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "postPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationSplit", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "postPresentationSplit", field, vardocument);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("postPresentationSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("postPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("postPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("postPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("postPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postPresentationSplit", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "postPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationSplit", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "postPresentationSplit", field, varformat);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("postPresentationSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("postPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("postPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("postPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("postPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postPresentationSplit", "fontsFolder");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "postPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationSplit", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "postPresentationSplit", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("postPresentationSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("postPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("postPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("postPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("postPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postPresentationSplit", "fontsFolder");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "postPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationSplit", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "postPresentationSplit", field, varheight);
            });
        });
    });

    it("invalid from test", () => {
        const field = "from";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("postPresentationSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("postPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("postPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("postPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("postPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postPresentationSplit", "fontsFolder");
        varfrom = <number>TestInitializer.invalidizeValue(varfrom, field, "number", "postPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationSplit", field, varfrom).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "postPresentationSplit", field, varfrom);
            });
        });
    });

    it("invalid to test", () => {
        const field = "to";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("postPresentationSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("postPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("postPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("postPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("postPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postPresentationSplit", "fontsFolder");
        varto = <number>TestInitializer.invalidizeValue(varto, field, "number", "postPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationSplit", field, varto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "postPresentationSplit", field, varto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("postPresentationSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("postPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("postPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("postPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("postPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postPresentationSplit", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationSplit", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "postPresentationSplit", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("postPresentationSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("postPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("postPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("postPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("postPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postPresentationSplit", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationSplit", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "postPresentationSplit", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("postPresentationSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("postPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("postPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("postPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("postPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postPresentationSplit", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "postPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postPresentationSplit", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "postPresentationSplit", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for createSection", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSection", "name");
            let varsectionName = <string>TestInitializer.getValue("postSection", "sectionName");
            let varslideIndex = <number>TestInitializer.getValue("postSection", "slideIndex");
            let varpassword = <string>TestInitializer.getValue("postSection", "password");
            let varfolder = <string>TestInitializer.getValue("postSection", "folder");
            let varstorage = <string>TestInitializer.getValue("postSection", "storage");
            return TestInitializer.initialize("postSection", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createSection(varname, varsectionName, varslideIndex, varpassword, varfolder, varstorage), false, "postSection");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSection", "name");
        let varsectionName = <string>TestInitializer.getValue("postSection", "sectionName");
        let varslideIndex = <number>TestInitializer.getValue("postSection", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("postSection", "password");
        let varfolder = <string>TestInitializer.getValue("postSection", "folder");
        let varstorage = <string>TestInitializer.getValue("postSection", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSection", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSection(varname, varsectionName, varslideIndex, varpassword, varfolder, varstorage), "postSection", field, varname);
            });
        });
    });

    it("invalid sectionName test", () => {
        const field = "sectionName";
        let varname = <string>TestInitializer.getValue("postSection", "name");
        let varsectionName = <string>TestInitializer.getValue("postSection", "sectionName");
        let varslideIndex = <number>TestInitializer.getValue("postSection", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("postSection", "password");
        let varfolder = <string>TestInitializer.getValue("postSection", "folder");
        let varstorage = <string>TestInitializer.getValue("postSection", "storage");
        varsectionName = <string>TestInitializer.invalidizeValue(varsectionName, field, "string", "postSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSection", field, varsectionName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSection(varname, varsectionName, varslideIndex, varpassword, varfolder, varstorage), "postSection", field, varsectionName);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postSection", "name");
        let varsectionName = <string>TestInitializer.getValue("postSection", "sectionName");
        let varslideIndex = <number>TestInitializer.getValue("postSection", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("postSection", "password");
        let varfolder = <string>TestInitializer.getValue("postSection", "folder");
        let varstorage = <string>TestInitializer.getValue("postSection", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSection", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSection(varname, varsectionName, varslideIndex, varpassword, varfolder, varstorage), "postSection", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSection", "name");
        let varsectionName = <string>TestInitializer.getValue("postSection", "sectionName");
        let varslideIndex = <number>TestInitializer.getValue("postSection", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("postSection", "password");
        let varfolder = <string>TestInitializer.getValue("postSection", "folder");
        let varstorage = <string>TestInitializer.getValue("postSection", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSection", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSection(varname, varsectionName, varslideIndex, varpassword, varfolder, varstorage), "postSection", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSection", "name");
        let varsectionName = <string>TestInitializer.getValue("postSection", "sectionName");
        let varslideIndex = <number>TestInitializer.getValue("postSection", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("postSection", "password");
        let varfolder = <string>TestInitializer.getValue("postSection", "folder");
        let varstorage = <string>TestInitializer.getValue("postSection", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSection", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSection(varname, varsectionName, varslideIndex, varpassword, varfolder, varstorage), "postSection", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSection", "name");
        let varsectionName = <string>TestInitializer.getValue("postSection", "sectionName");
        let varslideIndex = <number>TestInitializer.getValue("postSection", "slideIndex");
        let varpassword = <string>TestInitializer.getValue("postSection", "password");
        let varfolder = <string>TestInitializer.getValue("postSection", "folder");
        let varstorage = <string>TestInitializer.getValue("postSection", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSection", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSection(varname, varsectionName, varslideIndex, varpassword, varfolder, varstorage), "postSection", field, varstorage);
            });
        });
    });
});

describe("Tests for moveSection", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSectionMove", "name");
            let varsectionIndex = <number>TestInitializer.getValue("postSectionMove", "sectionIndex");
            let varnewPosition = <number>TestInitializer.getValue("postSectionMove", "newPosition");
            let varpassword = <string>TestInitializer.getValue("postSectionMove", "password");
            let varfolder = <string>TestInitializer.getValue("postSectionMove", "folder");
            let varstorage = <string>TestInitializer.getValue("postSectionMove", "storage");
            return TestInitializer.initialize("postSectionMove", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().moveSection(varname, varsectionIndex, varnewPosition, varpassword, varfolder, varstorage), false, "postSectionMove");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSectionMove", "name");
        let varsectionIndex = <number>TestInitializer.getValue("postSectionMove", "sectionIndex");
        let varnewPosition = <number>TestInitializer.getValue("postSectionMove", "newPosition");
        let varpassword = <string>TestInitializer.getValue("postSectionMove", "password");
        let varfolder = <string>TestInitializer.getValue("postSectionMove", "folder");
        let varstorage = <string>TestInitializer.getValue("postSectionMove", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSectionMove");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSectionMove", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSection(varname, varsectionIndex, varnewPosition, varpassword, varfolder, varstorage), "postSectionMove", field, varname);
            });
        });
    });

    it("invalid sectionIndex test", () => {
        const field = "sectionIndex";
        let varname = <string>TestInitializer.getValue("postSectionMove", "name");
        let varsectionIndex = <number>TestInitializer.getValue("postSectionMove", "sectionIndex");
        let varnewPosition = <number>TestInitializer.getValue("postSectionMove", "newPosition");
        let varpassword = <string>TestInitializer.getValue("postSectionMove", "password");
        let varfolder = <string>TestInitializer.getValue("postSectionMove", "folder");
        let varstorage = <string>TestInitializer.getValue("postSectionMove", "storage");
        varsectionIndex = <number>TestInitializer.invalidizeValue(varsectionIndex, field, "number", "postSectionMove");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSectionMove", field, varsectionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSection(varname, varsectionIndex, varnewPosition, varpassword, varfolder, varstorage), "postSectionMove", field, varsectionIndex);
            });
        });
    });

    it("invalid newPosition test", () => {
        const field = "newPosition";
        let varname = <string>TestInitializer.getValue("postSectionMove", "name");
        let varsectionIndex = <number>TestInitializer.getValue("postSectionMove", "sectionIndex");
        let varnewPosition = <number>TestInitializer.getValue("postSectionMove", "newPosition");
        let varpassword = <string>TestInitializer.getValue("postSectionMove", "password");
        let varfolder = <string>TestInitializer.getValue("postSectionMove", "folder");
        let varstorage = <string>TestInitializer.getValue("postSectionMove", "storage");
        varnewPosition = <number>TestInitializer.invalidizeValue(varnewPosition, field, "number", "postSectionMove");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSectionMove", field, varnewPosition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSection(varname, varsectionIndex, varnewPosition, varpassword, varfolder, varstorage), "postSectionMove", field, varnewPosition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSectionMove", "name");
        let varsectionIndex = <number>TestInitializer.getValue("postSectionMove", "sectionIndex");
        let varnewPosition = <number>TestInitializer.getValue("postSectionMove", "newPosition");
        let varpassword = <string>TestInitializer.getValue("postSectionMove", "password");
        let varfolder = <string>TestInitializer.getValue("postSectionMove", "folder");
        let varstorage = <string>TestInitializer.getValue("postSectionMove", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSectionMove");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSectionMove", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSection(varname, varsectionIndex, varnewPosition, varpassword, varfolder, varstorage), "postSectionMove", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSectionMove", "name");
        let varsectionIndex = <number>TestInitializer.getValue("postSectionMove", "sectionIndex");
        let varnewPosition = <number>TestInitializer.getValue("postSectionMove", "newPosition");
        let varpassword = <string>TestInitializer.getValue("postSectionMove", "password");
        let varfolder = <string>TestInitializer.getValue("postSectionMove", "folder");
        let varstorage = <string>TestInitializer.getValue("postSectionMove", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSectionMove");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSectionMove", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSection(varname, varsectionIndex, varnewPosition, varpassword, varfolder, varstorage), "postSectionMove", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSectionMove", "name");
        let varsectionIndex = <number>TestInitializer.getValue("postSectionMove", "sectionIndex");
        let varnewPosition = <number>TestInitializer.getValue("postSectionMove", "newPosition");
        let varpassword = <string>TestInitializer.getValue("postSectionMove", "password");
        let varfolder = <string>TestInitializer.getValue("postSectionMove", "folder");
        let varstorage = <string>TestInitializer.getValue("postSectionMove", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSectionMove");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSectionMove", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSection(varname, varsectionIndex, varnewPosition, varpassword, varfolder, varstorage), "postSectionMove", field, varstorage);
            });
        });
    });
});

describe("Tests for downloadShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postShapeSaveAs", "name");
            let varslideIndex = <number>TestInitializer.getValue("postShapeSaveAs", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("postShapeSaveAs", "shapeIndex");
            let varformat = <string>TestInitializer.getValue("postShapeSaveAs", "format");
            let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postShapeSaveAs", "options");
            let varscaleX = <number>TestInitializer.getValue("postShapeSaveAs", "scaleX");
            let varscaleY = <number>TestInitializer.getValue("postShapeSaveAs", "scaleY");
            let varbounds = <string>TestInitializer.getValue("postShapeSaveAs", "bounds");
            let varpassword = <string>TestInitializer.getValue("postShapeSaveAs", "password");
            let varfolder = <string>TestInitializer.getValue("postShapeSaveAs", "folder");
            let varstorage = <string>TestInitializer.getValue("postShapeSaveAs", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("postShapeSaveAs", "fontsFolder");
            return TestInitializer.initialize("postShapeSaveAs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), true, "postShapeSaveAs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postShapeSaveAs", "fontsFolder");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postShapeSaveAs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postShapeSaveAs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postShapeSaveAs", "fontsFolder");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postShapeSaveAs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postShapeSaveAs", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("postShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postShapeSaveAs", "fontsFolder");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "postShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postShapeSaveAs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postShapeSaveAs", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("postShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postShapeSaveAs", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "postShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postShapeSaveAs", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postShapeSaveAs", field, varformat);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("postShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postShapeSaveAs", "fontsFolder");
        varoptions = <model.IShapeExportOptions>TestInitializer.invalidizeValue(varoptions, field, "IShapeExportOptions", "postShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postShapeSaveAs", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postShapeSaveAs", field, varoptions);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let varname = <string>TestInitializer.getValue("postShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postShapeSaveAs", "fontsFolder");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "postShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postShapeSaveAs", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postShapeSaveAs", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let varname = <string>TestInitializer.getValue("postShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postShapeSaveAs", "fontsFolder");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "postShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postShapeSaveAs", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postShapeSaveAs", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let varname = <string>TestInitializer.getValue("postShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postShapeSaveAs", "fontsFolder");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "postShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postShapeSaveAs", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postShapeSaveAs", field, varbounds);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postShapeSaveAs", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postShapeSaveAs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postShapeSaveAs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postShapeSaveAs", "fontsFolder");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postShapeSaveAs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postShapeSaveAs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postShapeSaveAs", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postShapeSaveAs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postShapeSaveAs", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("postShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("postShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postShapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postShapeSaveAs", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "postShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postShapeSaveAs", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postShapeSaveAs", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for createAnimationEffect", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlideAnimationEffect", "name");
            let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationEffect", "slideIndex");
            let vareffect = <model.Effect>TestInitializer.getValue("postSlideAnimationEffect", "effect");
            let varpassword = <string>TestInitializer.getValue("postSlideAnimationEffect", "password");
            let varfolder = <string>TestInitializer.getValue("postSlideAnimationEffect", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlideAnimationEffect", "storage");
            return TestInitializer.initialize("postSlideAnimationEffect", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createAnimationEffect(varname, varslideIndex, vareffect, varpassword, varfolder, varstorage), false, "postSlideAnimationEffect");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationEffect", "slideIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("postSlideAnimationEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationEffect", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationEffect", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationEffect(varname, varslideIndex, vareffect, varpassword, varfolder, varstorage), "postSlideAnimationEffect", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationEffect", "slideIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("postSlideAnimationEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationEffect", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationEffect", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationEffect(varname, varslideIndex, vareffect, varpassword, varfolder, varstorage), "postSlideAnimationEffect", field, varslideIndex);
            });
        });
    });

    it("invalid effect test", () => {
        const field = "effect";
        let varname = <string>TestInitializer.getValue("postSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationEffect", "slideIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("postSlideAnimationEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationEffect", "storage");
        vareffect = <model.Effect>TestInitializer.invalidizeValue(vareffect, field, "Effect", "postSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationEffect", field, vareffect).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationEffect(varname, varslideIndex, vareffect, varpassword, varfolder, varstorage), "postSlideAnimationEffect", field, vareffect);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationEffect", "slideIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("postSlideAnimationEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationEffect", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationEffect", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationEffect(varname, varslideIndex, vareffect, varpassword, varfolder, varstorage), "postSlideAnimationEffect", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationEffect", "slideIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("postSlideAnimationEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationEffect", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationEffect", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationEffect(varname, varslideIndex, vareffect, varpassword, varfolder, varstorage), "postSlideAnimationEffect", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationEffect", "slideIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("postSlideAnimationEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationEffect", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationEffect", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationEffect(varname, varslideIndex, vareffect, varpassword, varfolder, varstorage), "postSlideAnimationEffect", field, varstorage);
            });
        });
    });
});

describe("Tests for createAnimationInteractiveSequence", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "name");
            let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "slideIndex");
            let varsequence = <model.InteractiveSequence>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "sequence");
            let varpassword = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "password");
            let varfolder = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "storage");
            return TestInitializer.initialize("postSlideAnimationInteractiveSequence", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createAnimationInteractiveSequence(varname, varslideIndex, varsequence, varpassword, varfolder, varstorage), false, "postSlideAnimationInteractiveSequence");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "slideIndex");
        let varsequence = <model.InteractiveSequence>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "sequence");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlideAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationInteractiveSequence", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequence(varname, varslideIndex, varsequence, varpassword, varfolder, varstorage), "postSlideAnimationInteractiveSequence", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "slideIndex");
        let varsequence = <model.InteractiveSequence>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "sequence");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postSlideAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationInteractiveSequence", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequence(varname, varslideIndex, varsequence, varpassword, varfolder, varstorage), "postSlideAnimationInteractiveSequence", field, varslideIndex);
            });
        });
    });

    it("invalid sequence test", () => {
        const field = "sequence";
        let varname = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "slideIndex");
        let varsequence = <model.InteractiveSequence>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "sequence");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "storage");
        varsequence = <model.InteractiveSequence>TestInitializer.invalidizeValue(varsequence, field, "InteractiveSequence", "postSlideAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationInteractiveSequence", field, varsequence).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequence(varname, varslideIndex, varsequence, varpassword, varfolder, varstorage), "postSlideAnimationInteractiveSequence", field, varsequence);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "slideIndex");
        let varsequence = <model.InteractiveSequence>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "sequence");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlideAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationInteractiveSequence", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequence(varname, varslideIndex, varsequence, varpassword, varfolder, varstorage), "postSlideAnimationInteractiveSequence", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "slideIndex");
        let varsequence = <model.InteractiveSequence>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "sequence");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlideAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationInteractiveSequence", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequence(varname, varslideIndex, varsequence, varpassword, varfolder, varstorage), "postSlideAnimationInteractiveSequence", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "slideIndex");
        let varsequence = <model.InteractiveSequence>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "sequence");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequence", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlideAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationInteractiveSequence", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequence(varname, varslideIndex, varsequence, varpassword, varfolder, varstorage), "postSlideAnimationInteractiveSequence", field, varstorage);
            });
        });
    });
});

describe("Tests for createAnimationInteractiveSequenceEffect", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "name");
            let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
            let varsequenceIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
            let vareffect = <model.Effect>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "effect");
            let varpassword = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "password");
            let varfolder = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "storage");
            return TestInitializer.initialize("postSlideAnimationInteractiveSequenceEffect", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), false, "postSlideAnimationInteractiveSequenceEffect");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationInteractiveSequenceEffect", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), "postSlideAnimationInteractiveSequenceEffect", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationInteractiveSequenceEffect", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), "postSlideAnimationInteractiveSequenceEffect", field, varslideIndex);
            });
        });
    });

    it("invalid sequenceIndex test", () => {
        const field = "sequenceIndex";
        let varname = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "storage");
        varsequenceIndex = <number>TestInitializer.invalidizeValue(varsequenceIndex, field, "number", "postSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationInteractiveSequenceEffect", field, varsequenceIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), "postSlideAnimationInteractiveSequenceEffect", field, varsequenceIndex);
            });
        });
    });

    it("invalid effect test", () => {
        const field = "effect";
        let varname = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "storage");
        vareffect = <model.Effect>TestInitializer.invalidizeValue(vareffect, field, "Effect", "postSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationInteractiveSequenceEffect", field, vareffect).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), "postSlideAnimationInteractiveSequenceEffect", field, vareffect);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationInteractiveSequenceEffect", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), "postSlideAnimationInteractiveSequenceEffect", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationInteractiveSequenceEffect", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), "postSlideAnimationInteractiveSequenceEffect", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideAnimationInteractiveSequenceEffect", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideAnimationInteractiveSequenceEffect", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), "postSlideAnimationInteractiveSequenceEffect", field, varstorage);
            });
        });
    });
});

describe("Tests for replaceSlideTextOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("postSlideReplaceText", "document");
            let varslideIndex = <number>TestInitializer.getValue("postSlideReplaceText", "slideIndex");
            let varoldValue = <string>TestInitializer.getValue("postSlideReplaceText", "oldValue");
            let varnewValue = <string>TestInitializer.getValue("postSlideReplaceText", "newValue");
            let varignoreCase = <boolean>TestInitializer.getValue("postSlideReplaceText", "ignoreCase");
            let varpassword = <string>TestInitializer.getValue("postSlideReplaceText", "password");
            return TestInitializer.initialize("postSlideReplaceText", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().replaceSlideTextOnline(vardocument, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword), true, "postSlideReplaceText");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postSlideReplaceText", "document");
        let varslideIndex = <number>TestInitializer.getValue("postSlideReplaceText", "slideIndex");
        let varoldValue = <string>TestInitializer.getValue("postSlideReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlideReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlideReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlideReplaceText", "password");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "postSlideReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideReplaceText", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideTextOnline(vardocument, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword), "postSlideReplaceText", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postSlideReplaceText", "document");
        let varslideIndex = <number>TestInitializer.getValue("postSlideReplaceText", "slideIndex");
        let varoldValue = <string>TestInitializer.getValue("postSlideReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlideReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlideReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlideReplaceText", "password");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postSlideReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideReplaceText", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideTextOnline(vardocument, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword), "postSlideReplaceText", field, varslideIndex);
            });
        });
    });

    it("invalid oldValue test", () => {
        const field = "oldValue";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postSlideReplaceText", "document");
        let varslideIndex = <number>TestInitializer.getValue("postSlideReplaceText", "slideIndex");
        let varoldValue = <string>TestInitializer.getValue("postSlideReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlideReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlideReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlideReplaceText", "password");
        varoldValue = <string>TestInitializer.invalidizeValue(varoldValue, field, "string", "postSlideReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideReplaceText", field, varoldValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideTextOnline(vardocument, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword), "postSlideReplaceText", field, varoldValue);
            });
        });
    });

    it("invalid newValue test", () => {
        const field = "newValue";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postSlideReplaceText", "document");
        let varslideIndex = <number>TestInitializer.getValue("postSlideReplaceText", "slideIndex");
        let varoldValue = <string>TestInitializer.getValue("postSlideReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlideReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlideReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlideReplaceText", "password");
        varnewValue = <string>TestInitializer.invalidizeValue(varnewValue, field, "string", "postSlideReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideReplaceText", field, varnewValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideTextOnline(vardocument, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword), "postSlideReplaceText", field, varnewValue);
            });
        });
    });

    it("invalid ignoreCase test", () => {
        const field = "ignoreCase";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postSlideReplaceText", "document");
        let varslideIndex = <number>TestInitializer.getValue("postSlideReplaceText", "slideIndex");
        let varoldValue = <string>TestInitializer.getValue("postSlideReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlideReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlideReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlideReplaceText", "password");
        varignoreCase = <boolean>TestInitializer.invalidizeValue(varignoreCase, field, "boolean", "postSlideReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideReplaceText", field, varignoreCase).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideTextOnline(vardocument, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword), "postSlideReplaceText", field, varignoreCase);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postSlideReplaceText", "document");
        let varslideIndex = <number>TestInitializer.getValue("postSlideReplaceText", "slideIndex");
        let varoldValue = <string>TestInitializer.getValue("postSlideReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlideReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlideReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlideReplaceText", "password");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlideReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideReplaceText", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideTextOnline(vardocument, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword), "postSlideReplaceText", field, varpassword);
            });
        });
    });
});

describe("Tests for downloadSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlideSaveAs", "name");
            let varslideIndex = <number>TestInitializer.getValue("postSlideSaveAs", "slideIndex");
            let varformat = <string>TestInitializer.getValue("postSlideSaveAs", "format");
            let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlideSaveAs", "options");
            let varwidth = <number>TestInitializer.getValue("postSlideSaveAs", "width");
            let varheight = <number>TestInitializer.getValue("postSlideSaveAs", "height");
            let varpassword = <string>TestInitializer.getValue("postSlideSaveAs", "password");
            let varfolder = <string>TestInitializer.getValue("postSlideSaveAs", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlideSaveAs", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("postSlideSaveAs", "fontsFolder");
            return TestInitializer.initialize("postSlideSaveAs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), true, "postSlideSaveAs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postSlideSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("postSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("postSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("postSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlideSaveAs", "fontsFolder");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideSaveAs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "postSlideSaveAs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postSlideSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("postSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("postSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("postSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlideSaveAs", "fontsFolder");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideSaveAs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "postSlideSaveAs", field, varslideIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("postSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postSlideSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("postSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("postSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("postSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlideSaveAs", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "postSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideSaveAs", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "postSlideSaveAs", field, varformat);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("postSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postSlideSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("postSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("postSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("postSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlideSaveAs", "fontsFolder");
        varoptions = <model.ExportOptions>TestInitializer.invalidizeValue(varoptions, field, "ExportOptions", "postSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideSaveAs", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "postSlideSaveAs", field, varoptions);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let varname = <string>TestInitializer.getValue("postSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postSlideSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("postSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("postSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("postSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlideSaveAs", "fontsFolder");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "postSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideSaveAs", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "postSlideSaveAs", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let varname = <string>TestInitializer.getValue("postSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postSlideSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("postSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("postSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("postSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlideSaveAs", "fontsFolder");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "postSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideSaveAs", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "postSlideSaveAs", field, varheight);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postSlideSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("postSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("postSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("postSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlideSaveAs", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideSaveAs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "postSlideSaveAs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postSlideSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("postSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("postSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("postSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlideSaveAs", "fontsFolder");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideSaveAs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "postSlideSaveAs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postSlideSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("postSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("postSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("postSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlideSaveAs", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideSaveAs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "postSlideSaveAs", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("postSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("postSlideSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("postSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("postSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("postSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlideSaveAs", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "postSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlideSaveAs", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "postSlideSaveAs", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for createSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlidesAdd", "name");
            let varlayoutAlias = <string>TestInitializer.getValue("postSlidesAdd", "layoutAlias");
            let varposition = <number>TestInitializer.getValue("postSlidesAdd", "position");
            let varpassword = <string>TestInitializer.getValue("postSlidesAdd", "password");
            let varfolder = <string>TestInitializer.getValue("postSlidesAdd", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlidesAdd", "storage");
            return TestInitializer.initialize("postSlidesAdd", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createSlide(varname, varlayoutAlias, varposition, varpassword, varfolder, varstorage), false, "postSlidesAdd");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlidesAdd", "name");
        let varlayoutAlias = <string>TestInitializer.getValue("postSlidesAdd", "layoutAlias");
        let varposition = <number>TestInitializer.getValue("postSlidesAdd", "position");
        let varpassword = <string>TestInitializer.getValue("postSlidesAdd", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesAdd", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesAdd", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlidesAdd");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesAdd", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSlide(varname, varlayoutAlias, varposition, varpassword, varfolder, varstorage), "postSlidesAdd", field, varname);
            });
        });
    });

    it("invalid layoutAlias test", () => {
        const field = "layoutAlias";
        let varname = <string>TestInitializer.getValue("postSlidesAdd", "name");
        let varlayoutAlias = <string>TestInitializer.getValue("postSlidesAdd", "layoutAlias");
        let varposition = <number>TestInitializer.getValue("postSlidesAdd", "position");
        let varpassword = <string>TestInitializer.getValue("postSlidesAdd", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesAdd", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesAdd", "storage");
        varlayoutAlias = <string>TestInitializer.invalidizeValue(varlayoutAlias, field, "string", "postSlidesAdd");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesAdd", field, varlayoutAlias).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSlide(varname, varlayoutAlias, varposition, varpassword, varfolder, varstorage), "postSlidesAdd", field, varlayoutAlias);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("postSlidesAdd", "name");
        let varlayoutAlias = <string>TestInitializer.getValue("postSlidesAdd", "layoutAlias");
        let varposition = <number>TestInitializer.getValue("postSlidesAdd", "position");
        let varpassword = <string>TestInitializer.getValue("postSlidesAdd", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesAdd", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesAdd", "storage");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "postSlidesAdd");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesAdd", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSlide(varname, varlayoutAlias, varposition, varpassword, varfolder, varstorage), "postSlidesAdd", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlidesAdd", "name");
        let varlayoutAlias = <string>TestInitializer.getValue("postSlidesAdd", "layoutAlias");
        let varposition = <number>TestInitializer.getValue("postSlidesAdd", "position");
        let varpassword = <string>TestInitializer.getValue("postSlidesAdd", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesAdd", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesAdd", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesAdd");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesAdd", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSlide(varname, varlayoutAlias, varposition, varpassword, varfolder, varstorage), "postSlidesAdd", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlidesAdd", "name");
        let varlayoutAlias = <string>TestInitializer.getValue("postSlidesAdd", "layoutAlias");
        let varposition = <number>TestInitializer.getValue("postSlidesAdd", "position");
        let varpassword = <string>TestInitializer.getValue("postSlidesAdd", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesAdd", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesAdd", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlidesAdd");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesAdd", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSlide(varname, varlayoutAlias, varposition, varpassword, varfolder, varstorage), "postSlidesAdd", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlidesAdd", "name");
        let varlayoutAlias = <string>TestInitializer.getValue("postSlidesAdd", "layoutAlias");
        let varposition = <number>TestInitializer.getValue("postSlidesAdd", "position");
        let varpassword = <string>TestInitializer.getValue("postSlidesAdd", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesAdd", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesAdd", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlidesAdd");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesAdd", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSlide(varname, varlayoutAlias, varposition, varpassword, varfolder, varstorage), "postSlidesAdd", field, varstorage);
            });
        });
    });
});

describe("Tests for convert", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("postSlidesConvert", "document");
            let varformat = <string>TestInitializer.getValue("postSlidesConvert", "format");
            let varpassword = <string>TestInitializer.getValue("postSlidesConvert", "password");
            let varstorage = <string>TestInitializer.getValue("postSlidesConvert", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("postSlidesConvert", "fontsFolder");
            return TestInitializer.initialize("postSlidesConvert", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().convert(vardocument, varformat, varpassword, varstorage, varfontsFolder), true, "postSlidesConvert");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postSlidesConvert", "document");
        let varformat = <string>TestInitializer.getValue("postSlidesConvert", "format");
        let varpassword = <string>TestInitializer.getValue("postSlidesConvert", "password");
        let varstorage = <string>TestInitializer.getValue("postSlidesConvert", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesConvert", "fontsFolder");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "postSlidesConvert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesConvert", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convert(vardocument, varformat, varpassword, varstorage, varfontsFolder), "postSlidesConvert", field, vardocument);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postSlidesConvert", "document");
        let varformat = <string>TestInitializer.getValue("postSlidesConvert", "format");
        let varpassword = <string>TestInitializer.getValue("postSlidesConvert", "password");
        let varstorage = <string>TestInitializer.getValue("postSlidesConvert", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesConvert", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "postSlidesConvert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesConvert", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convert(vardocument, varformat, varpassword, varstorage, varfontsFolder), "postSlidesConvert", field, varformat);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postSlidesConvert", "document");
        let varformat = <string>TestInitializer.getValue("postSlidesConvert", "format");
        let varpassword = <string>TestInitializer.getValue("postSlidesConvert", "password");
        let varstorage = <string>TestInitializer.getValue("postSlidesConvert", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesConvert", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesConvert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesConvert", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convert(vardocument, varformat, varpassword, varstorage, varfontsFolder), "postSlidesConvert", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postSlidesConvert", "document");
        let varformat = <string>TestInitializer.getValue("postSlidesConvert", "format");
        let varpassword = <string>TestInitializer.getValue("postSlidesConvert", "password");
        let varstorage = <string>TestInitializer.getValue("postSlidesConvert", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesConvert", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlidesConvert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesConvert", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convert(vardocument, varformat, varpassword, varstorage, varfontsFolder), "postSlidesConvert", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("postSlidesConvert", "document");
        let varformat = <string>TestInitializer.getValue("postSlidesConvert", "format");
        let varpassword = <string>TestInitializer.getValue("postSlidesConvert", "password");
        let varstorage = <string>TestInitializer.getValue("postSlidesConvert", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesConvert", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "postSlidesConvert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesConvert", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convert(vardocument, varformat, varpassword, varstorage, varfontsFolder), "postSlidesConvert", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for copySlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlidesCopy", "name");
            let varslideToCopy = <number>TestInitializer.getValue("postSlidesCopy", "slideToCopy");
            let varposition = <number>TestInitializer.getValue("postSlidesCopy", "position");
            let varsource = <string>TestInitializer.getValue("postSlidesCopy", "source");
            let varsourcePassword = <string>TestInitializer.getValue("postSlidesCopy", "sourcePassword");
            let varsourceStorage = <string>TestInitializer.getValue("postSlidesCopy", "sourceStorage");
            let varpassword = <string>TestInitializer.getValue("postSlidesCopy", "password");
            let varfolder = <string>TestInitializer.getValue("postSlidesCopy", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlidesCopy", "storage");
            return TestInitializer.initialize("postSlidesCopy", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), false, "postSlidesCopy");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlidesCopy", "name");
        let varslideToCopy = <number>TestInitializer.getValue("postSlidesCopy", "slideToCopy");
        let varposition = <number>TestInitializer.getValue("postSlidesCopy", "position");
        let varsource = <string>TestInitializer.getValue("postSlidesCopy", "source");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesCopy", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesCopy", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesCopy", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesCopy", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesCopy", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlidesCopy");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesCopy", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesCopy", field, varname);
            });
        });
    });

    it("invalid slideToCopy test", () => {
        const field = "slideToCopy";
        let varname = <string>TestInitializer.getValue("postSlidesCopy", "name");
        let varslideToCopy = <number>TestInitializer.getValue("postSlidesCopy", "slideToCopy");
        let varposition = <number>TestInitializer.getValue("postSlidesCopy", "position");
        let varsource = <string>TestInitializer.getValue("postSlidesCopy", "source");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesCopy", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesCopy", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesCopy", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesCopy", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesCopy", "storage");
        varslideToCopy = <number>TestInitializer.invalidizeValue(varslideToCopy, field, "number", "postSlidesCopy");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesCopy", field, varslideToCopy).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesCopy", field, varslideToCopy);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("postSlidesCopy", "name");
        let varslideToCopy = <number>TestInitializer.getValue("postSlidesCopy", "slideToCopy");
        let varposition = <number>TestInitializer.getValue("postSlidesCopy", "position");
        let varsource = <string>TestInitializer.getValue("postSlidesCopy", "source");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesCopy", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesCopy", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesCopy", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesCopy", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesCopy", "storage");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "postSlidesCopy");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesCopy", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesCopy", field, varposition);
            });
        });
    });

    it("invalid source test", () => {
        const field = "source";
        let varname = <string>TestInitializer.getValue("postSlidesCopy", "name");
        let varslideToCopy = <number>TestInitializer.getValue("postSlidesCopy", "slideToCopy");
        let varposition = <number>TestInitializer.getValue("postSlidesCopy", "position");
        let varsource = <string>TestInitializer.getValue("postSlidesCopy", "source");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesCopy", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesCopy", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesCopy", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesCopy", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesCopy", "storage");
        varsource = <string>TestInitializer.invalidizeValue(varsource, field, "string", "postSlidesCopy");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesCopy", field, varsource).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesCopy", field, varsource);
            });
        });
    });

    it("invalid sourcePassword test", () => {
        const field = "sourcePassword";
        let varname = <string>TestInitializer.getValue("postSlidesCopy", "name");
        let varslideToCopy = <number>TestInitializer.getValue("postSlidesCopy", "slideToCopy");
        let varposition = <number>TestInitializer.getValue("postSlidesCopy", "position");
        let varsource = <string>TestInitializer.getValue("postSlidesCopy", "source");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesCopy", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesCopy", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesCopy", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesCopy", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesCopy", "storage");
        varsourcePassword = <string>TestInitializer.invalidizeValue(varsourcePassword, field, "string", "postSlidesCopy");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesCopy", field, varsourcePassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesCopy", field, varsourcePassword);
            });
        });
    });

    it("invalid sourceStorage test", () => {
        const field = "sourceStorage";
        let varname = <string>TestInitializer.getValue("postSlidesCopy", "name");
        let varslideToCopy = <number>TestInitializer.getValue("postSlidesCopy", "slideToCopy");
        let varposition = <number>TestInitializer.getValue("postSlidesCopy", "position");
        let varsource = <string>TestInitializer.getValue("postSlidesCopy", "source");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesCopy", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesCopy", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesCopy", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesCopy", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesCopy", "storage");
        varsourceStorage = <string>TestInitializer.invalidizeValue(varsourceStorage, field, "string", "postSlidesCopy");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesCopy", field, varsourceStorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesCopy", field, varsourceStorage);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlidesCopy", "name");
        let varslideToCopy = <number>TestInitializer.getValue("postSlidesCopy", "slideToCopy");
        let varposition = <number>TestInitializer.getValue("postSlidesCopy", "position");
        let varsource = <string>TestInitializer.getValue("postSlidesCopy", "source");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesCopy", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesCopy", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesCopy", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesCopy", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesCopy", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesCopy");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesCopy", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesCopy", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlidesCopy", "name");
        let varslideToCopy = <number>TestInitializer.getValue("postSlidesCopy", "slideToCopy");
        let varposition = <number>TestInitializer.getValue("postSlidesCopy", "position");
        let varsource = <string>TestInitializer.getValue("postSlidesCopy", "source");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesCopy", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesCopy", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesCopy", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesCopy", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesCopy", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlidesCopy");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesCopy", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesCopy", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlidesCopy", "name");
        let varslideToCopy = <number>TestInitializer.getValue("postSlidesCopy", "slideToCopy");
        let varposition = <number>TestInitializer.getValue("postSlidesCopy", "position");
        let varsource = <string>TestInitializer.getValue("postSlidesCopy", "source");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesCopy", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesCopy", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesCopy", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesCopy", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesCopy", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlidesCopy");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesCopy", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesCopy", field, varstorage);
            });
        });
    });
});

describe("Tests for createPresentation", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlidesDocument", "name");
            let vardata = <Buffer>TestInitializer.getStreamValue("postSlidesDocument", "data");
            let varinputPassword = <string>TestInitializer.getValue("postSlidesDocument", "inputPassword");
            let varpassword = <string>TestInitializer.getValue("postSlidesDocument", "password");
            let varfolder = <string>TestInitializer.getValue("postSlidesDocument", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlidesDocument", "storage");
            return TestInitializer.initialize("postSlidesDocument", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createPresentation(varname, vardata, varinputPassword, varpassword, varfolder, varstorage), false, "postSlidesDocument");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlidesDocument", "name");
        let vardata = <Buffer>TestInitializer.getStreamValue("postSlidesDocument", "data");
        let varinputPassword = <string>TestInitializer.getValue("postSlidesDocument", "inputPassword");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocument", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocument", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocument", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlidesDocument");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocument", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentation(varname, vardata, varinputPassword, varpassword, varfolder, varstorage), "postSlidesDocument", field, varname);
            });
        });
    });

    it("invalid data test", () => {
        const field = "data";
        let varname = <string>TestInitializer.getValue("postSlidesDocument", "name");
        let vardata = <Buffer>TestInitializer.getStreamValue("postSlidesDocument", "data");
        let varinputPassword = <string>TestInitializer.getValue("postSlidesDocument", "inputPassword");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocument", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocument", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocument", "storage");
        vardata = <Buffer>TestInitializer.invalidizeValue(vardata, field, "Buffer", "postSlidesDocument");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocument", field, vardata).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentation(varname, vardata, varinputPassword, varpassword, varfolder, varstorage), "postSlidesDocument", field, vardata);
            });
        });
    });

    it("invalid inputPassword test", () => {
        const field = "inputPassword";
        let varname = <string>TestInitializer.getValue("postSlidesDocument", "name");
        let vardata = <Buffer>TestInitializer.getStreamValue("postSlidesDocument", "data");
        let varinputPassword = <string>TestInitializer.getValue("postSlidesDocument", "inputPassword");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocument", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocument", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocument", "storage");
        varinputPassword = <string>TestInitializer.invalidizeValue(varinputPassword, field, "string", "postSlidesDocument");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocument", field, varinputPassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentation(varname, vardata, varinputPassword, varpassword, varfolder, varstorage), "postSlidesDocument", field, varinputPassword);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlidesDocument", "name");
        let vardata = <Buffer>TestInitializer.getStreamValue("postSlidesDocument", "data");
        let varinputPassword = <string>TestInitializer.getValue("postSlidesDocument", "inputPassword");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocument", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocument", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocument", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesDocument");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocument", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentation(varname, vardata, varinputPassword, varpassword, varfolder, varstorage), "postSlidesDocument", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlidesDocument", "name");
        let vardata = <Buffer>TestInitializer.getStreamValue("postSlidesDocument", "data");
        let varinputPassword = <string>TestInitializer.getValue("postSlidesDocument", "inputPassword");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocument", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocument", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocument", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlidesDocument");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocument", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentation(varname, vardata, varinputPassword, varpassword, varfolder, varstorage), "postSlidesDocument", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlidesDocument", "name");
        let vardata = <Buffer>TestInitializer.getStreamValue("postSlidesDocument", "data");
        let varinputPassword = <string>TestInitializer.getValue("postSlidesDocument", "inputPassword");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocument", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocument", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocument", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlidesDocument");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocument", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentation(varname, vardata, varinputPassword, varpassword, varfolder, varstorage), "postSlidesDocument", field, varstorage);
            });
        });
    });
});

describe("Tests for importFromHtml", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "name");
            let varhtml = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "html");
            let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "password");
            let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "storage");
            return TestInitializer.initialize("postSlidesDocumentFromHtml", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().importFromHtml(varname, varhtml, varpassword, varfolder, varstorage), false, "postSlidesDocumentFromHtml");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "name");
        let varhtml = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "html");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlidesDocumentFromHtml");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromHtml", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromHtml(varname, varhtml, varpassword, varfolder, varstorage), "postSlidesDocumentFromHtml", field, varname);
            });
        });
    });

    it("invalid html test", () => {
        const field = "html";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "name");
        let varhtml = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "html");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "storage");
        varhtml = <string>TestInitializer.invalidizeValue(varhtml, field, "string", "postSlidesDocumentFromHtml");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromHtml", field, varhtml).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromHtml(varname, varhtml, varpassword, varfolder, varstorage), "postSlidesDocumentFromHtml", field, varhtml);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "name");
        let varhtml = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "html");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesDocumentFromHtml");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromHtml", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromHtml(varname, varhtml, varpassword, varfolder, varstorage), "postSlidesDocumentFromHtml", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "name");
        let varhtml = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "html");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlidesDocumentFromHtml");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromHtml", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromHtml(varname, varhtml, varpassword, varfolder, varstorage), "postSlidesDocumentFromHtml", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "name");
        let varhtml = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "html");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromHtml", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlidesDocumentFromHtml");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromHtml", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromHtml(varname, varhtml, varpassword, varfolder, varstorage), "postSlidesDocumentFromHtml", field, varstorage);
            });
        });
    });
});

describe("Tests for importFromPdf", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "name");
            let varpdf = <Buffer>TestInitializer.getStreamValue("postSlidesDocumentFromPdf", "pdf");
            let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "password");
            let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "storage");
            return TestInitializer.initialize("postSlidesDocumentFromPdf", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().importFromPdf(varname, varpdf, varpassword, varfolder, varstorage), false, "postSlidesDocumentFromPdf");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "name");
        let varpdf = <Buffer>TestInitializer.getStreamValue("postSlidesDocumentFromPdf", "pdf");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlidesDocumentFromPdf");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromPdf", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromPdf(varname, varpdf, varpassword, varfolder, varstorage), "postSlidesDocumentFromPdf", field, varname);
            });
        });
    });

    it("invalid pdf test", () => {
        const field = "pdf";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "name");
        let varpdf = <Buffer>TestInitializer.getStreamValue("postSlidesDocumentFromPdf", "pdf");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "storage");
        varpdf = <Buffer>TestInitializer.invalidizeValue(varpdf, field, "Buffer", "postSlidesDocumentFromPdf");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromPdf", field, varpdf).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromPdf(varname, varpdf, varpassword, varfolder, varstorage), "postSlidesDocumentFromPdf", field, varpdf);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "name");
        let varpdf = <Buffer>TestInitializer.getStreamValue("postSlidesDocumentFromPdf", "pdf");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesDocumentFromPdf");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromPdf", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromPdf(varname, varpdf, varpassword, varfolder, varstorage), "postSlidesDocumentFromPdf", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "name");
        let varpdf = <Buffer>TestInitializer.getStreamValue("postSlidesDocumentFromPdf", "pdf");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlidesDocumentFromPdf");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromPdf", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromPdf(varname, varpdf, varpassword, varfolder, varstorage), "postSlidesDocumentFromPdf", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "name");
        let varpdf = <Buffer>TestInitializer.getStreamValue("postSlidesDocumentFromPdf", "pdf");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromPdf", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlidesDocumentFromPdf");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromPdf", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromPdf(varname, varpdf, varpassword, varfolder, varstorage), "postSlidesDocumentFromPdf", field, varstorage);
            });
        });
    });
});

describe("Tests for createPresentationFromSource", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "name");
            let varsourcePath = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePath");
            let varsourcePassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePassword");
            let varsourceStorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourceStorage");
            let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "password");
            let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "storage");
            return TestInitializer.initialize("postSlidesDocumentFromSource", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), false, "postSlidesDocumentFromSource");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "name");
        let varsourcePath = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePath");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlidesDocumentFromSource");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromSource", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesDocumentFromSource", field, varname);
            });
        });
    });

    it("invalid sourcePath test", () => {
        const field = "sourcePath";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "name");
        let varsourcePath = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePath");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "storage");
        varsourcePath = <string>TestInitializer.invalidizeValue(varsourcePath, field, "string", "postSlidesDocumentFromSource");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromSource", field, varsourcePath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesDocumentFromSource", field, varsourcePath);
            });
        });
    });

    it("invalid sourcePassword test", () => {
        const field = "sourcePassword";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "name");
        let varsourcePath = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePath");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "storage");
        varsourcePassword = <string>TestInitializer.invalidizeValue(varsourcePassword, field, "string", "postSlidesDocumentFromSource");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromSource", field, varsourcePassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesDocumentFromSource", field, varsourcePassword);
            });
        });
    });

    it("invalid sourceStorage test", () => {
        const field = "sourceStorage";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "name");
        let varsourcePath = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePath");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "storage");
        varsourceStorage = <string>TestInitializer.invalidizeValue(varsourceStorage, field, "string", "postSlidesDocumentFromSource");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromSource", field, varsourceStorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesDocumentFromSource", field, varsourceStorage);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "name");
        let varsourcePath = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePath");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesDocumentFromSource");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromSource", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesDocumentFromSource", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "name");
        let varsourcePath = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePath");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlidesDocumentFromSource");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromSource", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesDocumentFromSource", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "name");
        let varsourcePath = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePath");
        let varsourcePassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourcePassword");
        let varsourceStorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "sourceStorage");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromSource", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlidesDocumentFromSource");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromSource", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "postSlidesDocumentFromSource", field, varstorage);
            });
        });
    });
});

describe("Tests for createPresentationFromTemplate", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "name");
            let vartemplatePath = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePath");
            let vardata = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "data");
            let vartemplatePassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePassword");
            let vartemplateStorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templateStorage");
            let varisImageDataEmbedded = <boolean>TestInitializer.getValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
            let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "password");
            let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "storage");
            return TestInitializer.initialize("postSlidesDocumentFromTemplate", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), false, "postSlidesDocumentFromTemplate");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "name");
        let vartemplatePath = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePath");
        let vardata = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "data");
        let vartemplatePassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePassword");
        let vartemplateStorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templateStorage");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlidesDocumentFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromTemplate", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "postSlidesDocumentFromTemplate", field, varname);
            });
        });
    });

    it("invalid templatePath test", () => {
        const field = "templatePath";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "name");
        let vartemplatePath = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePath");
        let vardata = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "data");
        let vartemplatePassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePassword");
        let vartemplateStorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templateStorage");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "storage");
        vartemplatePath = <string>TestInitializer.invalidizeValue(vartemplatePath, field, "string", "postSlidesDocumentFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromTemplate", field, vartemplatePath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "postSlidesDocumentFromTemplate", field, vartemplatePath);
            });
        });
    });

    it("invalid data test", () => {
        const field = "data";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "name");
        let vartemplatePath = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePath");
        let vardata = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "data");
        let vartemplatePassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePassword");
        let vartemplateStorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templateStorage");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "storage");
        vardata = <string>TestInitializer.invalidizeValue(vardata, field, "string", "postSlidesDocumentFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromTemplate", field, vardata).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "postSlidesDocumentFromTemplate", field, vardata);
            });
        });
    });

    it("invalid templatePassword test", () => {
        const field = "templatePassword";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "name");
        let vartemplatePath = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePath");
        let vardata = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "data");
        let vartemplatePassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePassword");
        let vartemplateStorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templateStorage");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "storage");
        vartemplatePassword = <string>TestInitializer.invalidizeValue(vartemplatePassword, field, "string", "postSlidesDocumentFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromTemplate", field, vartemplatePassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "postSlidesDocumentFromTemplate", field, vartemplatePassword);
            });
        });
    });

    it("invalid templateStorage test", () => {
        const field = "templateStorage";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "name");
        let vartemplatePath = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePath");
        let vardata = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "data");
        let vartemplatePassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePassword");
        let vartemplateStorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templateStorage");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "storage");
        vartemplateStorage = <string>TestInitializer.invalidizeValue(vartemplateStorage, field, "string", "postSlidesDocumentFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromTemplate", field, vartemplateStorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "postSlidesDocumentFromTemplate", field, vartemplateStorage);
            });
        });
    });

    it("invalid isImageDataEmbedded test", () => {
        const field = "isImageDataEmbedded";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "name");
        let vartemplatePath = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePath");
        let vardata = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "data");
        let vartemplatePassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePassword");
        let vartemplateStorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templateStorage");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "storage");
        varisImageDataEmbedded = <boolean>TestInitializer.invalidizeValue(varisImageDataEmbedded, field, "boolean", "postSlidesDocumentFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromTemplate", field, varisImageDataEmbedded).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "postSlidesDocumentFromTemplate", field, varisImageDataEmbedded);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "name");
        let vartemplatePath = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePath");
        let vardata = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "data");
        let vartemplatePassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePassword");
        let vartemplateStorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templateStorage");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesDocumentFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromTemplate", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "postSlidesDocumentFromTemplate", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "name");
        let vartemplatePath = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePath");
        let vardata = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "data");
        let vartemplatePassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePassword");
        let vartemplateStorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templateStorage");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlidesDocumentFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromTemplate", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "postSlidesDocumentFromTemplate", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "name");
        let vartemplatePath = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePath");
        let vardata = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "data");
        let vartemplatePassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templatePassword");
        let vartemplateStorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "templateStorage");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        let varpassword = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesDocumentFromTemplate", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlidesDocumentFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesDocumentFromTemplate", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "postSlidesDocumentFromTemplate", field, varstorage);
            });
        });
    });
});

describe("Tests for mergeOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("postSlidesMerge", "files");
            let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("postSlidesMerge", "request");
            let varpassword = <string>TestInitializer.getValue("postSlidesMerge", "password");
            return TestInitializer.initialize("postSlidesMerge", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().mergeOnline(varfiles, varrequest, varpassword), true, "postSlidesMerge");
            });
        });
    });

    it("invalid files test", () => {
        const field = "files";
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("postSlidesMerge", "files");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("postSlidesMerge", "request");
        let varpassword = <string>TestInitializer.getValue("postSlidesMerge", "password");
        varfiles = <Array<Buffer>>TestInitializer.invalidizeValue(varfiles, field, "Array&lt;Buffer&gt;", "postSlidesMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesMerge", field, varfiles).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().mergeOnline(varfiles, varrequest, varpassword), "postSlidesMerge", field, varfiles);
            });
        });
    });

    it("invalid request test", () => {
        const field = "request";
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("postSlidesMerge", "files");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("postSlidesMerge", "request");
        let varpassword = <string>TestInitializer.getValue("postSlidesMerge", "password");
        varrequest = <model.OrderedMergeRequest>TestInitializer.invalidizeValue(varrequest, field, "OrderedMergeRequest", "postSlidesMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesMerge", field, varrequest).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().mergeOnline(varfiles, varrequest, varpassword), "postSlidesMerge", field, varrequest);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("postSlidesMerge", "files");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("postSlidesMerge", "request");
        let varpassword = <string>TestInitializer.getValue("postSlidesMerge", "password");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesMerge", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().mergeOnline(varfiles, varrequest, varpassword), "postSlidesMerge", field, varpassword);
            });
        });
    });
});

describe("Tests for pipeline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpipeline = <model.Pipeline>TestInitializer.getValue("postSlidesPipeline", "pipeline");
            let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("postSlidesPipeline", "files");
            return TestInitializer.initialize("postSlidesPipeline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().pipeline(varpipeline, varfiles), true, "postSlidesPipeline");
            });
        });
    });

    it("invalid pipeline test", () => {
        const field = "pipeline";
        let varpipeline = <model.Pipeline>TestInitializer.getValue("postSlidesPipeline", "pipeline");
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("postSlidesPipeline", "files");
        varpipeline = <model.Pipeline>TestInitializer.invalidizeValue(varpipeline, field, "Pipeline", "postSlidesPipeline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesPipeline", field, varpipeline).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().pipeline(varpipeline, varfiles), "postSlidesPipeline", field, varpipeline);
            });
        });
    });

    it("invalid files test", () => {
        const field = "files";
        let varpipeline = <model.Pipeline>TestInitializer.getValue("postSlidesPipeline", "pipeline");
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("postSlidesPipeline", "files");
        varfiles = <Array<Buffer>>TestInitializer.invalidizeValue(varfiles, field, "Array&lt;Buffer&gt;", "postSlidesPipeline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesPipeline", field, varfiles).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().pipeline(varpipeline, varfiles), "postSlidesPipeline", field, varfiles);
            });
        });
    });
});

describe("Tests for replacePresentationText", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "name");
            let varoldValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "oldValue");
            let varnewValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "newValue");
            let varignoreCase = <boolean>TestInitializer.getValue("postSlidesPresentationReplaceText", "ignoreCase");
            let varpassword = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "password");
            let varfolder = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "storage");
            return TestInitializer.initialize("postSlidesPresentationReplaceText", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), false, "postSlidesPresentationReplaceText");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "name");
        let varoldValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlidesPresentationReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlidesPresentationReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesPresentationReplaceText", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "postSlidesPresentationReplaceText", field, varname);
            });
        });
    });

    it("invalid oldValue test", () => {
        const field = "oldValue";
        let varname = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "name");
        let varoldValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlidesPresentationReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "storage");
        varoldValue = <string>TestInitializer.invalidizeValue(varoldValue, field, "string", "postSlidesPresentationReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesPresentationReplaceText", field, varoldValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "postSlidesPresentationReplaceText", field, varoldValue);
            });
        });
    });

    it("invalid newValue test", () => {
        const field = "newValue";
        let varname = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "name");
        let varoldValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlidesPresentationReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "storage");
        varnewValue = <string>TestInitializer.invalidizeValue(varnewValue, field, "string", "postSlidesPresentationReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesPresentationReplaceText", field, varnewValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "postSlidesPresentationReplaceText", field, varnewValue);
            });
        });
    });

    it("invalid ignoreCase test", () => {
        const field = "ignoreCase";
        let varname = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "name");
        let varoldValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlidesPresentationReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "storage");
        varignoreCase = <boolean>TestInitializer.invalidizeValue(varignoreCase, field, "boolean", "postSlidesPresentationReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesPresentationReplaceText", field, varignoreCase).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "postSlidesPresentationReplaceText", field, varignoreCase);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "name");
        let varoldValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlidesPresentationReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesPresentationReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesPresentationReplaceText", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "postSlidesPresentationReplaceText", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "name");
        let varoldValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlidesPresentationReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlidesPresentationReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesPresentationReplaceText", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "postSlidesPresentationReplaceText", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "name");
        let varoldValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlidesPresentationReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesPresentationReplaceText", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlidesPresentationReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesPresentationReplaceText", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "postSlidesPresentationReplaceText", field, varstorage);
            });
        });
    });
});

describe("Tests for moveSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlidesReorder", "name");
            let varslideIndex = <number>TestInitializer.getValue("postSlidesReorder", "slideIndex");
            let varnewPosition = <number>TestInitializer.getValue("postSlidesReorder", "newPosition");
            let varpassword = <string>TestInitializer.getValue("postSlidesReorder", "password");
            let varfolder = <string>TestInitializer.getValue("postSlidesReorder", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlidesReorder", "storage");
            return TestInitializer.initialize("postSlidesReorder", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().moveSlide(varname, varslideIndex, varnewPosition, varpassword, varfolder, varstorage), false, "postSlidesReorder");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlidesReorder", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlidesReorder", "slideIndex");
        let varnewPosition = <number>TestInitializer.getValue("postSlidesReorder", "newPosition");
        let varpassword = <string>TestInitializer.getValue("postSlidesReorder", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesReorder", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesReorder", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlidesReorder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesReorder", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSlide(varname, varslideIndex, varnewPosition, varpassword, varfolder, varstorage), "postSlidesReorder", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postSlidesReorder", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlidesReorder", "slideIndex");
        let varnewPosition = <number>TestInitializer.getValue("postSlidesReorder", "newPosition");
        let varpassword = <string>TestInitializer.getValue("postSlidesReorder", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesReorder", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesReorder", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postSlidesReorder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesReorder", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSlide(varname, varslideIndex, varnewPosition, varpassword, varfolder, varstorage), "postSlidesReorder", field, varslideIndex);
            });
        });
    });

    it("invalid newPosition test", () => {
        const field = "newPosition";
        let varname = <string>TestInitializer.getValue("postSlidesReorder", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlidesReorder", "slideIndex");
        let varnewPosition = <number>TestInitializer.getValue("postSlidesReorder", "newPosition");
        let varpassword = <string>TestInitializer.getValue("postSlidesReorder", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesReorder", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesReorder", "storage");
        varnewPosition = <number>TestInitializer.invalidizeValue(varnewPosition, field, "number", "postSlidesReorder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesReorder", field, varnewPosition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSlide(varname, varslideIndex, varnewPosition, varpassword, varfolder, varstorage), "postSlidesReorder", field, varnewPosition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlidesReorder", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlidesReorder", "slideIndex");
        let varnewPosition = <number>TestInitializer.getValue("postSlidesReorder", "newPosition");
        let varpassword = <string>TestInitializer.getValue("postSlidesReorder", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesReorder", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesReorder", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesReorder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesReorder", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSlide(varname, varslideIndex, varnewPosition, varpassword, varfolder, varstorage), "postSlidesReorder", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlidesReorder", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlidesReorder", "slideIndex");
        let varnewPosition = <number>TestInitializer.getValue("postSlidesReorder", "newPosition");
        let varpassword = <string>TestInitializer.getValue("postSlidesReorder", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesReorder", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesReorder", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlidesReorder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesReorder", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSlide(varname, varslideIndex, varnewPosition, varpassword, varfolder, varstorage), "postSlidesReorder", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlidesReorder", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlidesReorder", "slideIndex");
        let varnewPosition = <number>TestInitializer.getValue("postSlidesReorder", "newPosition");
        let varpassword = <string>TestInitializer.getValue("postSlidesReorder", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesReorder", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesReorder", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlidesReorder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesReorder", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSlide(varname, varslideIndex, varnewPosition, varpassword, varfolder, varstorage), "postSlidesReorder", field, varstorage);
            });
        });
    });
});

describe("Tests for reorderSlides", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlidesReorderMany", "name");
            let varoldPositions = <Array<number>>TestInitializer.getValue("postSlidesReorderMany", "oldPositions");
            let varnewPositions = <Array<number>>TestInitializer.getValue("postSlidesReorderMany", "newPositions");
            let varpassword = <string>TestInitializer.getValue("postSlidesReorderMany", "password");
            let varfolder = <string>TestInitializer.getValue("postSlidesReorderMany", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlidesReorderMany", "storage");
            return TestInitializer.initialize("postSlidesReorderMany", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().reorderSlides(varname, varoldPositions, varnewPositions, varpassword, varfolder, varstorage), false, "postSlidesReorderMany");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlidesReorderMany", "name");
        let varoldPositions = <Array<number>>TestInitializer.getValue("postSlidesReorderMany", "oldPositions");
        let varnewPositions = <Array<number>>TestInitializer.getValue("postSlidesReorderMany", "newPositions");
        let varpassword = <string>TestInitializer.getValue("postSlidesReorderMany", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesReorderMany", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesReorderMany", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlidesReorderMany");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesReorderMany", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().reorderSlides(varname, varoldPositions, varnewPositions, varpassword, varfolder, varstorage), "postSlidesReorderMany", field, varname);
            });
        });
    });

    it("invalid oldPositions test", () => {
        const field = "oldPositions";
        let varname = <string>TestInitializer.getValue("postSlidesReorderMany", "name");
        let varoldPositions = <Array<number>>TestInitializer.getValue("postSlidesReorderMany", "oldPositions");
        let varnewPositions = <Array<number>>TestInitializer.getValue("postSlidesReorderMany", "newPositions");
        let varpassword = <string>TestInitializer.getValue("postSlidesReorderMany", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesReorderMany", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesReorderMany", "storage");
        varoldPositions = <Array<number>>TestInitializer.invalidizeValue(varoldPositions, field, "Array&lt;number&gt;", "postSlidesReorderMany");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesReorderMany", field, varoldPositions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().reorderSlides(varname, varoldPositions, varnewPositions, varpassword, varfolder, varstorage), "postSlidesReorderMany", field, varoldPositions);
            });
        });
    });

    it("invalid newPositions test", () => {
        const field = "newPositions";
        let varname = <string>TestInitializer.getValue("postSlidesReorderMany", "name");
        let varoldPositions = <Array<number>>TestInitializer.getValue("postSlidesReorderMany", "oldPositions");
        let varnewPositions = <Array<number>>TestInitializer.getValue("postSlidesReorderMany", "newPositions");
        let varpassword = <string>TestInitializer.getValue("postSlidesReorderMany", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesReorderMany", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesReorderMany", "storage");
        varnewPositions = <Array<number>>TestInitializer.invalidizeValue(varnewPositions, field, "Array&lt;number&gt;", "postSlidesReorderMany");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesReorderMany", field, varnewPositions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().reorderSlides(varname, varoldPositions, varnewPositions, varpassword, varfolder, varstorage), "postSlidesReorderMany", field, varnewPositions);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlidesReorderMany", "name");
        let varoldPositions = <Array<number>>TestInitializer.getValue("postSlidesReorderMany", "oldPositions");
        let varnewPositions = <Array<number>>TestInitializer.getValue("postSlidesReorderMany", "newPositions");
        let varpassword = <string>TestInitializer.getValue("postSlidesReorderMany", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesReorderMany", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesReorderMany", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesReorderMany");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesReorderMany", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().reorderSlides(varname, varoldPositions, varnewPositions, varpassword, varfolder, varstorage), "postSlidesReorderMany", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlidesReorderMany", "name");
        let varoldPositions = <Array<number>>TestInitializer.getValue("postSlidesReorderMany", "oldPositions");
        let varnewPositions = <Array<number>>TestInitializer.getValue("postSlidesReorderMany", "newPositions");
        let varpassword = <string>TestInitializer.getValue("postSlidesReorderMany", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesReorderMany", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesReorderMany", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlidesReorderMany");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesReorderMany", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().reorderSlides(varname, varoldPositions, varnewPositions, varpassword, varfolder, varstorage), "postSlidesReorderMany", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlidesReorderMany", "name");
        let varoldPositions = <Array<number>>TestInitializer.getValue("postSlidesReorderMany", "oldPositions");
        let varnewPositions = <Array<number>>TestInitializer.getValue("postSlidesReorderMany", "newPositions");
        let varpassword = <string>TestInitializer.getValue("postSlidesReorderMany", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesReorderMany", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesReorderMany", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlidesReorderMany");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesReorderMany", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().reorderSlides(varname, varoldPositions, varnewPositions, varpassword, varfolder, varstorage), "postSlidesReorderMany", field, varstorage);
            });
        });
    });
});

describe("Tests for downloadPresentation", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlidesSaveAs", "name");
            let varformat = <string>TestInitializer.getValue("postSlidesSaveAs", "format");
            let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSaveAs", "options");
            let varpassword = <string>TestInitializer.getValue("postSlidesSaveAs", "password");
            let varfolder = <string>TestInitializer.getValue("postSlidesSaveAs", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlidesSaveAs", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("postSlidesSaveAs", "fontsFolder");
            return TestInitializer.initialize("postSlidesSaveAs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), true, "postSlidesSaveAs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlidesSaveAs", "name");
        let varformat = <string>TestInitializer.getValue("postSlidesSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSaveAs", "options");
        let varpassword = <string>TestInitializer.getValue("postSlidesSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSaveAs", "fontsFolder");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlidesSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSaveAs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSaveAs", field, varname);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("postSlidesSaveAs", "name");
        let varformat = <string>TestInitializer.getValue("postSlidesSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSaveAs", "options");
        let varpassword = <string>TestInitializer.getValue("postSlidesSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSaveAs", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "postSlidesSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSaveAs", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSaveAs", field, varformat);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("postSlidesSaveAs", "name");
        let varformat = <string>TestInitializer.getValue("postSlidesSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSaveAs", "options");
        let varpassword = <string>TestInitializer.getValue("postSlidesSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSaveAs", "fontsFolder");
        varoptions = <model.ExportOptions>TestInitializer.invalidizeValue(varoptions, field, "ExportOptions", "postSlidesSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSaveAs", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSaveAs", field, varoptions);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlidesSaveAs", "name");
        let varformat = <string>TestInitializer.getValue("postSlidesSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSaveAs", "options");
        let varpassword = <string>TestInitializer.getValue("postSlidesSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSaveAs", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSaveAs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSaveAs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlidesSaveAs", "name");
        let varformat = <string>TestInitializer.getValue("postSlidesSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSaveAs", "options");
        let varpassword = <string>TestInitializer.getValue("postSlidesSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSaveAs", "fontsFolder");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlidesSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSaveAs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSaveAs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlidesSaveAs", "name");
        let varformat = <string>TestInitializer.getValue("postSlidesSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSaveAs", "options");
        let varpassword = <string>TestInitializer.getValue("postSlidesSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSaveAs", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlidesSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSaveAs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSaveAs", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("postSlidesSaveAs", "name");
        let varformat = <string>TestInitializer.getValue("postSlidesSaveAs", "format");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSaveAs", "options");
        let varpassword = <string>TestInitializer.getValue("postSlidesSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSaveAs", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "postSlidesSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSaveAs", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSaveAs", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for setDocumentProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "name");
            let varproperties = <model.DocumentProperties>TestInitializer.getValue("postSlidesSetDocumentProperties", "properties");
            let varpassword = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "password");
            let varfolder = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "storage");
            return TestInitializer.initialize("postSlidesSetDocumentProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setDocumentProperties(varname, varproperties, varpassword, varfolder, varstorage), false, "postSlidesSetDocumentProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "name");
        let varproperties = <model.DocumentProperties>TestInitializer.getValue("postSlidesSetDocumentProperties", "properties");
        let varpassword = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlidesSetDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSetDocumentProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperties(varname, varproperties, varpassword, varfolder, varstorage), "postSlidesSetDocumentProperties", field, varname);
            });
        });
    });

    it("invalid properties test", () => {
        const field = "properties";
        let varname = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "name");
        let varproperties = <model.DocumentProperties>TestInitializer.getValue("postSlidesSetDocumentProperties", "properties");
        let varpassword = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "storage");
        varproperties = <model.DocumentProperties>TestInitializer.invalidizeValue(varproperties, field, "DocumentProperties", "postSlidesSetDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSetDocumentProperties", field, varproperties).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperties(varname, varproperties, varpassword, varfolder, varstorage), "postSlidesSetDocumentProperties", field, varproperties);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "name");
        let varproperties = <model.DocumentProperties>TestInitializer.getValue("postSlidesSetDocumentProperties", "properties");
        let varpassword = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesSetDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSetDocumentProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperties(varname, varproperties, varpassword, varfolder, varstorage), "postSlidesSetDocumentProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "name");
        let varproperties = <model.DocumentProperties>TestInitializer.getValue("postSlidesSetDocumentProperties", "properties");
        let varpassword = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlidesSetDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSetDocumentProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperties(varname, varproperties, varpassword, varfolder, varstorage), "postSlidesSetDocumentProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "name");
        let varproperties = <model.DocumentProperties>TestInitializer.getValue("postSlidesSetDocumentProperties", "properties");
        let varpassword = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSetDocumentProperties", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlidesSetDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSetDocumentProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperties(varname, varproperties, varpassword, varfolder, varstorage), "postSlidesSetDocumentProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for replaceSlideText", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "name");
            let varslideIndex = <number>TestInitializer.getValue("postSlidesSlideReplaceText", "slideIndex");
            let varoldValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "oldValue");
            let varnewValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "newValue");
            let varignoreCase = <boolean>TestInitializer.getValue("postSlidesSlideReplaceText", "ignoreCase");
            let varpassword = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "password");
            let varfolder = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "storage");
            return TestInitializer.initialize("postSlidesSlideReplaceText", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), false, "postSlidesSlideReplaceText");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlidesSlideReplaceText", "slideIndex");
        let varoldValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlidesSlideReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlidesSlideReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSlideReplaceText", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "postSlidesSlideReplaceText", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlidesSlideReplaceText", "slideIndex");
        let varoldValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlidesSlideReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postSlidesSlideReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSlideReplaceText", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "postSlidesSlideReplaceText", field, varslideIndex);
            });
        });
    });

    it("invalid oldValue test", () => {
        const field = "oldValue";
        let varname = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlidesSlideReplaceText", "slideIndex");
        let varoldValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlidesSlideReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "storage");
        varoldValue = <string>TestInitializer.invalidizeValue(varoldValue, field, "string", "postSlidesSlideReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSlideReplaceText", field, varoldValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "postSlidesSlideReplaceText", field, varoldValue);
            });
        });
    });

    it("invalid newValue test", () => {
        const field = "newValue";
        let varname = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlidesSlideReplaceText", "slideIndex");
        let varoldValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlidesSlideReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "storage");
        varnewValue = <string>TestInitializer.invalidizeValue(varnewValue, field, "string", "postSlidesSlideReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSlideReplaceText", field, varnewValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "postSlidesSlideReplaceText", field, varnewValue);
            });
        });
    });

    it("invalid ignoreCase test", () => {
        const field = "ignoreCase";
        let varname = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlidesSlideReplaceText", "slideIndex");
        let varoldValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlidesSlideReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "storage");
        varignoreCase = <boolean>TestInitializer.invalidizeValue(varignoreCase, field, "boolean", "postSlidesSlideReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSlideReplaceText", field, varignoreCase).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "postSlidesSlideReplaceText", field, varignoreCase);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlidesSlideReplaceText", "slideIndex");
        let varoldValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlidesSlideReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesSlideReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSlideReplaceText", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "postSlidesSlideReplaceText", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlidesSlideReplaceText", "slideIndex");
        let varoldValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlidesSlideReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlidesSlideReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSlideReplaceText", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "postSlidesSlideReplaceText", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSlidesSlideReplaceText", "slideIndex");
        let varoldValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "oldValue");
        let varnewValue = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "newValue");
        let varignoreCase = <boolean>TestInitializer.getValue("postSlidesSlideReplaceText", "ignoreCase");
        let varpassword = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSlideReplaceText", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlidesSlideReplaceText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSlideReplaceText", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "postSlidesSlideReplaceText", field, varstorage);
            });
        });
    });
});

describe("Tests for split", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSlidesSplit", "name");
            let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSplit", "options");
            let varformat = <string>TestInitializer.getValue("postSlidesSplit", "format");
            let varwidth = <number>TestInitializer.getValue("postSlidesSplit", "width");
            let varheight = <number>TestInitializer.getValue("postSlidesSplit", "height");
            let varfrom = <number>TestInitializer.getValue("postSlidesSplit", "from");
            let varto = <number>TestInitializer.getValue("postSlidesSplit", "to");
            let vardestFolder = <string>TestInitializer.getValue("postSlidesSplit", "destFolder");
            let varpassword = <string>TestInitializer.getValue("postSlidesSplit", "password");
            let varfolder = <string>TestInitializer.getValue("postSlidesSplit", "folder");
            let varstorage = <string>TestInitializer.getValue("postSlidesSplit", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("postSlidesSplit", "fontsFolder");
            return TestInitializer.initialize("postSlidesSplit", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), false, "postSlidesSplit");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSlidesSplit", "name");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSplit", "options");
        let varformat = <string>TestInitializer.getValue("postSlidesSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postSlidesSplit", "width");
        let varheight = <number>TestInitializer.getValue("postSlidesSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postSlidesSplit", "from");
        let varto = <number>TestInitializer.getValue("postSlidesSplit", "to");
        let vardestFolder = <string>TestInitializer.getValue("postSlidesSplit", "destFolder");
        let varpassword = <string>TestInitializer.getValue("postSlidesSplit", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSplit", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSplit", "fontsFolder");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSlidesSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSplit", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSplit", field, varname);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("postSlidesSplit", "name");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSplit", "options");
        let varformat = <string>TestInitializer.getValue("postSlidesSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postSlidesSplit", "width");
        let varheight = <number>TestInitializer.getValue("postSlidesSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postSlidesSplit", "from");
        let varto = <number>TestInitializer.getValue("postSlidesSplit", "to");
        let vardestFolder = <string>TestInitializer.getValue("postSlidesSplit", "destFolder");
        let varpassword = <string>TestInitializer.getValue("postSlidesSplit", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSplit", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSplit", "fontsFolder");
        varoptions = <model.ExportOptions>TestInitializer.invalidizeValue(varoptions, field, "ExportOptions", "postSlidesSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSplit", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSplit", field, varoptions);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("postSlidesSplit", "name");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSplit", "options");
        let varformat = <string>TestInitializer.getValue("postSlidesSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postSlidesSplit", "width");
        let varheight = <number>TestInitializer.getValue("postSlidesSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postSlidesSplit", "from");
        let varto = <number>TestInitializer.getValue("postSlidesSplit", "to");
        let vardestFolder = <string>TestInitializer.getValue("postSlidesSplit", "destFolder");
        let varpassword = <string>TestInitializer.getValue("postSlidesSplit", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSplit", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSplit", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "postSlidesSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSplit", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSplit", field, varformat);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let varname = <string>TestInitializer.getValue("postSlidesSplit", "name");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSplit", "options");
        let varformat = <string>TestInitializer.getValue("postSlidesSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postSlidesSplit", "width");
        let varheight = <number>TestInitializer.getValue("postSlidesSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postSlidesSplit", "from");
        let varto = <number>TestInitializer.getValue("postSlidesSplit", "to");
        let vardestFolder = <string>TestInitializer.getValue("postSlidesSplit", "destFolder");
        let varpassword = <string>TestInitializer.getValue("postSlidesSplit", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSplit", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSplit", "fontsFolder");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "postSlidesSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSplit", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSplit", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let varname = <string>TestInitializer.getValue("postSlidesSplit", "name");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSplit", "options");
        let varformat = <string>TestInitializer.getValue("postSlidesSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postSlidesSplit", "width");
        let varheight = <number>TestInitializer.getValue("postSlidesSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postSlidesSplit", "from");
        let varto = <number>TestInitializer.getValue("postSlidesSplit", "to");
        let vardestFolder = <string>TestInitializer.getValue("postSlidesSplit", "destFolder");
        let varpassword = <string>TestInitializer.getValue("postSlidesSplit", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSplit", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSplit", "fontsFolder");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "postSlidesSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSplit", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSplit", field, varheight);
            });
        });
    });

    it("invalid from test", () => {
        const field = "from";
        let varname = <string>TestInitializer.getValue("postSlidesSplit", "name");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSplit", "options");
        let varformat = <string>TestInitializer.getValue("postSlidesSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postSlidesSplit", "width");
        let varheight = <number>TestInitializer.getValue("postSlidesSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postSlidesSplit", "from");
        let varto = <number>TestInitializer.getValue("postSlidesSplit", "to");
        let vardestFolder = <string>TestInitializer.getValue("postSlidesSplit", "destFolder");
        let varpassword = <string>TestInitializer.getValue("postSlidesSplit", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSplit", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSplit", "fontsFolder");
        varfrom = <number>TestInitializer.invalidizeValue(varfrom, field, "number", "postSlidesSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSplit", field, varfrom).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSplit", field, varfrom);
            });
        });
    });

    it("invalid to test", () => {
        const field = "to";
        let varname = <string>TestInitializer.getValue("postSlidesSplit", "name");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSplit", "options");
        let varformat = <string>TestInitializer.getValue("postSlidesSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postSlidesSplit", "width");
        let varheight = <number>TestInitializer.getValue("postSlidesSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postSlidesSplit", "from");
        let varto = <number>TestInitializer.getValue("postSlidesSplit", "to");
        let vardestFolder = <string>TestInitializer.getValue("postSlidesSplit", "destFolder");
        let varpassword = <string>TestInitializer.getValue("postSlidesSplit", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSplit", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSplit", "fontsFolder");
        varto = <number>TestInitializer.invalidizeValue(varto, field, "number", "postSlidesSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSplit", field, varto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSplit", field, varto);
            });
        });
    });

    it("invalid destFolder test", () => {
        const field = "destFolder";
        let varname = <string>TestInitializer.getValue("postSlidesSplit", "name");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSplit", "options");
        let varformat = <string>TestInitializer.getValue("postSlidesSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postSlidesSplit", "width");
        let varheight = <number>TestInitializer.getValue("postSlidesSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postSlidesSplit", "from");
        let varto = <number>TestInitializer.getValue("postSlidesSplit", "to");
        let vardestFolder = <string>TestInitializer.getValue("postSlidesSplit", "destFolder");
        let varpassword = <string>TestInitializer.getValue("postSlidesSplit", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSplit", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSplit", "fontsFolder");
        vardestFolder = <string>TestInitializer.invalidizeValue(vardestFolder, field, "string", "postSlidesSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSplit", field, vardestFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSplit", field, vardestFolder);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSlidesSplit", "name");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSplit", "options");
        let varformat = <string>TestInitializer.getValue("postSlidesSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postSlidesSplit", "width");
        let varheight = <number>TestInitializer.getValue("postSlidesSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postSlidesSplit", "from");
        let varto = <number>TestInitializer.getValue("postSlidesSplit", "to");
        let vardestFolder = <string>TestInitializer.getValue("postSlidesSplit", "destFolder");
        let varpassword = <string>TestInitializer.getValue("postSlidesSplit", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSplit", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSplit", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSlidesSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSplit", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSplit", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSlidesSplit", "name");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSplit", "options");
        let varformat = <string>TestInitializer.getValue("postSlidesSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postSlidesSplit", "width");
        let varheight = <number>TestInitializer.getValue("postSlidesSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postSlidesSplit", "from");
        let varto = <number>TestInitializer.getValue("postSlidesSplit", "to");
        let vardestFolder = <string>TestInitializer.getValue("postSlidesSplit", "destFolder");
        let varpassword = <string>TestInitializer.getValue("postSlidesSplit", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSplit", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSplit", "fontsFolder");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSlidesSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSplit", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSplit", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSlidesSplit", "name");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSplit", "options");
        let varformat = <string>TestInitializer.getValue("postSlidesSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postSlidesSplit", "width");
        let varheight = <number>TestInitializer.getValue("postSlidesSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postSlidesSplit", "from");
        let varto = <number>TestInitializer.getValue("postSlidesSplit", "to");
        let vardestFolder = <string>TestInitializer.getValue("postSlidesSplit", "destFolder");
        let varpassword = <string>TestInitializer.getValue("postSlidesSplit", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSplit", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSplit", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSlidesSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSplit", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSplit", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("postSlidesSplit", "name");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("postSlidesSplit", "options");
        let varformat = <string>TestInitializer.getValue("postSlidesSplit", "format");
        let varwidth = <number>TestInitializer.getValue("postSlidesSplit", "width");
        let varheight = <number>TestInitializer.getValue("postSlidesSplit", "height");
        let varfrom = <number>TestInitializer.getValue("postSlidesSplit", "from");
        let varto = <number>TestInitializer.getValue("postSlidesSplit", "to");
        let vardestFolder = <string>TestInitializer.getValue("postSlidesSplit", "destFolder");
        let varpassword = <string>TestInitializer.getValue("postSlidesSplit", "password");
        let varfolder = <string>TestInitializer.getValue("postSlidesSplit", "folder");
        let varstorage = <string>TestInitializer.getValue("postSlidesSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSlidesSplit", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "postSlidesSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSlidesSplit", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "postSlidesSplit", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for downloadSubshape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("postSubshapeSaveAs", "name");
            let varslideIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "slideIndex");
            let varpath = <string>TestInitializer.getValue("postSubshapeSaveAs", "path");
            let varshapeIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "shapeIndex");
            let varformat = <string>TestInitializer.getValue("postSubshapeSaveAs", "format");
            let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postSubshapeSaveAs", "options");
            let varscaleX = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleX");
            let varscaleY = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleY");
            let varbounds = <string>TestInitializer.getValue("postSubshapeSaveAs", "bounds");
            let varpassword = <string>TestInitializer.getValue("postSubshapeSaveAs", "password");
            let varfolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "folder");
            let varstorage = <string>TestInitializer.getValue("postSubshapeSaveAs", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "fontsFolder");
            return TestInitializer.initialize("postSubshapeSaveAs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), true, "postSubshapeSaveAs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("postSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postSubshapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "fontsFolder");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "postSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSubshapeSaveAs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postSubshapeSaveAs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("postSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postSubshapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "fontsFolder");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "postSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSubshapeSaveAs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postSubshapeSaveAs", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("postSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postSubshapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "fontsFolder");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "postSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSubshapeSaveAs", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postSubshapeSaveAs", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("postSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postSubshapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "fontsFolder");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "postSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSubshapeSaveAs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postSubshapeSaveAs", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("postSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postSubshapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "postSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSubshapeSaveAs", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postSubshapeSaveAs", field, varformat);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("postSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postSubshapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "fontsFolder");
        varoptions = <model.IShapeExportOptions>TestInitializer.invalidizeValue(varoptions, field, "IShapeExportOptions", "postSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSubshapeSaveAs", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postSubshapeSaveAs", field, varoptions);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let varname = <string>TestInitializer.getValue("postSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postSubshapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "fontsFolder");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "postSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSubshapeSaveAs", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postSubshapeSaveAs", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let varname = <string>TestInitializer.getValue("postSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postSubshapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "fontsFolder");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "postSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSubshapeSaveAs", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postSubshapeSaveAs", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let varname = <string>TestInitializer.getValue("postSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postSubshapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "fontsFolder");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "postSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSubshapeSaveAs", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postSubshapeSaveAs", field, varbounds);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("postSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postSubshapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "postSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSubshapeSaveAs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postSubshapeSaveAs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("postSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postSubshapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "fontsFolder");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "postSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSubshapeSaveAs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postSubshapeSaveAs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("postSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postSubshapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "postSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSubshapeSaveAs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postSubshapeSaveAs", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("postSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("postSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("postSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("postSubshapeSaveAs", "format");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("postSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("postSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("postSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("postSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("postSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("postSubshapeSaveAs", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "postSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("postSubshapeSaveAs", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "postSubshapeSaveAs", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for updateChartCategory", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putChartCategory", "name");
            let varslideIndex = <number>TestInitializer.getValue("putChartCategory", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("putChartCategory", "shapeIndex");
            let varcategoryIndex = <number>TestInitializer.getValue("putChartCategory", "categoryIndex");
            let varcategory = <model.ChartCategory>TestInitializer.getValue("putChartCategory", "category");
            let varpassword = <string>TestInitializer.getValue("putChartCategory", "password");
            let varfolder = <string>TestInitializer.getValue("putChartCategory", "folder");
            let varstorage = <string>TestInitializer.getValue("putChartCategory", "storage");
            return TestInitializer.initialize("putChartCategory", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), false, "putChartCategory");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartCategory", "shapeIndex");
        let varcategoryIndex = <number>TestInitializer.getValue("putChartCategory", "categoryIndex");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("putChartCategory", "category");
        let varpassword = <string>TestInitializer.getValue("putChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("putChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartCategory", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartCategory", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "putChartCategory", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartCategory", "shapeIndex");
        let varcategoryIndex = <number>TestInitializer.getValue("putChartCategory", "categoryIndex");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("putChartCategory", "category");
        let varpassword = <string>TestInitializer.getValue("putChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("putChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartCategory", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartCategory", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "putChartCategory", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("putChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartCategory", "shapeIndex");
        let varcategoryIndex = <number>TestInitializer.getValue("putChartCategory", "categoryIndex");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("putChartCategory", "category");
        let varpassword = <string>TestInitializer.getValue("putChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("putChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartCategory", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartCategory", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "putChartCategory", field, varshapeIndex);
            });
        });
    });

    it("invalid categoryIndex test", () => {
        const field = "categoryIndex";
        let varname = <string>TestInitializer.getValue("putChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartCategory", "shapeIndex");
        let varcategoryIndex = <number>TestInitializer.getValue("putChartCategory", "categoryIndex");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("putChartCategory", "category");
        let varpassword = <string>TestInitializer.getValue("putChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("putChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartCategory", "storage");
        varcategoryIndex = <number>TestInitializer.invalidizeValue(varcategoryIndex, field, "number", "putChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartCategory", field, varcategoryIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "putChartCategory", field, varcategoryIndex);
            });
        });
    });

    it("invalid category test", () => {
        const field = "category";
        let varname = <string>TestInitializer.getValue("putChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartCategory", "shapeIndex");
        let varcategoryIndex = <number>TestInitializer.getValue("putChartCategory", "categoryIndex");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("putChartCategory", "category");
        let varpassword = <string>TestInitializer.getValue("putChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("putChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartCategory", "storage");
        varcategory = <model.ChartCategory>TestInitializer.invalidizeValue(varcategory, field, "ChartCategory", "putChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartCategory", field, varcategory).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "putChartCategory", field, varcategory);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartCategory", "shapeIndex");
        let varcategoryIndex = <number>TestInitializer.getValue("putChartCategory", "categoryIndex");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("putChartCategory", "category");
        let varpassword = <string>TestInitializer.getValue("putChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("putChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartCategory", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartCategory", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "putChartCategory", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartCategory", "shapeIndex");
        let varcategoryIndex = <number>TestInitializer.getValue("putChartCategory", "categoryIndex");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("putChartCategory", "category");
        let varpassword = <string>TestInitializer.getValue("putChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("putChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartCategory", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartCategory", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "putChartCategory", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putChartCategory", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartCategory", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartCategory", "shapeIndex");
        let varcategoryIndex = <number>TestInitializer.getValue("putChartCategory", "categoryIndex");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("putChartCategory", "category");
        let varpassword = <string>TestInitializer.getValue("putChartCategory", "password");
        let varfolder = <string>TestInitializer.getValue("putChartCategory", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartCategory", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartCategory", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "putChartCategory", field, varstorage);
            });
        });
    });
});

describe("Tests for updateChartDataPoint", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putChartDataPoint", "name");
            let varslideIndex = <number>TestInitializer.getValue("putChartDataPoint", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("putChartDataPoint", "shapeIndex");
            let varseriesIndex = <number>TestInitializer.getValue("putChartDataPoint", "seriesIndex");
            let varpointIndex = <number>TestInitializer.getValue("putChartDataPoint", "pointIndex");
            let vardataPoint = <model.DataPoint>TestInitializer.getValue("putChartDataPoint", "dataPoint");
            let varpassword = <string>TestInitializer.getValue("putChartDataPoint", "password");
            let varfolder = <string>TestInitializer.getValue("putChartDataPoint", "folder");
            let varstorage = <string>TestInitializer.getValue("putChartDataPoint", "storage");
            return TestInitializer.initialize("putChartDataPoint", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), false, "putChartDataPoint");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("putChartDataPoint", "pointIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("putChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("putChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("putChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartDataPoint", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartDataPoint", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "putChartDataPoint", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("putChartDataPoint", "pointIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("putChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("putChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("putChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartDataPoint", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartDataPoint", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "putChartDataPoint", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("putChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("putChartDataPoint", "pointIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("putChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("putChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("putChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartDataPoint", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartDataPoint", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "putChartDataPoint", field, varshapeIndex);
            });
        });
    });

    it("invalid seriesIndex test", () => {
        const field = "seriesIndex";
        let varname = <string>TestInitializer.getValue("putChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("putChartDataPoint", "pointIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("putChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("putChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("putChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartDataPoint", "storage");
        varseriesIndex = <number>TestInitializer.invalidizeValue(varseriesIndex, field, "number", "putChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartDataPoint", field, varseriesIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "putChartDataPoint", field, varseriesIndex);
            });
        });
    });

    it("invalid pointIndex test", () => {
        const field = "pointIndex";
        let varname = <string>TestInitializer.getValue("putChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("putChartDataPoint", "pointIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("putChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("putChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("putChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartDataPoint", "storage");
        varpointIndex = <number>TestInitializer.invalidizeValue(varpointIndex, field, "number", "putChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartDataPoint", field, varpointIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "putChartDataPoint", field, varpointIndex);
            });
        });
    });

    it("invalid dataPoint test", () => {
        const field = "dataPoint";
        let varname = <string>TestInitializer.getValue("putChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("putChartDataPoint", "pointIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("putChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("putChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("putChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartDataPoint", "storage");
        vardataPoint = <model.DataPoint>TestInitializer.invalidizeValue(vardataPoint, field, "DataPoint", "putChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartDataPoint", field, vardataPoint).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "putChartDataPoint", field, vardataPoint);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("putChartDataPoint", "pointIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("putChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("putChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("putChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartDataPoint", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartDataPoint", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "putChartDataPoint", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("putChartDataPoint", "pointIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("putChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("putChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("putChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartDataPoint", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartDataPoint", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "putChartDataPoint", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putChartDataPoint", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartDataPoint", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartDataPoint", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartDataPoint", "seriesIndex");
        let varpointIndex = <number>TestInitializer.getValue("putChartDataPoint", "pointIndex");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("putChartDataPoint", "dataPoint");
        let varpassword = <string>TestInitializer.getValue("putChartDataPoint", "password");
        let varfolder = <string>TestInitializer.getValue("putChartDataPoint", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartDataPoint", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartDataPoint", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "putChartDataPoint", field, varstorage);
            });
        });
    });
});

describe("Tests for updateChartSeries", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putChartSeries", "name");
            let varslideIndex = <number>TestInitializer.getValue("putChartSeries", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("putChartSeries", "shapeIndex");
            let varseriesIndex = <number>TestInitializer.getValue("putChartSeries", "seriesIndex");
            let varseries = <model.Series>TestInitializer.getValue("putChartSeries", "series");
            let varpassword = <string>TestInitializer.getValue("putChartSeries", "password");
            let varfolder = <string>TestInitializer.getValue("putChartSeries", "folder");
            let varstorage = <string>TestInitializer.getValue("putChartSeries", "storage");
            return TestInitializer.initialize("putChartSeries", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), false, "putChartSeries");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartSeries", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartSeries", "seriesIndex");
        let varseries = <model.Series>TestInitializer.getValue("putChartSeries", "series");
        let varpassword = <string>TestInitializer.getValue("putChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("putChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartSeries", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartSeries", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "putChartSeries", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartSeries", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartSeries", "seriesIndex");
        let varseries = <model.Series>TestInitializer.getValue("putChartSeries", "series");
        let varpassword = <string>TestInitializer.getValue("putChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("putChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartSeries", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartSeries", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "putChartSeries", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("putChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartSeries", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartSeries", "seriesIndex");
        let varseries = <model.Series>TestInitializer.getValue("putChartSeries", "series");
        let varpassword = <string>TestInitializer.getValue("putChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("putChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartSeries", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartSeries", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "putChartSeries", field, varshapeIndex);
            });
        });
    });

    it("invalid seriesIndex test", () => {
        const field = "seriesIndex";
        let varname = <string>TestInitializer.getValue("putChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartSeries", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartSeries", "seriesIndex");
        let varseries = <model.Series>TestInitializer.getValue("putChartSeries", "series");
        let varpassword = <string>TestInitializer.getValue("putChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("putChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartSeries", "storage");
        varseriesIndex = <number>TestInitializer.invalidizeValue(varseriesIndex, field, "number", "putChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartSeries", field, varseriesIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "putChartSeries", field, varseriesIndex);
            });
        });
    });

    it("invalid series test", () => {
        const field = "series";
        let varname = <string>TestInitializer.getValue("putChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartSeries", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartSeries", "seriesIndex");
        let varseries = <model.Series>TestInitializer.getValue("putChartSeries", "series");
        let varpassword = <string>TestInitializer.getValue("putChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("putChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartSeries", "storage");
        varseries = <model.Series>TestInitializer.invalidizeValue(varseries, field, "Series", "putChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartSeries", field, varseries).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "putChartSeries", field, varseries);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartSeries", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartSeries", "seriesIndex");
        let varseries = <model.Series>TestInitializer.getValue("putChartSeries", "series");
        let varpassword = <string>TestInitializer.getValue("putChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("putChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartSeries", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartSeries", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "putChartSeries", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartSeries", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartSeries", "seriesIndex");
        let varseries = <model.Series>TestInitializer.getValue("putChartSeries", "series");
        let varpassword = <string>TestInitializer.getValue("putChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("putChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartSeries", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartSeries", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "putChartSeries", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putChartSeries", "name");
        let varslideIndex = <number>TestInitializer.getValue("putChartSeries", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putChartSeries", "shapeIndex");
        let varseriesIndex = <number>TestInitializer.getValue("putChartSeries", "seriesIndex");
        let varseries = <model.Series>TestInitializer.getValue("putChartSeries", "series");
        let varpassword = <string>TestInitializer.getValue("putChartSeries", "password");
        let varfolder = <string>TestInitializer.getValue("putChartSeries", "folder");
        let varstorage = <string>TestInitializer.getValue("putChartSeries", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putChartSeries", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "putChartSeries", field, varstorage);
            });
        });
    });
});

describe("Tests for saveShapeOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("putExportShape", "document");
            let varslideIndex = <number>TestInitializer.getValue("putExportShape", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("putExportShape", "shapeIndex");
            let varformat = <string>TestInitializer.getValue("putExportShape", "format");
            let varoutPath = <string>TestInitializer.getValue("putExportShape", "outPath");
            let varpassword = <string>TestInitializer.getValue("putExportShape", "password");
            let varstorage = <string>TestInitializer.getValue("putExportShape", "storage");
            let varscaleX = <number>TestInitializer.getValue("putExportShape", "scaleX");
            let varscaleY = <number>TestInitializer.getValue("putExportShape", "scaleY");
            let varbounds = <string>TestInitializer.getValue("putExportShape", "bounds");
            let varfontsFolder = <string>TestInitializer.getValue("putExportShape", "fontsFolder");
            return TestInitializer.initialize("putExportShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), false, "putExportShape");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putExportShape", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportShape", "outPath");
        let varpassword = <string>TestInitializer.getValue("putExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("putExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("putExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("putExportShape", "fontsFolder");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "putExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportShape", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "putExportShape", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putExportShape", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportShape", "outPath");
        let varpassword = <string>TestInitializer.getValue("putExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("putExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("putExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("putExportShape", "fontsFolder");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "putExportShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putExportShape", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportShape", "outPath");
        let varpassword = <string>TestInitializer.getValue("putExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("putExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("putExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("putExportShape", "fontsFolder");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "putExportShape", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putExportShape", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportShape", "outPath");
        let varpassword = <string>TestInitializer.getValue("putExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("putExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("putExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("putExportShape", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "putExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportShape", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "putExportShape", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putExportShape", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportShape", "outPath");
        let varpassword = <string>TestInitializer.getValue("putExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("putExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("putExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("putExportShape", "fontsFolder");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "putExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportShape", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "putExportShape", field, varoutPath);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putExportShape", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportShape", "outPath");
        let varpassword = <string>TestInitializer.getValue("putExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("putExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("putExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("putExportShape", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "putExportShape", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putExportShape", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportShape", "outPath");
        let varpassword = <string>TestInitializer.getValue("putExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("putExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("putExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("putExportShape", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "putExportShape", field, varstorage);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putExportShape", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportShape", "outPath");
        let varpassword = <string>TestInitializer.getValue("putExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("putExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("putExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("putExportShape", "fontsFolder");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "putExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportShape", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "putExportShape", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putExportShape", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportShape", "outPath");
        let varpassword = <string>TestInitializer.getValue("putExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("putExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("putExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("putExportShape", "fontsFolder");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "putExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportShape", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "putExportShape", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putExportShape", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportShape", "outPath");
        let varpassword = <string>TestInitializer.getValue("putExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("putExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("putExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("putExportShape", "fontsFolder");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "putExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportShape", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "putExportShape", field, varbounds);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportShape", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putExportShape", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putExportShape", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportShape", "outPath");
        let varpassword = <string>TestInitializer.getValue("putExportShape", "password");
        let varstorage = <string>TestInitializer.getValue("putExportShape", "storage");
        let varscaleX = <number>TestInitializer.getValue("putExportShape", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putExportShape", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putExportShape", "bounds");
        let varfontsFolder = <string>TestInitializer.getValue("putExportShape", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "putExportShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportShape", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varpassword, varstorage, varscaleX, varscaleY, varbounds, varfontsFolder), "putExportShape", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for saveSlideOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("putExportSlide", "document");
            let varslideIndex = <number>TestInitializer.getValue("putExportSlide", "slideIndex");
            let varformat = <string>TestInitializer.getValue("putExportSlide", "format");
            let varoutPath = <string>TestInitializer.getValue("putExportSlide", "outPath");
            let varwidth = <number>TestInitializer.getValue("putExportSlide", "width");
            let varheight = <number>TestInitializer.getValue("putExportSlide", "height");
            let varpassword = <string>TestInitializer.getValue("putExportSlide", "password");
            let varstorage = <string>TestInitializer.getValue("putExportSlide", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("putExportSlide", "fontsFolder");
            return TestInitializer.initialize("putExportSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), false, "putExportSlide");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putExportSlide", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportSlide", "outPath");
        let varwidth = <number>TestInitializer.getValue("putExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("putExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("putExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("putExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putExportSlide", "fontsFolder");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "putExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportSlide", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "putExportSlide", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putExportSlide", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportSlide", "outPath");
        let varwidth = <number>TestInitializer.getValue("putExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("putExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("putExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("putExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putExportSlide", "fontsFolder");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "putExportSlide", field, varslideIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putExportSlide", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportSlide", "outPath");
        let varwidth = <number>TestInitializer.getValue("putExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("putExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("putExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("putExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putExportSlide", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "putExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportSlide", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "putExportSlide", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putExportSlide", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportSlide", "outPath");
        let varwidth = <number>TestInitializer.getValue("putExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("putExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("putExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("putExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putExportSlide", "fontsFolder");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "putExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportSlide", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "putExportSlide", field, varoutPath);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putExportSlide", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportSlide", "outPath");
        let varwidth = <number>TestInitializer.getValue("putExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("putExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("putExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("putExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putExportSlide", "fontsFolder");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "putExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportSlide", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "putExportSlide", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putExportSlide", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportSlide", "outPath");
        let varwidth = <number>TestInitializer.getValue("putExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("putExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("putExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("putExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putExportSlide", "fontsFolder");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "putExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportSlide", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "putExportSlide", field, varheight);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putExportSlide", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportSlide", "outPath");
        let varwidth = <number>TestInitializer.getValue("putExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("putExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("putExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("putExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putExportSlide", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "putExportSlide", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putExportSlide", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportSlide", "outPath");
        let varwidth = <number>TestInitializer.getValue("putExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("putExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("putExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("putExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putExportSlide", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "putExportSlide", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putExportSlide", "document");
        let varslideIndex = <number>TestInitializer.getValue("putExportSlide", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putExportSlide", "format");
        let varoutPath = <string>TestInitializer.getValue("putExportSlide", "outPath");
        let varwidth = <number>TestInitializer.getValue("putExportSlide", "width");
        let varheight = <number>TestInitializer.getValue("putExportSlide", "height");
        let varpassword = <string>TestInitializer.getValue("putExportSlide", "password");
        let varstorage = <string>TestInitializer.getValue("putExportSlide", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putExportSlide", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "putExportSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putExportSlide", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "putExportSlide", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for updateLayoutSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putLayoutSlide", "name");
            let varslideIndex = <number>TestInitializer.getValue("putLayoutSlide", "slideIndex");
            let varslideDto = <model.LayoutSlide>TestInitializer.getValue("putLayoutSlide", "slideDto");
            let varpassword = <string>TestInitializer.getValue("putLayoutSlide", "password");
            let varfolder = <string>TestInitializer.getValue("putLayoutSlide", "folder");
            let varstorage = <string>TestInitializer.getValue("putLayoutSlide", "storage");
            return TestInitializer.initialize("putLayoutSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateLayoutSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), false, "putLayoutSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putLayoutSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putLayoutSlide", "slideIndex");
        let varslideDto = <model.LayoutSlide>TestInitializer.getValue("putLayoutSlide", "slideDto");
        let varpassword = <string>TestInitializer.getValue("putLayoutSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putLayoutSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putLayoutSlide", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putLayoutSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateLayoutSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "putLayoutSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putLayoutSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putLayoutSlide", "slideIndex");
        let varslideDto = <model.LayoutSlide>TestInitializer.getValue("putLayoutSlide", "slideDto");
        let varpassword = <string>TestInitializer.getValue("putLayoutSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putLayoutSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putLayoutSlide", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putLayoutSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateLayoutSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "putLayoutSlide", field, varslideIndex);
            });
        });
    });

    it("invalid slideDto test", () => {
        const field = "slideDto";
        let varname = <string>TestInitializer.getValue("putLayoutSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putLayoutSlide", "slideIndex");
        let varslideDto = <model.LayoutSlide>TestInitializer.getValue("putLayoutSlide", "slideDto");
        let varpassword = <string>TestInitializer.getValue("putLayoutSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putLayoutSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putLayoutSlide", "storage");
        varslideDto = <model.LayoutSlide>TestInitializer.invalidizeValue(varslideDto, field, "LayoutSlide", "putLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putLayoutSlide", field, varslideDto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateLayoutSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "putLayoutSlide", field, varslideDto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putLayoutSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putLayoutSlide", "slideIndex");
        let varslideDto = <model.LayoutSlide>TestInitializer.getValue("putLayoutSlide", "slideDto");
        let varpassword = <string>TestInitializer.getValue("putLayoutSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putLayoutSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putLayoutSlide", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putLayoutSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateLayoutSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "putLayoutSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putLayoutSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putLayoutSlide", "slideIndex");
        let varslideDto = <model.LayoutSlide>TestInitializer.getValue("putLayoutSlide", "slideDto");
        let varpassword = <string>TestInitializer.getValue("putLayoutSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putLayoutSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putLayoutSlide", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putLayoutSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateLayoutSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "putLayoutSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putLayoutSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putLayoutSlide", "slideIndex");
        let varslideDto = <model.LayoutSlide>TestInitializer.getValue("putLayoutSlide", "slideDto");
        let varpassword = <string>TestInitializer.getValue("putLayoutSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putLayoutSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putLayoutSlide", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putLayoutSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateLayoutSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "putLayoutSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for setNotesSlideHeaderFooter", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "name");
            let varslideIndex = <number>TestInitializer.getValue("putNotesSlideHeaderFooter", "slideIndex");
            let vardto = <model.NotesSlideHeaderFooter>TestInitializer.getValue("putNotesSlideHeaderFooter", "dto");
            let varpassword = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "password");
            let varfolder = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "folder");
            let varstorage = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "storage");
            return TestInitializer.initialize("putNotesSlideHeaderFooter", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setNotesSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), false, "putNotesSlideHeaderFooter");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideHeaderFooter", "slideIndex");
        let vardto = <model.NotesSlideHeaderFooter>TestInitializer.getValue("putNotesSlideHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideHeaderFooter", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setNotesSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putNotesSlideHeaderFooter", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideHeaderFooter", "slideIndex");
        let vardto = <model.NotesSlideHeaderFooter>TestInitializer.getValue("putNotesSlideHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideHeaderFooter", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setNotesSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putNotesSlideHeaderFooter", field, varslideIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideHeaderFooter", "slideIndex");
        let vardto = <model.NotesSlideHeaderFooter>TestInitializer.getValue("putNotesSlideHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "storage");
        vardto = <model.NotesSlideHeaderFooter>TestInitializer.invalidizeValue(vardto, field, "NotesSlideHeaderFooter", "putNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideHeaderFooter", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setNotesSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putNotesSlideHeaderFooter", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideHeaderFooter", "slideIndex");
        let vardto = <model.NotesSlideHeaderFooter>TestInitializer.getValue("putNotesSlideHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideHeaderFooter", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setNotesSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putNotesSlideHeaderFooter", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideHeaderFooter", "slideIndex");
        let vardto = <model.NotesSlideHeaderFooter>TestInitializer.getValue("putNotesSlideHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideHeaderFooter", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setNotesSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putNotesSlideHeaderFooter", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideHeaderFooter", "slideIndex");
        let vardto = <model.NotesSlideHeaderFooter>TestInitializer.getValue("putNotesSlideHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideHeaderFooter", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideHeaderFooter", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setNotesSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putNotesSlideHeaderFooter", field, varstorage);
            });
        });
    });
});

describe("Tests for saveNotesSlideShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "name");
            let varslideIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "shapeIndex");
            let varformat = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "format");
            let varoutPath = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "outPath");
            let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putNotesSlideShapeSaveAs", "options");
            let varscaleX = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleX");
            let varscaleY = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleY");
            let varbounds = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "bounds");
            let varpassword = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "password");
            let varfolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "folder");
            let varstorage = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "fontsFolder");
            return TestInitializer.initialize("putNotesSlideShapeSaveAs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), false, "putNotesSlideShapeSaveAs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "fontsFolder");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideShapeSaveAs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putNotesSlideShapeSaveAs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "fontsFolder");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideShapeSaveAs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putNotesSlideShapeSaveAs", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "fontsFolder");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideShapeSaveAs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putNotesSlideShapeSaveAs", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "putNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideShapeSaveAs", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putNotesSlideShapeSaveAs", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let varname = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "fontsFolder");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "putNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideShapeSaveAs", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putNotesSlideShapeSaveAs", field, varoutPath);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "fontsFolder");
        varoptions = <model.IShapeExportOptions>TestInitializer.invalidizeValue(varoptions, field, "IShapeExportOptions", "putNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideShapeSaveAs", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putNotesSlideShapeSaveAs", field, varoptions);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let varname = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "fontsFolder");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "putNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideShapeSaveAs", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putNotesSlideShapeSaveAs", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let varname = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "fontsFolder");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "putNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideShapeSaveAs", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putNotesSlideShapeSaveAs", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let varname = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "fontsFolder");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "putNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideShapeSaveAs", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putNotesSlideShapeSaveAs", field, varbounds);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideShapeSaveAs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putNotesSlideShapeSaveAs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "fontsFolder");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideShapeSaveAs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putNotesSlideShapeSaveAs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideShapeSaveAs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putNotesSlideShapeSaveAs", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putNotesSlideShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putNotesSlideShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putNotesSlideShapeSaveAs", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "putNotesSlideShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putNotesSlideShapeSaveAs", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putNotesSlideShapeSaveAs", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for orderedMerge", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putPresentationMerge", "name");
            let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("putPresentationMerge", "request");
            let varpassword = <string>TestInitializer.getValue("putPresentationMerge", "password");
            let varfolder = <string>TestInitializer.getValue("putPresentationMerge", "folder");
            let varstorage = <string>TestInitializer.getValue("putPresentationMerge", "storage");
            return TestInitializer.initialize("putPresentationMerge", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().orderedMerge(varname, varrequest, varpassword, varfolder, varstorage), false, "putPresentationMerge");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putPresentationMerge", "name");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("putPresentationMerge", "request");
        let varpassword = <string>TestInitializer.getValue("putPresentationMerge", "password");
        let varfolder = <string>TestInitializer.getValue("putPresentationMerge", "folder");
        let varstorage = <string>TestInitializer.getValue("putPresentationMerge", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putPresentationMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putPresentationMerge", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().orderedMerge(varname, varrequest, varpassword, varfolder, varstorage), "putPresentationMerge", field, varname);
            });
        });
    });

    it("invalid request test", () => {
        const field = "request";
        let varname = <string>TestInitializer.getValue("putPresentationMerge", "name");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("putPresentationMerge", "request");
        let varpassword = <string>TestInitializer.getValue("putPresentationMerge", "password");
        let varfolder = <string>TestInitializer.getValue("putPresentationMerge", "folder");
        let varstorage = <string>TestInitializer.getValue("putPresentationMerge", "storage");
        varrequest = <model.OrderedMergeRequest>TestInitializer.invalidizeValue(varrequest, field, "OrderedMergeRequest", "putPresentationMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putPresentationMerge", field, varrequest).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().orderedMerge(varname, varrequest, varpassword, varfolder, varstorage), "putPresentationMerge", field, varrequest);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putPresentationMerge", "name");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("putPresentationMerge", "request");
        let varpassword = <string>TestInitializer.getValue("putPresentationMerge", "password");
        let varfolder = <string>TestInitializer.getValue("putPresentationMerge", "folder");
        let varstorage = <string>TestInitializer.getValue("putPresentationMerge", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putPresentationMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putPresentationMerge", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().orderedMerge(varname, varrequest, varpassword, varfolder, varstorage), "putPresentationMerge", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putPresentationMerge", "name");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("putPresentationMerge", "request");
        let varpassword = <string>TestInitializer.getValue("putPresentationMerge", "password");
        let varfolder = <string>TestInitializer.getValue("putPresentationMerge", "folder");
        let varstorage = <string>TestInitializer.getValue("putPresentationMerge", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putPresentationMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putPresentationMerge", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().orderedMerge(varname, varrequest, varpassword, varfolder, varstorage), "putPresentationMerge", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putPresentationMerge", "name");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("putPresentationMerge", "request");
        let varpassword = <string>TestInitializer.getValue("putPresentationMerge", "password");
        let varfolder = <string>TestInitializer.getValue("putPresentationMerge", "folder");
        let varstorage = <string>TestInitializer.getValue("putPresentationMerge", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putPresentationMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putPresentationMerge", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().orderedMerge(varname, varrequest, varpassword, varfolder, varstorage), "putPresentationMerge", field, varstorage);
            });
        });
    });
});

describe("Tests for splitAndSaveOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("putPresentationSplit", "document");
            let varformat = <string>TestInitializer.getValue("putPresentationSplit", "format");
            let vardestFolder = <string>TestInitializer.getValue("putPresentationSplit", "destFolder");
            let varwidth = <number>TestInitializer.getValue("putPresentationSplit", "width");
            let varheight = <number>TestInitializer.getValue("putPresentationSplit", "height");
            let varfrom = <number>TestInitializer.getValue("putPresentationSplit", "from");
            let varto = <number>TestInitializer.getValue("putPresentationSplit", "to");
            let varpassword = <string>TestInitializer.getValue("putPresentationSplit", "password");
            let varstorage = <string>TestInitializer.getValue("putPresentationSplit", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("putPresentationSplit", "fontsFolder");
            return TestInitializer.initialize("putPresentationSplit", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), false, "putPresentationSplit");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("putPresentationSplit", "format");
        let vardestFolder = <string>TestInitializer.getValue("putPresentationSplit", "destFolder");
        let varwidth = <number>TestInitializer.getValue("putPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("putPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("putPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("putPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("putPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("putPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putPresentationSplit", "fontsFolder");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "putPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putPresentationSplit", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "putPresentationSplit", field, vardocument);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("putPresentationSplit", "format");
        let vardestFolder = <string>TestInitializer.getValue("putPresentationSplit", "destFolder");
        let varwidth = <number>TestInitializer.getValue("putPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("putPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("putPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("putPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("putPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("putPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putPresentationSplit", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "putPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putPresentationSplit", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "putPresentationSplit", field, varformat);
            });
        });
    });

    it("invalid destFolder test", () => {
        const field = "destFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("putPresentationSplit", "format");
        let vardestFolder = <string>TestInitializer.getValue("putPresentationSplit", "destFolder");
        let varwidth = <number>TestInitializer.getValue("putPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("putPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("putPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("putPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("putPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("putPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putPresentationSplit", "fontsFolder");
        vardestFolder = <string>TestInitializer.invalidizeValue(vardestFolder, field, "string", "putPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putPresentationSplit", field, vardestFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "putPresentationSplit", field, vardestFolder);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("putPresentationSplit", "format");
        let vardestFolder = <string>TestInitializer.getValue("putPresentationSplit", "destFolder");
        let varwidth = <number>TestInitializer.getValue("putPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("putPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("putPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("putPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("putPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("putPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putPresentationSplit", "fontsFolder");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "putPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putPresentationSplit", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "putPresentationSplit", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("putPresentationSplit", "format");
        let vardestFolder = <string>TestInitializer.getValue("putPresentationSplit", "destFolder");
        let varwidth = <number>TestInitializer.getValue("putPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("putPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("putPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("putPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("putPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("putPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putPresentationSplit", "fontsFolder");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "putPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putPresentationSplit", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "putPresentationSplit", field, varheight);
            });
        });
    });

    it("invalid from test", () => {
        const field = "from";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("putPresentationSplit", "format");
        let vardestFolder = <string>TestInitializer.getValue("putPresentationSplit", "destFolder");
        let varwidth = <number>TestInitializer.getValue("putPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("putPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("putPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("putPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("putPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("putPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putPresentationSplit", "fontsFolder");
        varfrom = <number>TestInitializer.invalidizeValue(varfrom, field, "number", "putPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putPresentationSplit", field, varfrom).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "putPresentationSplit", field, varfrom);
            });
        });
    });

    it("invalid to test", () => {
        const field = "to";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("putPresentationSplit", "format");
        let vardestFolder = <string>TestInitializer.getValue("putPresentationSplit", "destFolder");
        let varwidth = <number>TestInitializer.getValue("putPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("putPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("putPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("putPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("putPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("putPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putPresentationSplit", "fontsFolder");
        varto = <number>TestInitializer.invalidizeValue(varto, field, "number", "putPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putPresentationSplit", field, varto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "putPresentationSplit", field, varto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("putPresentationSplit", "format");
        let vardestFolder = <string>TestInitializer.getValue("putPresentationSplit", "destFolder");
        let varwidth = <number>TestInitializer.getValue("putPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("putPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("putPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("putPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("putPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("putPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putPresentationSplit", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putPresentationSplit", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "putPresentationSplit", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("putPresentationSplit", "format");
        let vardestFolder = <string>TestInitializer.getValue("putPresentationSplit", "destFolder");
        let varwidth = <number>TestInitializer.getValue("putPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("putPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("putPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("putPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("putPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("putPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putPresentationSplit", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putPresentationSplit", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "putPresentationSplit", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putPresentationSplit", "document");
        let varformat = <string>TestInitializer.getValue("putPresentationSplit", "format");
        let vardestFolder = <string>TestInitializer.getValue("putPresentationSplit", "destFolder");
        let varwidth = <number>TestInitializer.getValue("putPresentationSplit", "width");
        let varheight = <number>TestInitializer.getValue("putPresentationSplit", "height");
        let varfrom = <number>TestInitializer.getValue("putPresentationSplit", "from");
        let varto = <number>TestInitializer.getValue("putPresentationSplit", "to");
        let varpassword = <string>TestInitializer.getValue("putPresentationSplit", "password");
        let varstorage = <string>TestInitializer.getValue("putPresentationSplit", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putPresentationSplit", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "putPresentationSplit");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putPresentationSplit", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "putPresentationSplit", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for updateSection", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSection", "name");
            let varsectionIndex = <number>TestInitializer.getValue("putSection", "sectionIndex");
            let varsectionName = <string>TestInitializer.getValue("putSection", "sectionName");
            let varpassword = <string>TestInitializer.getValue("putSection", "password");
            let varfolder = <string>TestInitializer.getValue("putSection", "folder");
            let varstorage = <string>TestInitializer.getValue("putSection", "storage");
            return TestInitializer.initialize("putSection", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateSection(varname, varsectionIndex, varsectionName, varpassword, varfolder, varstorage), false, "putSection");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSection", "name");
        let varsectionIndex = <number>TestInitializer.getValue("putSection", "sectionIndex");
        let varsectionName = <string>TestInitializer.getValue("putSection", "sectionName");
        let varpassword = <string>TestInitializer.getValue("putSection", "password");
        let varfolder = <string>TestInitializer.getValue("putSection", "folder");
        let varstorage = <string>TestInitializer.getValue("putSection", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSection", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSection(varname, varsectionIndex, varsectionName, varpassword, varfolder, varstorage), "putSection", field, varname);
            });
        });
    });

    it("invalid sectionIndex test", () => {
        const field = "sectionIndex";
        let varname = <string>TestInitializer.getValue("putSection", "name");
        let varsectionIndex = <number>TestInitializer.getValue("putSection", "sectionIndex");
        let varsectionName = <string>TestInitializer.getValue("putSection", "sectionName");
        let varpassword = <string>TestInitializer.getValue("putSection", "password");
        let varfolder = <string>TestInitializer.getValue("putSection", "folder");
        let varstorage = <string>TestInitializer.getValue("putSection", "storage");
        varsectionIndex = <number>TestInitializer.invalidizeValue(varsectionIndex, field, "number", "putSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSection", field, varsectionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSection(varname, varsectionIndex, varsectionName, varpassword, varfolder, varstorage), "putSection", field, varsectionIndex);
            });
        });
    });

    it("invalid sectionName test", () => {
        const field = "sectionName";
        let varname = <string>TestInitializer.getValue("putSection", "name");
        let varsectionIndex = <number>TestInitializer.getValue("putSection", "sectionIndex");
        let varsectionName = <string>TestInitializer.getValue("putSection", "sectionName");
        let varpassword = <string>TestInitializer.getValue("putSection", "password");
        let varfolder = <string>TestInitializer.getValue("putSection", "folder");
        let varstorage = <string>TestInitializer.getValue("putSection", "storage");
        varsectionName = <string>TestInitializer.invalidizeValue(varsectionName, field, "string", "putSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSection", field, varsectionName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSection(varname, varsectionIndex, varsectionName, varpassword, varfolder, varstorage), "putSection", field, varsectionName);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSection", "name");
        let varsectionIndex = <number>TestInitializer.getValue("putSection", "sectionIndex");
        let varsectionName = <string>TestInitializer.getValue("putSection", "sectionName");
        let varpassword = <string>TestInitializer.getValue("putSection", "password");
        let varfolder = <string>TestInitializer.getValue("putSection", "folder");
        let varstorage = <string>TestInitializer.getValue("putSection", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSection", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSection(varname, varsectionIndex, varsectionName, varpassword, varfolder, varstorage), "putSection", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSection", "name");
        let varsectionIndex = <number>TestInitializer.getValue("putSection", "sectionIndex");
        let varsectionName = <string>TestInitializer.getValue("putSection", "sectionName");
        let varpassword = <string>TestInitializer.getValue("putSection", "password");
        let varfolder = <string>TestInitializer.getValue("putSection", "folder");
        let varstorage = <string>TestInitializer.getValue("putSection", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSection", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSection(varname, varsectionIndex, varsectionName, varpassword, varfolder, varstorage), "putSection", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSection", "name");
        let varsectionIndex = <number>TestInitializer.getValue("putSection", "sectionIndex");
        let varsectionName = <string>TestInitializer.getValue("putSection", "sectionName");
        let varpassword = <string>TestInitializer.getValue("putSection", "password");
        let varfolder = <string>TestInitializer.getValue("putSection", "folder");
        let varstorage = <string>TestInitializer.getValue("putSection", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSection", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSection(varname, varsectionIndex, varsectionName, varpassword, varfolder, varstorage), "putSection", field, varstorage);
            });
        });
    });
});

describe("Tests for setSections", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSections", "name");
            let varsections = <model.Sections>TestInitializer.getValue("putSections", "sections");
            let varpassword = <string>TestInitializer.getValue("putSections", "password");
            let varfolder = <string>TestInitializer.getValue("putSections", "folder");
            let varstorage = <string>TestInitializer.getValue("putSections", "storage");
            return TestInitializer.initialize("putSections", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setSections(varname, varsections, varpassword, varfolder, varstorage), false, "putSections");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSections", "name");
        let varsections = <model.Sections>TestInitializer.getValue("putSections", "sections");
        let varpassword = <string>TestInitializer.getValue("putSections", "password");
        let varfolder = <string>TestInitializer.getValue("putSections", "folder");
        let varstorage = <string>TestInitializer.getValue("putSections", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSections", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSections(varname, varsections, varpassword, varfolder, varstorage), "putSections", field, varname);
            });
        });
    });

    it("invalid sections test", () => {
        const field = "sections";
        let varname = <string>TestInitializer.getValue("putSections", "name");
        let varsections = <model.Sections>TestInitializer.getValue("putSections", "sections");
        let varpassword = <string>TestInitializer.getValue("putSections", "password");
        let varfolder = <string>TestInitializer.getValue("putSections", "folder");
        let varstorage = <string>TestInitializer.getValue("putSections", "storage");
        varsections = <model.Sections>TestInitializer.invalidizeValue(varsections, field, "Sections", "putSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSections", field, varsections).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSections(varname, varsections, varpassword, varfolder, varstorage), "putSections", field, varsections);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSections", "name");
        let varsections = <model.Sections>TestInitializer.getValue("putSections", "sections");
        let varpassword = <string>TestInitializer.getValue("putSections", "password");
        let varfolder = <string>TestInitializer.getValue("putSections", "folder");
        let varstorage = <string>TestInitializer.getValue("putSections", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSections", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSections(varname, varsections, varpassword, varfolder, varstorage), "putSections", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSections", "name");
        let varsections = <model.Sections>TestInitializer.getValue("putSections", "sections");
        let varpassword = <string>TestInitializer.getValue("putSections", "password");
        let varfolder = <string>TestInitializer.getValue("putSections", "folder");
        let varstorage = <string>TestInitializer.getValue("putSections", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSections", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSections(varname, varsections, varpassword, varfolder, varstorage), "putSections", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSections", "name");
        let varsections = <model.Sections>TestInitializer.getValue("putSections", "sections");
        let varpassword = <string>TestInitializer.getValue("putSections", "password");
        let varfolder = <string>TestInitializer.getValue("putSections", "folder");
        let varstorage = <string>TestInitializer.getValue("putSections", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSections", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSections(varname, varsections, varpassword, varfolder, varstorage), "putSections", field, varstorage);
            });
        });
    });
});

describe("Tests for updatePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "name");
            let varslideIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "paragraphIndex");
            let varportionIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "portionIndex");
            let vardto = <model.Portion>TestInitializer.getValue("putSetParagraphPortionProperties", "dto");
            let varpassword = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "password");
            let varfolder = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "folder");
            let varstorage = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "storage");
            return TestInitializer.initialize("putSetParagraphPortionProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), false, "putSetParagraphPortionProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSetParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphPortionProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphPortionProperties", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putSetParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphPortionProperties", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphPortionProperties", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putSetParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphPortionProperties", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphPortionProperties", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "putSetParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphPortionProperties", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphPortionProperties", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "storage");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "putSetParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphPortionProperties", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphPortionProperties", field, varportionIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "storage");
        vardto = <model.Portion>TestInitializer.invalidizeValue(vardto, field, "Portion", "putSetParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphPortionProperties", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphPortionProperties", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSetParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphPortionProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphPortionProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSetParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphPortionProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphPortionProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphPortionProperties", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSetParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphPortionProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphPortionProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for updateParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSetParagraphProperties", "name");
            let varslideIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "paragraphIndex");
            let vardto = <model.Paragraph>TestInitializer.getValue("putSetParagraphProperties", "dto");
            let varpassword = <string>TestInitializer.getValue("putSetParagraphProperties", "password");
            let varfolder = <string>TestInitializer.getValue("putSetParagraphProperties", "folder");
            let varstorage = <string>TestInitializer.getValue("putSetParagraphProperties", "storage");
            return TestInitializer.initialize("putSetParagraphProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), false, "putSetParagraphProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSetParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphProperties", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSetParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphProperties", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putSetParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphProperties", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putSetParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphProperties", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphProperties", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("putSetParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphProperties", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putSetParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphProperties", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphProperties", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("putSetParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphProperties", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "putSetParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphProperties", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphProperties", field, varparagraphIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putSetParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphProperties", "storage");
        vardto = <model.Paragraph>TestInitializer.invalidizeValue(vardto, field, "Paragraph", "putSetParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphProperties", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphProperties", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSetParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphProperties", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSetParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSetParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphProperties", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSetParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSetParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetParagraphProperties", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSetParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetParagraphProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetParagraphProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for updateSubshapePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "name");
            let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
            let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "path");
            let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
            let varportionIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
            let vardto = <model.Portion>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "dto");
            let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "password");
            let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "folder");
            let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "storage");
            return TestInitializer.initialize("putSetSubshapeParagraphPortionProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), false, "putSetSubshapeParagraphPortionProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSetSubshapeParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphPortionProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphPortionProperties", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putSetSubshapeParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphPortionProperties", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphPortionProperties", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "putSetSubshapeParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphPortionProperties", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphPortionProperties", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putSetSubshapeParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphPortionProperties", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphPortionProperties", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "putSetSubshapeParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphPortionProperties", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphPortionProperties", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "storage");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "putSetSubshapeParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphPortionProperties", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphPortionProperties", field, varportionIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "storage");
        vardto = <model.Portion>TestInitializer.invalidizeValue(vardto, field, "Portion", "putSetSubshapeParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphPortionProperties", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphPortionProperties", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSetSubshapeParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphPortionProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphPortionProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSetSubshapeParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphPortionProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphPortionProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphPortionProperties", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSetSubshapeParagraphPortionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphPortionProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphPortionProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for updateSubshapeParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "name");
            let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "slideIndex");
            let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "path");
            let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "paragraphIndex");
            let vardto = <model.Paragraph>TestInitializer.getValue("putSetSubshapeParagraphProperties", "dto");
            let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "password");
            let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "folder");
            let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "storage");
            return TestInitializer.initialize("putSetSubshapeParagraphProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), false, "putSetSubshapeParagraphProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetSubshapeParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSetSubshapeParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphProperties", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetSubshapeParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putSetSubshapeParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphProperties", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphProperties", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetSubshapeParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "putSetSubshapeParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphProperties", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphProperties", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetSubshapeParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putSetSubshapeParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphProperties", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphProperties", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetSubshapeParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "putSetSubshapeParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphProperties", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphProperties", field, varparagraphIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetSubshapeParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "storage");
        vardto = <model.Paragraph>TestInitializer.invalidizeValue(vardto, field, "Paragraph", "putSetSubshapeParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphProperties", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphProperties", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetSubshapeParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSetSubshapeParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetSubshapeParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSetSubshapeParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putSetSubshapeParagraphProperties", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putSetSubshapeParagraphProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSetSubshapeParagraphProperties", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSetSubshapeParagraphProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSetSubshapeParagraphProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putSetSubshapeParagraphProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for saveShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putShapeSaveAs", "name");
            let varslideIndex = <number>TestInitializer.getValue("putShapeSaveAs", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("putShapeSaveAs", "shapeIndex");
            let varformat = <string>TestInitializer.getValue("putShapeSaveAs", "format");
            let varoutPath = <string>TestInitializer.getValue("putShapeSaveAs", "outPath");
            let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putShapeSaveAs", "options");
            let varscaleX = <number>TestInitializer.getValue("putShapeSaveAs", "scaleX");
            let varscaleY = <number>TestInitializer.getValue("putShapeSaveAs", "scaleY");
            let varbounds = <string>TestInitializer.getValue("putShapeSaveAs", "bounds");
            let varpassword = <string>TestInitializer.getValue("putShapeSaveAs", "password");
            let varfolder = <string>TestInitializer.getValue("putShapeSaveAs", "folder");
            let varstorage = <string>TestInitializer.getValue("putShapeSaveAs", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("putShapeSaveAs", "fontsFolder");
            return TestInitializer.initialize("putShapeSaveAs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), false, "putShapeSaveAs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putShapeSaveAs", "fontsFolder");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putShapeSaveAs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putShapeSaveAs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putShapeSaveAs", "fontsFolder");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putShapeSaveAs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putShapeSaveAs", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("putShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putShapeSaveAs", "fontsFolder");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putShapeSaveAs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putShapeSaveAs", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("putShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putShapeSaveAs", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "putShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putShapeSaveAs", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putShapeSaveAs", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let varname = <string>TestInitializer.getValue("putShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putShapeSaveAs", "fontsFolder");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "putShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putShapeSaveAs", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putShapeSaveAs", field, varoutPath);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("putShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putShapeSaveAs", "fontsFolder");
        varoptions = <model.IShapeExportOptions>TestInitializer.invalidizeValue(varoptions, field, "IShapeExportOptions", "putShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putShapeSaveAs", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putShapeSaveAs", field, varoptions);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let varname = <string>TestInitializer.getValue("putShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putShapeSaveAs", "fontsFolder");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "putShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putShapeSaveAs", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putShapeSaveAs", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let varname = <string>TestInitializer.getValue("putShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putShapeSaveAs", "fontsFolder");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "putShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putShapeSaveAs", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putShapeSaveAs", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let varname = <string>TestInitializer.getValue("putShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putShapeSaveAs", "fontsFolder");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "putShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putShapeSaveAs", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putShapeSaveAs", field, varbounds);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putShapeSaveAs", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putShapeSaveAs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putShapeSaveAs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putShapeSaveAs", "fontsFolder");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putShapeSaveAs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putShapeSaveAs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putShapeSaveAs", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putShapeSaveAs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putShapeSaveAs", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("putShapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putShapeSaveAs", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putShapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putShapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putShapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putShapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putShapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putShapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putShapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putShapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putShapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putShapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putShapeSaveAs", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "putShapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putShapeSaveAs", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putShapeSaveAs", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for setAnimation", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlideAnimation", "name");
            let varslideIndex = <number>TestInitializer.getValue("putSlideAnimation", "slideIndex");
            let varanimation = <model.SlideAnimation>TestInitializer.getValue("putSlideAnimation", "animation");
            let varpassword = <string>TestInitializer.getValue("putSlideAnimation", "password");
            let varfolder = <string>TestInitializer.getValue("putSlideAnimation", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlideAnimation", "storage");
            return TestInitializer.initialize("putSlideAnimation", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setAnimation(varname, varslideIndex, varanimation, varpassword, varfolder, varstorage), false, "putSlideAnimation");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimation", "slideIndex");
        let varanimation = <model.SlideAnimation>TestInitializer.getValue("putSlideAnimation", "animation");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimation", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimation", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setAnimation(varname, varslideIndex, varanimation, varpassword, varfolder, varstorage), "putSlideAnimation", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimation", "slideIndex");
        let varanimation = <model.SlideAnimation>TestInitializer.getValue("putSlideAnimation", "animation");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimation", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimation", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setAnimation(varname, varslideIndex, varanimation, varpassword, varfolder, varstorage), "putSlideAnimation", field, varslideIndex);
            });
        });
    });

    it("invalid animation test", () => {
        const field = "animation";
        let varname = <string>TestInitializer.getValue("putSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimation", "slideIndex");
        let varanimation = <model.SlideAnimation>TestInitializer.getValue("putSlideAnimation", "animation");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimation", "storage");
        varanimation = <model.SlideAnimation>TestInitializer.invalidizeValue(varanimation, field, "SlideAnimation", "putSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimation", field, varanimation).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setAnimation(varname, varslideIndex, varanimation, varpassword, varfolder, varstorage), "putSlideAnimation", field, varanimation);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimation", "slideIndex");
        let varanimation = <model.SlideAnimation>TestInitializer.getValue("putSlideAnimation", "animation");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimation", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimation", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setAnimation(varname, varslideIndex, varanimation, varpassword, varfolder, varstorage), "putSlideAnimation", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimation", "slideIndex");
        let varanimation = <model.SlideAnimation>TestInitializer.getValue("putSlideAnimation", "animation");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimation", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimation", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setAnimation(varname, varslideIndex, varanimation, varpassword, varfolder, varstorage), "putSlideAnimation", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlideAnimation", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimation", "slideIndex");
        let varanimation = <model.SlideAnimation>TestInitializer.getValue("putSlideAnimation", "animation");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimation", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimation", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimation", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlideAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimation", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setAnimation(varname, varslideIndex, varanimation, varpassword, varfolder, varstorage), "putSlideAnimation", field, varstorage);
            });
        });
    });
});

describe("Tests for updateAnimationEffect", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlideAnimationEffect", "name");
            let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "slideIndex");
            let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "effectIndex");
            let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationEffect", "effect");
            let varpassword = <string>TestInitializer.getValue("putSlideAnimationEffect", "password");
            let varfolder = <string>TestInitializer.getValue("putSlideAnimationEffect", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlideAnimationEffect", "storage");
            return TestInitializer.initialize("putSlideAnimationEffect", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), false, "putSlideAnimationEffect");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "slideIndex");
        let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "effectIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimationEffect", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimationEffect", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "putSlideAnimationEffect", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "slideIndex");
        let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "effectIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimationEffect", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimationEffect", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "putSlideAnimationEffect", field, varslideIndex);
            });
        });
    });

    it("invalid effectIndex test", () => {
        const field = "effectIndex";
        let varname = <string>TestInitializer.getValue("putSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "slideIndex");
        let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "effectIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimationEffect", "storage");
        vareffectIndex = <number>TestInitializer.invalidizeValue(vareffectIndex, field, "number", "putSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimationEffect", field, vareffectIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "putSlideAnimationEffect", field, vareffectIndex);
            });
        });
    });

    it("invalid effect test", () => {
        const field = "effect";
        let varname = <string>TestInitializer.getValue("putSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "slideIndex");
        let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "effectIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimationEffect", "storage");
        vareffect = <model.Effect>TestInitializer.invalidizeValue(vareffect, field, "Effect", "putSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimationEffect", field, vareffect).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "putSlideAnimationEffect", field, vareffect);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "slideIndex");
        let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "effectIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimationEffect", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimationEffect", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "putSlideAnimationEffect", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "slideIndex");
        let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "effectIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimationEffect", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimationEffect", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "putSlideAnimationEffect", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlideAnimationEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "slideIndex");
        let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationEffect", "effectIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimationEffect", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimationEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimationEffect", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlideAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimationEffect", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "putSlideAnimationEffect", field, varstorage);
            });
        });
    });
});

describe("Tests for updateAnimationInteractiveSequenceEffect", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "name");
            let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
            let varsequenceIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
            let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
            let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effect");
            let varpassword = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "password");
            let varfolder = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "storage");
            return TestInitializer.initialize("putSlideAnimationInteractiveSequenceEffect", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), false, "putSlideAnimationInteractiveSequenceEffect");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimationInteractiveSequenceEffect", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "putSlideAnimationInteractiveSequenceEffect", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimationInteractiveSequenceEffect", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "putSlideAnimationInteractiveSequenceEffect", field, varslideIndex);
            });
        });
    });

    it("invalid sequenceIndex test", () => {
        const field = "sequenceIndex";
        let varname = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "storage");
        varsequenceIndex = <number>TestInitializer.invalidizeValue(varsequenceIndex, field, "number", "putSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimationInteractiveSequenceEffect", field, varsequenceIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "putSlideAnimationInteractiveSequenceEffect", field, varsequenceIndex);
            });
        });
    });

    it("invalid effectIndex test", () => {
        const field = "effectIndex";
        let varname = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "storage");
        vareffectIndex = <number>TestInitializer.invalidizeValue(vareffectIndex, field, "number", "putSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimationInteractiveSequenceEffect", field, vareffectIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "putSlideAnimationInteractiveSequenceEffect", field, vareffectIndex);
            });
        });
    });

    it("invalid effect test", () => {
        const field = "effect";
        let varname = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "storage");
        vareffect = <model.Effect>TestInitializer.invalidizeValue(vareffect, field, "Effect", "putSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimationInteractiveSequenceEffect", field, vareffect).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "putSlideAnimationInteractiveSequenceEffect", field, vareffect);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimationInteractiveSequenceEffect", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "putSlideAnimationInteractiveSequenceEffect", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimationInteractiveSequenceEffect", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "putSlideAnimationInteractiveSequenceEffect", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        let varsequenceIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        let vareffectIndex = <number>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        let vareffect = <model.Effect>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "effect");
        let varpassword = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideAnimationInteractiveSequenceEffect", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlideAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideAnimationInteractiveSequenceEffect", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "putSlideAnimationInteractiveSequenceEffect", field, varstorage);
            });
        });
    });
});

describe("Tests for setSlideHeaderFooter", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlideHeaderFooter", "name");
            let varslideIndex = <number>TestInitializer.getValue("putSlideHeaderFooter", "slideIndex");
            let vardto = <model.HeaderFooter>TestInitializer.getValue("putSlideHeaderFooter", "dto");
            let varpassword = <string>TestInitializer.getValue("putSlideHeaderFooter", "password");
            let varfolder = <string>TestInitializer.getValue("putSlideHeaderFooter", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlideHeaderFooter", "storage");
            return TestInitializer.initialize("putSlideHeaderFooter", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), false, "putSlideHeaderFooter");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideHeaderFooter", "slideIndex");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("putSlideHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideHeaderFooter", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideHeaderFooter", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putSlideHeaderFooter", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideHeaderFooter", "slideIndex");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("putSlideHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideHeaderFooter", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideHeaderFooter", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putSlideHeaderFooter", field, varslideIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideHeaderFooter", "slideIndex");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("putSlideHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideHeaderFooter", "storage");
        vardto = <model.HeaderFooter>TestInitializer.invalidizeValue(vardto, field, "HeaderFooter", "putSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideHeaderFooter", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putSlideHeaderFooter", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideHeaderFooter", "slideIndex");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("putSlideHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideHeaderFooter", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideHeaderFooter", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putSlideHeaderFooter", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideHeaderFooter", "slideIndex");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("putSlideHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideHeaderFooter", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideHeaderFooter", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putSlideHeaderFooter", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlideHeaderFooter", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideHeaderFooter", "slideIndex");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("putSlideHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideHeaderFooter", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideHeaderFooter", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putSlideHeaderFooter", field, varstorage);
            });
        });
    });
});

describe("Tests for saveSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlideSaveAs", "name");
            let varslideIndex = <number>TestInitializer.getValue("putSlideSaveAs", "slideIndex");
            let varformat = <string>TestInitializer.getValue("putSlideSaveAs", "format");
            let varoutPath = <string>TestInitializer.getValue("putSlideSaveAs", "outPath");
            let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlideSaveAs", "options");
            let varwidth = <number>TestInitializer.getValue("putSlideSaveAs", "width");
            let varheight = <number>TestInitializer.getValue("putSlideSaveAs", "height");
            let varpassword = <string>TestInitializer.getValue("putSlideSaveAs", "password");
            let varfolder = <string>TestInitializer.getValue("putSlideSaveAs", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlideSaveAs", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("putSlideSaveAs", "fontsFolder");
            return TestInitializer.initialize("putSlideSaveAs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), false, "putSlideSaveAs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putSlideSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlideSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("putSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("putSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("putSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlideSaveAs", "fontsFolder");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSaveAs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "putSlideSaveAs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putSlideSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlideSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("putSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("putSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("putSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlideSaveAs", "fontsFolder");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSaveAs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "putSlideSaveAs", field, varslideIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("putSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putSlideSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlideSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("putSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("putSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("putSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlideSaveAs", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "putSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSaveAs", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "putSlideSaveAs", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let varname = <string>TestInitializer.getValue("putSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putSlideSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlideSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("putSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("putSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("putSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlideSaveAs", "fontsFolder");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "putSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSaveAs", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "putSlideSaveAs", field, varoutPath);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("putSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putSlideSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlideSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("putSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("putSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("putSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlideSaveAs", "fontsFolder");
        varoptions = <model.ExportOptions>TestInitializer.invalidizeValue(varoptions, field, "ExportOptions", "putSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSaveAs", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "putSlideSaveAs", field, varoptions);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let varname = <string>TestInitializer.getValue("putSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putSlideSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlideSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("putSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("putSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("putSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlideSaveAs", "fontsFolder");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "putSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSaveAs", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "putSlideSaveAs", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let varname = <string>TestInitializer.getValue("putSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putSlideSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlideSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("putSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("putSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("putSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlideSaveAs", "fontsFolder");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "putSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSaveAs", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "putSlideSaveAs", field, varheight);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putSlideSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlideSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("putSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("putSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("putSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlideSaveAs", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSaveAs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "putSlideSaveAs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putSlideSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlideSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("putSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("putSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("putSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlideSaveAs", "fontsFolder");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSaveAs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "putSlideSaveAs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putSlideSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlideSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("putSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("putSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("putSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlideSaveAs", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSaveAs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "putSlideSaveAs", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("putSlideSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSaveAs", "slideIndex");
        let varformat = <string>TestInitializer.getValue("putSlideSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlideSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlideSaveAs", "options");
        let varwidth = <number>TestInitializer.getValue("putSlideSaveAs", "width");
        let varheight = <number>TestInitializer.getValue("putSlideSaveAs", "height");
        let varpassword = <string>TestInitializer.getValue("putSlideSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlideSaveAs", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "putSlideSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSaveAs", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "putSlideSaveAs", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for updateShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlideShapeInfo", "name");
            let varslideIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "shapeIndex");
            let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideShapeInfo", "dto");
            let varpassword = <string>TestInitializer.getValue("putSlideShapeInfo", "password");
            let varfolder = <string>TestInitializer.getValue("putSlideShapeInfo", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlideShapeInfo", "storage");
            return TestInitializer.initialize("putSlideShapeInfo", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), false, "putSlideShapeInfo");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlideShapeInfo", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideShapeInfo", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideShapeInfo", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideShapeInfo", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideShapeInfo", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlideShapeInfo");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideShapeInfo", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putSlideShapeInfo", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putSlideShapeInfo", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideShapeInfo", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideShapeInfo", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideShapeInfo", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideShapeInfo", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putSlideShapeInfo");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideShapeInfo", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putSlideShapeInfo", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("putSlideShapeInfo", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideShapeInfo", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideShapeInfo", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideShapeInfo", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideShapeInfo", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putSlideShapeInfo");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideShapeInfo", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putSlideShapeInfo", field, varshapeIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putSlideShapeInfo", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideShapeInfo", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideShapeInfo", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideShapeInfo", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideShapeInfo", "storage");
        vardto = <model.ShapeBase>TestInitializer.invalidizeValue(vardto, field, "ShapeBase", "putSlideShapeInfo");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideShapeInfo", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putSlideShapeInfo", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlideShapeInfo", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideShapeInfo", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideShapeInfo", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideShapeInfo", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideShapeInfo", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlideShapeInfo");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideShapeInfo", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putSlideShapeInfo", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlideShapeInfo", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideShapeInfo", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideShapeInfo", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideShapeInfo", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideShapeInfo", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlideShapeInfo");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideShapeInfo", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putSlideShapeInfo", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlideShapeInfo", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putSlideShapeInfo", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideShapeInfo", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideShapeInfo", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideShapeInfo", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideShapeInfo", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlideShapeInfo");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideShapeInfo", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putSlideShapeInfo", field, varstorage);
            });
        });
    });
});

describe("Tests for updateSubshape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlideSubshapeInfo", "name");
            let varslideIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "slideIndex");
            let varpath = <string>TestInitializer.getValue("putSlideSubshapeInfo", "path");
            let varshapeIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "shapeIndex");
            let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideSubshapeInfo", "dto");
            let varpassword = <string>TestInitializer.getValue("putSlideSubshapeInfo", "password");
            let varfolder = <string>TestInitializer.getValue("putSlideSubshapeInfo", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlideSubshapeInfo", "storage");
            return TestInitializer.initialize("putSlideSubshapeInfo", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), false, "putSlideSubshapeInfo");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlideSubshapeInfo", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSlideSubshapeInfo", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideSubshapeInfo", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideSubshapeInfo", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSubshapeInfo", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSubshapeInfo", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlideSubshapeInfo");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSubshapeInfo", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putSlideSubshapeInfo", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putSlideSubshapeInfo", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSlideSubshapeInfo", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideSubshapeInfo", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideSubshapeInfo", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSubshapeInfo", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSubshapeInfo", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putSlideSubshapeInfo");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSubshapeInfo", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putSlideSubshapeInfo", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("putSlideSubshapeInfo", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSlideSubshapeInfo", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideSubshapeInfo", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideSubshapeInfo", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSubshapeInfo", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSubshapeInfo", "storage");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "putSlideSubshapeInfo");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSubshapeInfo", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putSlideSubshapeInfo", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("putSlideSubshapeInfo", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSlideSubshapeInfo", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideSubshapeInfo", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideSubshapeInfo", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSubshapeInfo", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSubshapeInfo", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putSlideSubshapeInfo");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSubshapeInfo", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putSlideSubshapeInfo", field, varshapeIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putSlideSubshapeInfo", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSlideSubshapeInfo", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideSubshapeInfo", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideSubshapeInfo", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSubshapeInfo", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSubshapeInfo", "storage");
        vardto = <model.ShapeBase>TestInitializer.invalidizeValue(vardto, field, "ShapeBase", "putSlideSubshapeInfo");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSubshapeInfo", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putSlideSubshapeInfo", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlideSubshapeInfo", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSlideSubshapeInfo", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideSubshapeInfo", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideSubshapeInfo", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSubshapeInfo", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSubshapeInfo", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlideSubshapeInfo");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSubshapeInfo", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putSlideSubshapeInfo", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlideSubshapeInfo", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSlideSubshapeInfo", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideSubshapeInfo", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideSubshapeInfo", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSubshapeInfo", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSubshapeInfo", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlideSubshapeInfo");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSubshapeInfo", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putSlideSubshapeInfo", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlideSubshapeInfo", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSlideSubshapeInfo", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSlideSubshapeInfo", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putSlideSubshapeInfo", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlideSubshapeInfo", "password");
        let varfolder = <string>TestInitializer.getValue("putSlideSubshapeInfo", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlideSubshapeInfo", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlideSubshapeInfo");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlideSubshapeInfo", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putSlideSubshapeInfo", field, varstorage);
            });
        });
    });
});

describe("Tests for convertAndSave", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("putSlidesConvert", "document");
            let varformat = <string>TestInitializer.getValue("putSlidesConvert", "format");
            let varoutPath = <string>TestInitializer.getValue("putSlidesConvert", "outPath");
            let varpassword = <string>TestInitializer.getValue("putSlidesConvert", "password");
            let varstorage = <string>TestInitializer.getValue("putSlidesConvert", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("putSlidesConvert", "fontsFolder");
            return TestInitializer.initialize("putSlidesConvert", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().convertAndSave(vardocument, varformat, varoutPath, varpassword, varstorage, varfontsFolder), false, "putSlidesConvert");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putSlidesConvert", "document");
        let varformat = <string>TestInitializer.getValue("putSlidesConvert", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlidesConvert", "outPath");
        let varpassword = <string>TestInitializer.getValue("putSlidesConvert", "password");
        let varstorage = <string>TestInitializer.getValue("putSlidesConvert", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlidesConvert", "fontsFolder");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "putSlidesConvert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesConvert", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convertAndSave(vardocument, varformat, varoutPath, varpassword, varstorage, varfontsFolder), "putSlidesConvert", field, vardocument);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putSlidesConvert", "document");
        let varformat = <string>TestInitializer.getValue("putSlidesConvert", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlidesConvert", "outPath");
        let varpassword = <string>TestInitializer.getValue("putSlidesConvert", "password");
        let varstorage = <string>TestInitializer.getValue("putSlidesConvert", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlidesConvert", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "putSlidesConvert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesConvert", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convertAndSave(vardocument, varformat, varoutPath, varpassword, varstorage, varfontsFolder), "putSlidesConvert", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putSlidesConvert", "document");
        let varformat = <string>TestInitializer.getValue("putSlidesConvert", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlidesConvert", "outPath");
        let varpassword = <string>TestInitializer.getValue("putSlidesConvert", "password");
        let varstorage = <string>TestInitializer.getValue("putSlidesConvert", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlidesConvert", "fontsFolder");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "putSlidesConvert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesConvert", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convertAndSave(vardocument, varformat, varoutPath, varpassword, varstorage, varfontsFolder), "putSlidesConvert", field, varoutPath);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putSlidesConvert", "document");
        let varformat = <string>TestInitializer.getValue("putSlidesConvert", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlidesConvert", "outPath");
        let varpassword = <string>TestInitializer.getValue("putSlidesConvert", "password");
        let varstorage = <string>TestInitializer.getValue("putSlidesConvert", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlidesConvert", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlidesConvert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesConvert", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convertAndSave(vardocument, varformat, varoutPath, varpassword, varstorage, varfontsFolder), "putSlidesConvert", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putSlidesConvert", "document");
        let varformat = <string>TestInitializer.getValue("putSlidesConvert", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlidesConvert", "outPath");
        let varpassword = <string>TestInitializer.getValue("putSlidesConvert", "password");
        let varstorage = <string>TestInitializer.getValue("putSlidesConvert", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlidesConvert", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlidesConvert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesConvert", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convertAndSave(vardocument, varformat, varoutPath, varpassword, varstorage, varfontsFolder), "putSlidesConvert", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("putSlidesConvert", "document");
        let varformat = <string>TestInitializer.getValue("putSlidesConvert", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlidesConvert", "outPath");
        let varpassword = <string>TestInitializer.getValue("putSlidesConvert", "password");
        let varstorage = <string>TestInitializer.getValue("putSlidesConvert", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlidesConvert", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "putSlidesConvert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesConvert", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convertAndSave(vardocument, varformat, varoutPath, varpassword, varstorage, varfontsFolder), "putSlidesConvert", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for putSlidesDocumentFromHtml", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "name");
            let varhtml = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "html");
            let varpassword = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "password");
            let varfolder = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "storage");
            return TestInitializer.initialize("putSlidesDocumentFromHtml", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().putSlidesDocumentFromHtml(varname, varhtml, varpassword, varfolder, varstorage), false, "putSlidesDocumentFromHtml");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "name");
        let varhtml = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "html");
        let varpassword = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlidesDocumentFromHtml");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesDocumentFromHtml", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().putSlidesDocumentFromHtml(varname, varhtml, varpassword, varfolder, varstorage), "putSlidesDocumentFromHtml", field, varname);
            });
        });
    });

    it("invalid html test", () => {
        const field = "html";
        let varname = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "name");
        let varhtml = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "html");
        let varpassword = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "storage");
        varhtml = <string>TestInitializer.invalidizeValue(varhtml, field, "string", "putSlidesDocumentFromHtml");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesDocumentFromHtml", field, varhtml).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().putSlidesDocumentFromHtml(varname, varhtml, varpassword, varfolder, varstorage), "putSlidesDocumentFromHtml", field, varhtml);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "name");
        let varhtml = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "html");
        let varpassword = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlidesDocumentFromHtml");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesDocumentFromHtml", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().putSlidesDocumentFromHtml(varname, varhtml, varpassword, varfolder, varstorage), "putSlidesDocumentFromHtml", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "name");
        let varhtml = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "html");
        let varpassword = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlidesDocumentFromHtml");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesDocumentFromHtml", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().putSlidesDocumentFromHtml(varname, varhtml, varpassword, varfolder, varstorage), "putSlidesDocumentFromHtml", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "name");
        let varhtml = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "html");
        let varpassword = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesDocumentFromHtml", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlidesDocumentFromHtml");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesDocumentFromHtml", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().putSlidesDocumentFromHtml(varname, varhtml, varpassword, varfolder, varstorage), "putSlidesDocumentFromHtml", field, varstorage);
            });
        });
    });
});

describe("Tests for setPresentationHeaderFooter", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlidesHeaderFooter", "name");
            let vardto = <model.HeaderFooter>TestInitializer.getValue("putSlidesHeaderFooter", "dto");
            let varpassword = <string>TestInitializer.getValue("putSlidesHeaderFooter", "password");
            let varfolder = <string>TestInitializer.getValue("putSlidesHeaderFooter", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlidesHeaderFooter", "storage");
            return TestInitializer.initialize("putSlidesHeaderFooter", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setPresentationHeaderFooter(varname, vardto, varpassword, varfolder, varstorage), false, "putSlidesHeaderFooter");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlidesHeaderFooter", "name");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("putSlidesHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesHeaderFooter", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlidesHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesHeaderFooter", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setPresentationHeaderFooter(varname, vardto, varpassword, varfolder, varstorage), "putSlidesHeaderFooter", field, varname);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putSlidesHeaderFooter", "name");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("putSlidesHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesHeaderFooter", "storage");
        vardto = <model.HeaderFooter>TestInitializer.invalidizeValue(vardto, field, "HeaderFooter", "putSlidesHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesHeaderFooter", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setPresentationHeaderFooter(varname, vardto, varpassword, varfolder, varstorage), "putSlidesHeaderFooter", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlidesHeaderFooter", "name");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("putSlidesHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesHeaderFooter", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlidesHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesHeaderFooter", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setPresentationHeaderFooter(varname, vardto, varpassword, varfolder, varstorage), "putSlidesHeaderFooter", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlidesHeaderFooter", "name");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("putSlidesHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesHeaderFooter", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlidesHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesHeaderFooter", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setPresentationHeaderFooter(varname, vardto, varpassword, varfolder, varstorage), "putSlidesHeaderFooter", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlidesHeaderFooter", "name");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("putSlidesHeaderFooter", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesHeaderFooter", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesHeaderFooter", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesHeaderFooter", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlidesHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesHeaderFooter", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setPresentationHeaderFooter(varname, vardto, varpassword, varfolder, varstorage), "putSlidesHeaderFooter", field, varstorage);
            });
        });
    });
});

describe("Tests for mergeAndSaveOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varoutPath = <string>TestInitializer.getValue("putSlidesMerge", "outPath");
            let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("putSlidesMerge", "files");
            let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("putSlidesMerge", "request");
            let varpassword = <string>TestInitializer.getValue("putSlidesMerge", "password");
            let varstorage = <string>TestInitializer.getValue("putSlidesMerge", "storage");
            return TestInitializer.initialize("putSlidesMerge", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().mergeAndSaveOnline(varoutPath, varfiles, varrequest, varpassword, varstorage), false, "putSlidesMerge");
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let varoutPath = <string>TestInitializer.getValue("putSlidesMerge", "outPath");
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("putSlidesMerge", "files");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("putSlidesMerge", "request");
        let varpassword = <string>TestInitializer.getValue("putSlidesMerge", "password");
        let varstorage = <string>TestInitializer.getValue("putSlidesMerge", "storage");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "putSlidesMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesMerge", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().mergeAndSaveOnline(varoutPath, varfiles, varrequest, varpassword, varstorage), "putSlidesMerge", field, varoutPath);
            });
        });
    });

    it("invalid files test", () => {
        const field = "files";
        let varoutPath = <string>TestInitializer.getValue("putSlidesMerge", "outPath");
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("putSlidesMerge", "files");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("putSlidesMerge", "request");
        let varpassword = <string>TestInitializer.getValue("putSlidesMerge", "password");
        let varstorage = <string>TestInitializer.getValue("putSlidesMerge", "storage");
        varfiles = <Array<Buffer>>TestInitializer.invalidizeValue(varfiles, field, "Array&lt;Buffer&gt;", "putSlidesMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesMerge", field, varfiles).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().mergeAndSaveOnline(varoutPath, varfiles, varrequest, varpassword, varstorage), "putSlidesMerge", field, varfiles);
            });
        });
    });

    it("invalid request test", () => {
        const field = "request";
        let varoutPath = <string>TestInitializer.getValue("putSlidesMerge", "outPath");
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("putSlidesMerge", "files");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("putSlidesMerge", "request");
        let varpassword = <string>TestInitializer.getValue("putSlidesMerge", "password");
        let varstorage = <string>TestInitializer.getValue("putSlidesMerge", "storage");
        varrequest = <model.OrderedMergeRequest>TestInitializer.invalidizeValue(varrequest, field, "OrderedMergeRequest", "putSlidesMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesMerge", field, varrequest).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().mergeAndSaveOnline(varoutPath, varfiles, varrequest, varpassword, varstorage), "putSlidesMerge", field, varrequest);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varoutPath = <string>TestInitializer.getValue("putSlidesMerge", "outPath");
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("putSlidesMerge", "files");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("putSlidesMerge", "request");
        let varpassword = <string>TestInitializer.getValue("putSlidesMerge", "password");
        let varstorage = <string>TestInitializer.getValue("putSlidesMerge", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlidesMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesMerge", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().mergeAndSaveOnline(varoutPath, varfiles, varrequest, varpassword, varstorage), "putSlidesMerge", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varoutPath = <string>TestInitializer.getValue("putSlidesMerge", "outPath");
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("putSlidesMerge", "files");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("putSlidesMerge", "request");
        let varpassword = <string>TestInitializer.getValue("putSlidesMerge", "password");
        let varstorage = <string>TestInitializer.getValue("putSlidesMerge", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlidesMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesMerge", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().mergeAndSaveOnline(varoutPath, varfiles, varrequest, varpassword, varstorage), "putSlidesMerge", field, varstorage);
            });
        });
    });
});

describe("Tests for setProtectionProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlidesProtectionProperties", "name");
            let vardto = <model.ProtectionProperties>TestInitializer.getValue("putSlidesProtectionProperties", "dto");
            let varpassword = <string>TestInitializer.getValue("putSlidesProtectionProperties", "password");
            let varfolder = <string>TestInitializer.getValue("putSlidesProtectionProperties", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlidesProtectionProperties", "storage");
            return TestInitializer.initialize("putSlidesProtectionProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setProtectionProperties(varname, vardto, varpassword, varfolder, varstorage), false, "putSlidesProtectionProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlidesProtectionProperties", "name");
        let vardto = <model.ProtectionProperties>TestInitializer.getValue("putSlidesProtectionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesProtectionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesProtectionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesProtectionProperties", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlidesProtectionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesProtectionProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setProtectionProperties(varname, vardto, varpassword, varfolder, varstorage), "putSlidesProtectionProperties", field, varname);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putSlidesProtectionProperties", "name");
        let vardto = <model.ProtectionProperties>TestInitializer.getValue("putSlidesProtectionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesProtectionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesProtectionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesProtectionProperties", "storage");
        vardto = <model.ProtectionProperties>TestInitializer.invalidizeValue(vardto, field, "ProtectionProperties", "putSlidesProtectionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesProtectionProperties", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setProtectionProperties(varname, vardto, varpassword, varfolder, varstorage), "putSlidesProtectionProperties", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlidesProtectionProperties", "name");
        let vardto = <model.ProtectionProperties>TestInitializer.getValue("putSlidesProtectionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesProtectionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesProtectionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesProtectionProperties", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlidesProtectionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesProtectionProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setProtectionProperties(varname, vardto, varpassword, varfolder, varstorage), "putSlidesProtectionProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlidesProtectionProperties", "name");
        let vardto = <model.ProtectionProperties>TestInitializer.getValue("putSlidesProtectionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesProtectionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesProtectionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesProtectionProperties", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlidesProtectionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesProtectionProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setProtectionProperties(varname, vardto, varpassword, varfolder, varstorage), "putSlidesProtectionProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlidesProtectionProperties", "name");
        let vardto = <model.ProtectionProperties>TestInitializer.getValue("putSlidesProtectionProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesProtectionProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesProtectionProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesProtectionProperties", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlidesProtectionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesProtectionProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setProtectionProperties(varname, vardto, varpassword, varfolder, varstorage), "putSlidesProtectionProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for savePresentation", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlidesSaveAs", "name");
            let varformat = <string>TestInitializer.getValue("putSlidesSaveAs", "format");
            let varoutPath = <string>TestInitializer.getValue("putSlidesSaveAs", "outPath");
            let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlidesSaveAs", "options");
            let varpassword = <string>TestInitializer.getValue("putSlidesSaveAs", "password");
            let varfolder = <string>TestInitializer.getValue("putSlidesSaveAs", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlidesSaveAs", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("putSlidesSaveAs", "fontsFolder");
            return TestInitializer.initialize("putSlidesSaveAs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), false, "putSlidesSaveAs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlidesSaveAs", "name");
        let varformat = <string>TestInitializer.getValue("putSlidesSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlidesSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlidesSaveAs", "options");
        let varpassword = <string>TestInitializer.getValue("putSlidesSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlidesSaveAs", "fontsFolder");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlidesSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSaveAs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "putSlidesSaveAs", field, varname);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("putSlidesSaveAs", "name");
        let varformat = <string>TestInitializer.getValue("putSlidesSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlidesSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlidesSaveAs", "options");
        let varpassword = <string>TestInitializer.getValue("putSlidesSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlidesSaveAs", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "putSlidesSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSaveAs", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "putSlidesSaveAs", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let varname = <string>TestInitializer.getValue("putSlidesSaveAs", "name");
        let varformat = <string>TestInitializer.getValue("putSlidesSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlidesSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlidesSaveAs", "options");
        let varpassword = <string>TestInitializer.getValue("putSlidesSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlidesSaveAs", "fontsFolder");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "putSlidesSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSaveAs", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "putSlidesSaveAs", field, varoutPath);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("putSlidesSaveAs", "name");
        let varformat = <string>TestInitializer.getValue("putSlidesSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlidesSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlidesSaveAs", "options");
        let varpassword = <string>TestInitializer.getValue("putSlidesSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlidesSaveAs", "fontsFolder");
        varoptions = <model.ExportOptions>TestInitializer.invalidizeValue(varoptions, field, "ExportOptions", "putSlidesSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSaveAs", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "putSlidesSaveAs", field, varoptions);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlidesSaveAs", "name");
        let varformat = <string>TestInitializer.getValue("putSlidesSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlidesSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlidesSaveAs", "options");
        let varpassword = <string>TestInitializer.getValue("putSlidesSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlidesSaveAs", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlidesSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSaveAs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "putSlidesSaveAs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlidesSaveAs", "name");
        let varformat = <string>TestInitializer.getValue("putSlidesSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlidesSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlidesSaveAs", "options");
        let varpassword = <string>TestInitializer.getValue("putSlidesSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlidesSaveAs", "fontsFolder");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlidesSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSaveAs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "putSlidesSaveAs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlidesSaveAs", "name");
        let varformat = <string>TestInitializer.getValue("putSlidesSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlidesSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlidesSaveAs", "options");
        let varpassword = <string>TestInitializer.getValue("putSlidesSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlidesSaveAs", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlidesSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSaveAs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "putSlidesSaveAs", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("putSlidesSaveAs", "name");
        let varformat = <string>TestInitializer.getValue("putSlidesSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSlidesSaveAs", "outPath");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("putSlidesSaveAs", "options");
        let varpassword = <string>TestInitializer.getValue("putSlidesSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSlidesSaveAs", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "putSlidesSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSaveAs", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "putSlidesSaveAs", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for setDocumentProperty", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "name");
            let varpropertyName = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "propertyName");
            let varproperty = <model.DocumentProperty>TestInitializer.getValue("putSlidesSetDocumentProperty", "property");
            let varpassword = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "password");
            let varfolder = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "storage");
            return TestInitializer.initialize("putSlidesSetDocumentProperty", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setDocumentProperty(varname, varpropertyName, varproperty, varpassword, varfolder, varstorage), false, "putSlidesSetDocumentProperty");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "propertyName");
        let varproperty = <model.DocumentProperty>TestInitializer.getValue("putSlidesSetDocumentProperty", "property");
        let varpassword = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlidesSetDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSetDocumentProperty", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperty(varname, varpropertyName, varproperty, varpassword, varfolder, varstorage), "putSlidesSetDocumentProperty", field, varname);
            });
        });
    });

    it("invalid propertyName test", () => {
        const field = "propertyName";
        let varname = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "propertyName");
        let varproperty = <model.DocumentProperty>TestInitializer.getValue("putSlidesSetDocumentProperty", "property");
        let varpassword = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "storage");
        varpropertyName = <string>TestInitializer.invalidizeValue(varpropertyName, field, "string", "putSlidesSetDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSetDocumentProperty", field, varpropertyName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperty(varname, varpropertyName, varproperty, varpassword, varfolder, varstorage), "putSlidesSetDocumentProperty", field, varpropertyName);
            });
        });
    });

    it("invalid property test", () => {
        const field = "property";
        let varname = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "propertyName");
        let varproperty = <model.DocumentProperty>TestInitializer.getValue("putSlidesSetDocumentProperty", "property");
        let varpassword = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "storage");
        varproperty = <model.DocumentProperty>TestInitializer.invalidizeValue(varproperty, field, "DocumentProperty", "putSlidesSetDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSetDocumentProperty", field, varproperty).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperty(varname, varpropertyName, varproperty, varpassword, varfolder, varstorage), "putSlidesSetDocumentProperty", field, varproperty);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "propertyName");
        let varproperty = <model.DocumentProperty>TestInitializer.getValue("putSlidesSetDocumentProperty", "property");
        let varpassword = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlidesSetDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSetDocumentProperty", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperty(varname, varpropertyName, varproperty, varpassword, varfolder, varstorage), "putSlidesSetDocumentProperty", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "propertyName");
        let varproperty = <model.DocumentProperty>TestInitializer.getValue("putSlidesSetDocumentProperty", "property");
        let varpassword = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlidesSetDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSetDocumentProperty", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperty(varname, varpropertyName, varproperty, varpassword, varfolder, varstorage), "putSlidesSetDocumentProperty", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "name");
        let varpropertyName = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "propertyName");
        let varproperty = <model.DocumentProperty>TestInitializer.getValue("putSlidesSetDocumentProperty", "property");
        let varpassword = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSetDocumentProperty", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlidesSetDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSetDocumentProperty", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperty(varname, varpropertyName, varproperty, varpassword, varfolder, varstorage), "putSlidesSetDocumentProperty", field, varstorage);
            });
        });
    });
});

describe("Tests for updateSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlidesSlide", "name");
            let varslideIndex = <number>TestInitializer.getValue("putSlidesSlide", "slideIndex");
            let varslideDto = <model.Slide>TestInitializer.getValue("putSlidesSlide", "slideDto");
            let varpassword = <string>TestInitializer.getValue("putSlidesSlide", "password");
            let varfolder = <string>TestInitializer.getValue("putSlidesSlide", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlidesSlide", "storage");
            return TestInitializer.initialize("putSlidesSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), false, "putSlidesSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlidesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlide", "slideIndex");
        let varslideDto = <model.Slide>TestInitializer.getValue("putSlidesSlide", "slideDto");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlide", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlidesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "putSlidesSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putSlidesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlide", "slideIndex");
        let varslideDto = <model.Slide>TestInitializer.getValue("putSlidesSlide", "slideDto");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlide", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putSlidesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "putSlidesSlide", field, varslideIndex);
            });
        });
    });

    it("invalid slideDto test", () => {
        const field = "slideDto";
        let varname = <string>TestInitializer.getValue("putSlidesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlide", "slideIndex");
        let varslideDto = <model.Slide>TestInitializer.getValue("putSlidesSlide", "slideDto");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlide", "storage");
        varslideDto = <model.Slide>TestInitializer.invalidizeValue(varslideDto, field, "Slide", "putSlidesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlide", field, varslideDto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "putSlidesSlide", field, varslideDto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlidesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlide", "slideIndex");
        let varslideDto = <model.Slide>TestInitializer.getValue("putSlidesSlide", "slideDto");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlide", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlidesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "putSlidesSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlidesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlide", "slideIndex");
        let varslideDto = <model.Slide>TestInitializer.getValue("putSlidesSlide", "slideDto");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlide", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlidesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "putSlidesSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlidesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlide", "slideIndex");
        let varslideDto = <model.Slide>TestInitializer.getValue("putSlidesSlide", "slideDto");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlide", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlidesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "putSlidesSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for setBackground", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlidesSlideBackground", "name");
            let varslideIndex = <number>TestInitializer.getValue("putSlidesSlideBackground", "slideIndex");
            let varbackground = <model.SlideBackground>TestInitializer.getValue("putSlidesSlideBackground", "background");
            let varpassword = <string>TestInitializer.getValue("putSlidesSlideBackground", "password");
            let varfolder = <string>TestInitializer.getValue("putSlidesSlideBackground", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlidesSlideBackground", "storage");
            return TestInitializer.initialize("putSlidesSlideBackground", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setBackground(varname, varslideIndex, varbackground, varpassword, varfolder, varstorage), false, "putSlidesSlideBackground");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlideBackground", "slideIndex");
        let varbackground = <model.SlideBackground>TestInitializer.getValue("putSlidesSlideBackground", "background");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideBackground", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideBackground", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackground(varname, varslideIndex, varbackground, varpassword, varfolder, varstorage), "putSlidesSlideBackground", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlideBackground", "slideIndex");
        let varbackground = <model.SlideBackground>TestInitializer.getValue("putSlidesSlideBackground", "background");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideBackground", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideBackground", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackground(varname, varslideIndex, varbackground, varpassword, varfolder, varstorage), "putSlidesSlideBackground", field, varslideIndex);
            });
        });
    });

    it("invalid background test", () => {
        const field = "background";
        let varname = <string>TestInitializer.getValue("putSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlideBackground", "slideIndex");
        let varbackground = <model.SlideBackground>TestInitializer.getValue("putSlidesSlideBackground", "background");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideBackground", "storage");
        varbackground = <model.SlideBackground>TestInitializer.invalidizeValue(varbackground, field, "SlideBackground", "putSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideBackground", field, varbackground).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackground(varname, varslideIndex, varbackground, varpassword, varfolder, varstorage), "putSlidesSlideBackground", field, varbackground);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlideBackground", "slideIndex");
        let varbackground = <model.SlideBackground>TestInitializer.getValue("putSlidesSlideBackground", "background");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideBackground", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideBackground", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackground(varname, varslideIndex, varbackground, varpassword, varfolder, varstorage), "putSlidesSlideBackground", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlideBackground", "slideIndex");
        let varbackground = <model.SlideBackground>TestInitializer.getValue("putSlidesSlideBackground", "background");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideBackground", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideBackground", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackground(varname, varslideIndex, varbackground, varpassword, varfolder, varstorage), "putSlidesSlideBackground", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlidesSlideBackground", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlideBackground", "slideIndex");
        let varbackground = <model.SlideBackground>TestInitializer.getValue("putSlidesSlideBackground", "background");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideBackground", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideBackground", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideBackground", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlidesSlideBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideBackground", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackground(varname, varslideIndex, varbackground, varpassword, varfolder, varstorage), "putSlidesSlideBackground", field, varstorage);
            });
        });
    });
});

describe("Tests for setBackgroundColor", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "name");
            let varslideIndex = <number>TestInitializer.getValue("putSlidesSlideBackgroundColor", "slideIndex");
            let varcolor = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "color");
            let varpassword = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "password");
            let varfolder = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "storage");
            return TestInitializer.initialize("putSlidesSlideBackgroundColor", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setBackgroundColor(varname, varslideIndex, varcolor, varpassword, varfolder, varstorage), false, "putSlidesSlideBackgroundColor");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlideBackgroundColor", "slideIndex");
        let varcolor = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "color");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlidesSlideBackgroundColor");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideBackgroundColor", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackgroundColor(varname, varslideIndex, varcolor, varpassword, varfolder, varstorage), "putSlidesSlideBackgroundColor", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlideBackgroundColor", "slideIndex");
        let varcolor = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "color");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putSlidesSlideBackgroundColor");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideBackgroundColor", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackgroundColor(varname, varslideIndex, varcolor, varpassword, varfolder, varstorage), "putSlidesSlideBackgroundColor", field, varslideIndex);
            });
        });
    });

    it("invalid color test", () => {
        const field = "color";
        let varname = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlideBackgroundColor", "slideIndex");
        let varcolor = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "color");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "storage");
        varcolor = <string>TestInitializer.invalidizeValue(varcolor, field, "string", "putSlidesSlideBackgroundColor");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideBackgroundColor", field, varcolor).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackgroundColor(varname, varslideIndex, varcolor, varpassword, varfolder, varstorage), "putSlidesSlideBackgroundColor", field, varcolor);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlideBackgroundColor", "slideIndex");
        let varcolor = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "color");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlidesSlideBackgroundColor");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideBackgroundColor", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackgroundColor(varname, varslideIndex, varcolor, varpassword, varfolder, varstorage), "putSlidesSlideBackgroundColor", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlideBackgroundColor", "slideIndex");
        let varcolor = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "color");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlidesSlideBackgroundColor");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideBackgroundColor", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackgroundColor(varname, varslideIndex, varcolor, varpassword, varfolder, varstorage), "putSlidesSlideBackgroundColor", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSlidesSlideBackgroundColor", "slideIndex");
        let varcolor = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "color");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideBackgroundColor", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlidesSlideBackgroundColor");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideBackgroundColor", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackgroundColor(varname, varslideIndex, varcolor, varpassword, varfolder, varstorage), "putSlidesSlideBackgroundColor", field, varstorage);
            });
        });
    });
});

describe("Tests for setSlideProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlidesSlideProperties", "name");
            let vardto = <model.SlideProperties>TestInitializer.getValue("putSlidesSlideProperties", "dto");
            let varpassword = <string>TestInitializer.getValue("putSlidesSlideProperties", "password");
            let varfolder = <string>TestInitializer.getValue("putSlidesSlideProperties", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlidesSlideProperties", "storage");
            return TestInitializer.initialize("putSlidesSlideProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setSlideProperties(varname, vardto, varpassword, varfolder, varstorage), false, "putSlidesSlideProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlidesSlideProperties", "name");
        let vardto = <model.SlideProperties>TestInitializer.getValue("putSlidesSlideProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideProperties", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlidesSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideProperties(varname, vardto, varpassword, varfolder, varstorage), "putSlidesSlideProperties", field, varname);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putSlidesSlideProperties", "name");
        let vardto = <model.SlideProperties>TestInitializer.getValue("putSlidesSlideProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideProperties", "storage");
        vardto = <model.SlideProperties>TestInitializer.invalidizeValue(vardto, field, "SlideProperties", "putSlidesSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideProperties", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideProperties(varname, vardto, varpassword, varfolder, varstorage), "putSlidesSlideProperties", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlidesSlideProperties", "name");
        let vardto = <model.SlideProperties>TestInitializer.getValue("putSlidesSlideProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideProperties", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlidesSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideProperties(varname, vardto, varpassword, varfolder, varstorage), "putSlidesSlideProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlidesSlideProperties", "name");
        let vardto = <model.SlideProperties>TestInitializer.getValue("putSlidesSlideProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideProperties", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlidesSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideProperties(varname, vardto, varpassword, varfolder, varstorage), "putSlidesSlideProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlidesSlideProperties", "name");
        let vardto = <model.SlideProperties>TestInitializer.getValue("putSlidesSlideProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideProperties", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlidesSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideProperties(varname, vardto, varpassword, varfolder, varstorage), "putSlidesSlideProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for putSlidesSlideSize", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlidesSlideSize", "name");
            let varwidth = <number>TestInitializer.getValue("putSlidesSlideSize", "width");
            let varheight = <number>TestInitializer.getValue("putSlidesSlideSize", "height");
            let varsizeType = <string>TestInitializer.getValue("putSlidesSlideSize", "sizeType");
            let varscaleType = <string>TestInitializer.getValue("putSlidesSlideSize", "scaleType");
            let varpassword = <string>TestInitializer.getValue("putSlidesSlideSize", "password");
            let varfolder = <string>TestInitializer.getValue("putSlidesSlideSize", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlidesSlideSize", "storage");
            return TestInitializer.initialize("putSlidesSlideSize", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().putSlidesSlideSize(varname, varwidth, varheight, varsizeType, varscaleType, varpassword, varfolder, varstorage), false, "putSlidesSlideSize");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlidesSlideSize", "name");
        let varwidth = <number>TestInitializer.getValue("putSlidesSlideSize", "width");
        let varheight = <number>TestInitializer.getValue("putSlidesSlideSize", "height");
        let varsizeType = <string>TestInitializer.getValue("putSlidesSlideSize", "sizeType");
        let varscaleType = <string>TestInitializer.getValue("putSlidesSlideSize", "scaleType");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideSize", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideSize", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideSize", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlidesSlideSize");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideSize", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().putSlidesSlideSize(varname, varwidth, varheight, varsizeType, varscaleType, varpassword, varfolder, varstorage), "putSlidesSlideSize", field, varname);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let varname = <string>TestInitializer.getValue("putSlidesSlideSize", "name");
        let varwidth = <number>TestInitializer.getValue("putSlidesSlideSize", "width");
        let varheight = <number>TestInitializer.getValue("putSlidesSlideSize", "height");
        let varsizeType = <string>TestInitializer.getValue("putSlidesSlideSize", "sizeType");
        let varscaleType = <string>TestInitializer.getValue("putSlidesSlideSize", "scaleType");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideSize", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideSize", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideSize", "storage");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "putSlidesSlideSize");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideSize", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().putSlidesSlideSize(varname, varwidth, varheight, varsizeType, varscaleType, varpassword, varfolder, varstorage), "putSlidesSlideSize", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let varname = <string>TestInitializer.getValue("putSlidesSlideSize", "name");
        let varwidth = <number>TestInitializer.getValue("putSlidesSlideSize", "width");
        let varheight = <number>TestInitializer.getValue("putSlidesSlideSize", "height");
        let varsizeType = <string>TestInitializer.getValue("putSlidesSlideSize", "sizeType");
        let varscaleType = <string>TestInitializer.getValue("putSlidesSlideSize", "scaleType");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideSize", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideSize", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideSize", "storage");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "putSlidesSlideSize");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideSize", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().putSlidesSlideSize(varname, varwidth, varheight, varsizeType, varscaleType, varpassword, varfolder, varstorage), "putSlidesSlideSize", field, varheight);
            });
        });
    });

    it("invalid sizeType test", () => {
        const field = "sizeType";
        let varname = <string>TestInitializer.getValue("putSlidesSlideSize", "name");
        let varwidth = <number>TestInitializer.getValue("putSlidesSlideSize", "width");
        let varheight = <number>TestInitializer.getValue("putSlidesSlideSize", "height");
        let varsizeType = <string>TestInitializer.getValue("putSlidesSlideSize", "sizeType");
        let varscaleType = <string>TestInitializer.getValue("putSlidesSlideSize", "scaleType");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideSize", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideSize", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideSize", "storage");
        varsizeType = <string>TestInitializer.invalidizeValue(varsizeType, field, "string", "putSlidesSlideSize");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideSize", field, varsizeType).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().putSlidesSlideSize(varname, varwidth, varheight, varsizeType, varscaleType, varpassword, varfolder, varstorage), "putSlidesSlideSize", field, varsizeType);
            });
        });
    });

    it("invalid scaleType test", () => {
        const field = "scaleType";
        let varname = <string>TestInitializer.getValue("putSlidesSlideSize", "name");
        let varwidth = <number>TestInitializer.getValue("putSlidesSlideSize", "width");
        let varheight = <number>TestInitializer.getValue("putSlidesSlideSize", "height");
        let varsizeType = <string>TestInitializer.getValue("putSlidesSlideSize", "sizeType");
        let varscaleType = <string>TestInitializer.getValue("putSlidesSlideSize", "scaleType");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideSize", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideSize", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideSize", "storage");
        varscaleType = <string>TestInitializer.invalidizeValue(varscaleType, field, "string", "putSlidesSlideSize");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideSize", field, varscaleType).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().putSlidesSlideSize(varname, varwidth, varheight, varsizeType, varscaleType, varpassword, varfolder, varstorage), "putSlidesSlideSize", field, varscaleType);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlidesSlideSize", "name");
        let varwidth = <number>TestInitializer.getValue("putSlidesSlideSize", "width");
        let varheight = <number>TestInitializer.getValue("putSlidesSlideSize", "height");
        let varsizeType = <string>TestInitializer.getValue("putSlidesSlideSize", "sizeType");
        let varscaleType = <string>TestInitializer.getValue("putSlidesSlideSize", "scaleType");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideSize", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideSize", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideSize", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlidesSlideSize");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideSize", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().putSlidesSlideSize(varname, varwidth, varheight, varsizeType, varscaleType, varpassword, varfolder, varstorage), "putSlidesSlideSize", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlidesSlideSize", "name");
        let varwidth = <number>TestInitializer.getValue("putSlidesSlideSize", "width");
        let varheight = <number>TestInitializer.getValue("putSlidesSlideSize", "height");
        let varsizeType = <string>TestInitializer.getValue("putSlidesSlideSize", "sizeType");
        let varscaleType = <string>TestInitializer.getValue("putSlidesSlideSize", "scaleType");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideSize", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideSize", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideSize", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlidesSlideSize");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideSize", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().putSlidesSlideSize(varname, varwidth, varheight, varsizeType, varscaleType, varpassword, varfolder, varstorage), "putSlidesSlideSize", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlidesSlideSize", "name");
        let varwidth = <number>TestInitializer.getValue("putSlidesSlideSize", "width");
        let varheight = <number>TestInitializer.getValue("putSlidesSlideSize", "height");
        let varsizeType = <string>TestInitializer.getValue("putSlidesSlideSize", "sizeType");
        let varscaleType = <string>TestInitializer.getValue("putSlidesSlideSize", "scaleType");
        let varpassword = <string>TestInitializer.getValue("putSlidesSlideSize", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesSlideSize", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesSlideSize", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlidesSlideSize");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesSlideSize", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().putSlidesSlideSize(varname, varwidth, varheight, varsizeType, varscaleType, varpassword, varfolder, varstorage), "putSlidesSlideSize", field, varstorage);
            });
        });
    });
});

describe("Tests for setViewProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSlidesViewProperties", "name");
            let vardto = <model.ViewProperties>TestInitializer.getValue("putSlidesViewProperties", "dto");
            let varpassword = <string>TestInitializer.getValue("putSlidesViewProperties", "password");
            let varfolder = <string>TestInitializer.getValue("putSlidesViewProperties", "folder");
            let varstorage = <string>TestInitializer.getValue("putSlidesViewProperties", "storage");
            return TestInitializer.initialize("putSlidesViewProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setViewProperties(varname, vardto, varpassword, varfolder, varstorage), false, "putSlidesViewProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSlidesViewProperties", "name");
        let vardto = <model.ViewProperties>TestInitializer.getValue("putSlidesViewProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesViewProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesViewProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesViewProperties", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSlidesViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesViewProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setViewProperties(varname, vardto, varpassword, varfolder, varstorage), "putSlidesViewProperties", field, varname);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putSlidesViewProperties", "name");
        let vardto = <model.ViewProperties>TestInitializer.getValue("putSlidesViewProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesViewProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesViewProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesViewProperties", "storage");
        vardto = <model.ViewProperties>TestInitializer.invalidizeValue(vardto, field, "ViewProperties", "putSlidesViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesViewProperties", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setViewProperties(varname, vardto, varpassword, varfolder, varstorage), "putSlidesViewProperties", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSlidesViewProperties", "name");
        let vardto = <model.ViewProperties>TestInitializer.getValue("putSlidesViewProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesViewProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesViewProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesViewProperties", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSlidesViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesViewProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setViewProperties(varname, vardto, varpassword, varfolder, varstorage), "putSlidesViewProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSlidesViewProperties", "name");
        let vardto = <model.ViewProperties>TestInitializer.getValue("putSlidesViewProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesViewProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesViewProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesViewProperties", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSlidesViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesViewProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setViewProperties(varname, vardto, varpassword, varfolder, varstorage), "putSlidesViewProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSlidesViewProperties", "name");
        let vardto = <model.ViewProperties>TestInitializer.getValue("putSlidesViewProperties", "dto");
        let varpassword = <string>TestInitializer.getValue("putSlidesViewProperties", "password");
        let varfolder = <string>TestInitializer.getValue("putSlidesViewProperties", "folder");
        let varstorage = <string>TestInitializer.getValue("putSlidesViewProperties", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSlidesViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSlidesViewProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setViewProperties(varname, vardto, varpassword, varfolder, varstorage), "putSlidesViewProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for saveSubshape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putSubshapeSaveAs", "name");
            let varslideIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "slideIndex");
            let varpath = <string>TestInitializer.getValue("putSubshapeSaveAs", "path");
            let varshapeIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "shapeIndex");
            let varformat = <string>TestInitializer.getValue("putSubshapeSaveAs", "format");
            let varoutPath = <string>TestInitializer.getValue("putSubshapeSaveAs", "outPath");
            let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putSubshapeSaveAs", "options");
            let varscaleX = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleX");
            let varscaleY = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleY");
            let varbounds = <string>TestInitializer.getValue("putSubshapeSaveAs", "bounds");
            let varpassword = <string>TestInitializer.getValue("putSubshapeSaveAs", "password");
            let varfolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "folder");
            let varstorage = <string>TestInitializer.getValue("putSubshapeSaveAs", "storage");
            let varfontsFolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "fontsFolder");
            return TestInitializer.initialize("putSubshapeSaveAs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), false, "putSubshapeSaveAs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putSubshapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSubshapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "fontsFolder");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSubshapeSaveAs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putSubshapeSaveAs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putSubshapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSubshapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "fontsFolder");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSubshapeSaveAs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putSubshapeSaveAs", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("putSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putSubshapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSubshapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "fontsFolder");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "putSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSubshapeSaveAs", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putSubshapeSaveAs", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("putSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putSubshapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSubshapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "fontsFolder");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSubshapeSaveAs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putSubshapeSaveAs", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("putSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putSubshapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSubshapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "fontsFolder");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "putSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSubshapeSaveAs", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putSubshapeSaveAs", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let varname = <string>TestInitializer.getValue("putSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putSubshapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSubshapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "fontsFolder");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "putSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSubshapeSaveAs", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putSubshapeSaveAs", field, varoutPath);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("putSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putSubshapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSubshapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "fontsFolder");
        varoptions = <model.IShapeExportOptions>TestInitializer.invalidizeValue(varoptions, field, "IShapeExportOptions", "putSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSubshapeSaveAs", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putSubshapeSaveAs", field, varoptions);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let varname = <string>TestInitializer.getValue("putSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putSubshapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSubshapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "fontsFolder");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "putSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSubshapeSaveAs", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putSubshapeSaveAs", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let varname = <string>TestInitializer.getValue("putSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putSubshapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSubshapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "fontsFolder");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "putSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSubshapeSaveAs", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putSubshapeSaveAs", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let varname = <string>TestInitializer.getValue("putSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putSubshapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSubshapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "fontsFolder");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "putSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSubshapeSaveAs", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putSubshapeSaveAs", field, varbounds);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putSubshapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSubshapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "fontsFolder");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSubshapeSaveAs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putSubshapeSaveAs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putSubshapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSubshapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "fontsFolder");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSubshapeSaveAs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putSubshapeSaveAs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putSubshapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSubshapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "fontsFolder");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSubshapeSaveAs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putSubshapeSaveAs", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("putSubshapeSaveAs", "name");
        let varslideIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "slideIndex");
        let varpath = <string>TestInitializer.getValue("putSubshapeSaveAs", "path");
        let varshapeIndex = <number>TestInitializer.getValue("putSubshapeSaveAs", "shapeIndex");
        let varformat = <string>TestInitializer.getValue("putSubshapeSaveAs", "format");
        let varoutPath = <string>TestInitializer.getValue("putSubshapeSaveAs", "outPath");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("putSubshapeSaveAs", "options");
        let varscaleX = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleX");
        let varscaleY = <number>TestInitializer.getValue("putSubshapeSaveAs", "scaleY");
        let varbounds = <string>TestInitializer.getValue("putSubshapeSaveAs", "bounds");
        let varpassword = <string>TestInitializer.getValue("putSubshapeSaveAs", "password");
        let varfolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "folder");
        let varstorage = <string>TestInitializer.getValue("putSubshapeSaveAs", "storage");
        let varfontsFolder = <string>TestInitializer.getValue("putSubshapeSaveAs", "fontsFolder");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "putSubshapeSaveAs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putSubshapeSaveAs", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "putSubshapeSaveAs", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for updateNotesSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putUpdateNotesSlide", "name");
            let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlide", "slideIndex");
            let vardto = <model.NotesSlide>TestInitializer.getValue("putUpdateNotesSlide", "dto");
            let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlide", "password");
            let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlide", "folder");
            let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlide", "storage");
            return TestInitializer.initialize("putUpdateNotesSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), false, "putUpdateNotesSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlide", "slideIndex");
        let vardto = <model.NotesSlide>TestInitializer.getValue("putUpdateNotesSlide", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlide", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putUpdateNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlide", "slideIndex");
        let vardto = <model.NotesSlide>TestInitializer.getValue("putUpdateNotesSlide", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlide", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putUpdateNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlide", field, varslideIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlide", "slideIndex");
        let vardto = <model.NotesSlide>TestInitializer.getValue("putUpdateNotesSlide", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlide", "storage");
        vardto = <model.NotesSlide>TestInitializer.invalidizeValue(vardto, field, "NotesSlide", "putUpdateNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlide", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlide", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlide", "slideIndex");
        let vardto = <model.NotesSlide>TestInitializer.getValue("putUpdateNotesSlide", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlide", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putUpdateNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlide", "slideIndex");
        let vardto = <model.NotesSlide>TestInitializer.getValue("putUpdateNotesSlide", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlide", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putUpdateNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlide", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlide", "slideIndex");
        let vardto = <model.NotesSlide>TestInitializer.getValue("putUpdateNotesSlide", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlide", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlide", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlide", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putUpdateNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for updateNotesSlideShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "name");
            let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "shapeIndex");
            let vardto = <model.ShapeBase>TestInitializer.getValue("putUpdateNotesSlideShape", "dto");
            let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "password");
            let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "folder");
            let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "storage");
            return TestInitializer.initialize("putUpdateNotesSlideShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), false, "putUpdateNotesSlideShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putUpdateNotesSlideShape", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putUpdateNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putUpdateNotesSlideShape", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putUpdateNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putUpdateNotesSlideShape", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putUpdateNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShape", field, varshapeIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putUpdateNotesSlideShape", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "storage");
        vardto = <model.ShapeBase>TestInitializer.invalidizeValue(vardto, field, "ShapeBase", "putUpdateNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShape", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShape", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putUpdateNotesSlideShape", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putUpdateNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putUpdateNotesSlideShape", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putUpdateNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShape", "shapeIndex");
        let vardto = <model.ShapeBase>TestInitializer.getValue("putUpdateNotesSlideShape", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShape", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putUpdateNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShape", field, varstorage);
            });
        });
    });
});

describe("Tests for updateNotesSlideParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "name");
            let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
            let vardto = <model.Paragraph>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "dto");
            let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "password");
            let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "folder");
            let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "storage");
            return TestInitializer.initialize("putUpdateNotesSlideShapeParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), false, "putUpdateNotesSlideShapeParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putUpdateNotesSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapeParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapeParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putUpdateNotesSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapeParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapeParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putUpdateNotesSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapeParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapeParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "putUpdateNotesSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapeParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapeParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "storage");
        vardto = <model.Paragraph>TestInitializer.invalidizeValue(vardto, field, "Paragraph", "putUpdateNotesSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapeParagraph", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapeParagraph", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putUpdateNotesSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapeParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapeParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putUpdateNotesSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapeParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapeParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        let vardto = <model.Paragraph>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapeParagraph", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putUpdateNotesSlideShapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapeParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapeParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for updateNotesSlidePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "name");
            let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "slideIndex");
            let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "shapeIndex");
            let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
            let varportionIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "portionIndex");
            let vardto = <model.Portion>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "dto");
            let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "password");
            let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "folder");
            let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "storage");
            return TestInitializer.initialize("putUpdateNotesSlideShapePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), false, "putUpdateNotesSlideShapePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "storage");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "putUpdateNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "storage");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "putUpdateNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapePortion", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "storage");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "putUpdateNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "storage");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "putUpdateNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "storage");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "putUpdateNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapePortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapePortion", field, varportionIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "storage");
        vardto = <model.Portion>TestInitializer.invalidizeValue(vardto, field, "Portion", "putUpdateNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapePortion", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapePortion", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "storage");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "putUpdateNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "storage");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "putUpdateNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "name");
        let varslideIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "slideIndex");
        let varshapeIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "shapeIndex");
        let varparagraphIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "paragraphIndex");
        let varportionIndex = <number>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "portionIndex");
        let vardto = <model.Portion>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "dto");
        let varpassword = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "password");
        let varfolder = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "folder");
        let varstorage = <string>TestInitializer.getValue("putUpdateNotesSlideShapePortion", "storage");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "putUpdateNotesSlideShapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("putUpdateNotesSlideShapePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "putUpdateNotesSlideShapePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for storageExists", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varstorageName = <string>TestInitializer.getValue("storageExists", "storageName");
            return TestInitializer.initialize("storageExists", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().storageExists(varstorageName), false, "storageExists");
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varstorageName = <string>TestInitializer.getValue("storageExists", "storageName");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "storageExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("storageExists", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().storageExists(varstorageName), "storageExists", field, varstorageName);
            });
        });
    });
});

describe("Tests for uploadFile", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("uploadFile", "path");
            let varfile = <Buffer>TestInitializer.getStreamValue("uploadFile", "file");
            let varstorageName = <string>TestInitializer.getValue("uploadFile", "storageName");
            return TestInitializer.initialize("uploadFile", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().uploadFile(varpath, varfile, varstorageName), false, "uploadFile");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("uploadFile", "path");
        let varfile = <Buffer>TestInitializer.getStreamValue("uploadFile", "file");
        let varstorageName = <string>TestInitializer.getValue("uploadFile", "storageName");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "uploadFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("uploadFile", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().uploadFile(varpath, varfile, varstorageName), "uploadFile", field, varpath);
            });
        });
    });

    it("invalid file test", () => {
        const field = "file";
        let varpath = <string>TestInitializer.getValue("uploadFile", "path");
        let varfile = <Buffer>TestInitializer.getStreamValue("uploadFile", "file");
        let varstorageName = <string>TestInitializer.getValue("uploadFile", "storageName");
        varfile = <Buffer>TestInitializer.invalidizeValue(varfile, field, "Buffer", "uploadFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("uploadFile", field, varfile).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().uploadFile(varpath, varfile, varstorageName), "uploadFile", field, varfile);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("uploadFile", "path");
        let varfile = <Buffer>TestInitializer.getStreamValue("uploadFile", "file");
        let varstorageName = <string>TestInitializer.getValue("uploadFile", "storageName");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "uploadFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("uploadFile", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().uploadFile(varpath, varfile, varstorageName), "uploadFile", field, varstorageName);
            });
        });
    });
});
