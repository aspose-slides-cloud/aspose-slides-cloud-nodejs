/*
* MIT License

* Copyright (c) 2018 Aspose Pty Ltd

* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:

* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.

* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

import "mocha";
import * as model from "../sdk/model";
import { TestInitializer } from "./testInitializer";

describe("Tests for alignShapes", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("alignShapes", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("alignShapes", "slideIndex", "number");
            let varalignmentType = <string>TestInitializer.getValue("alignShapes", "alignmentType", "string");
            let varalignToSlide = <boolean>TestInitializer.getValue("alignShapes", "alignToSlide", "boolean");
            let varshapes = <Array<number>>TestInitializer.getValue("alignShapes", "shapes", "Array&lt;number&gt;");
            let varpassword = <string>TestInitializer.getValue("alignShapes", "password", "string");
            let varfolder = <string>TestInitializer.getValue("alignShapes", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("alignShapes", "storage", "string");
            return TestInitializer.initialize("alignShapes", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), false, "alignShapes");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("alignShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("alignShapes", "slideIndex", "number");
        let varalignmentType = <string>TestInitializer.getValue("alignShapes", "alignmentType", "string");
        let varalignToSlide = <boolean>TestInitializer.getValue("alignShapes", "alignToSlide", "boolean");
        let varshapes = <Array<number>>TestInitializer.getValue("alignShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("alignShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("alignShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("alignShapes", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "alignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("alignShapes", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "alignShapes", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("alignShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("alignShapes", "slideIndex", "number");
        let varalignmentType = <string>TestInitializer.getValue("alignShapes", "alignmentType", "string");
        let varalignToSlide = <boolean>TestInitializer.getValue("alignShapes", "alignToSlide", "boolean");
        let varshapes = <Array<number>>TestInitializer.getValue("alignShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("alignShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("alignShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("alignShapes", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "alignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("alignShapes", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "alignShapes", field, varslideIndex);
            });
        });
    });

    it("invalid alignmentType test", () => {
        const field = "alignmentType";
        let varname = <string>TestInitializer.getValue("alignShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("alignShapes", "slideIndex", "number");
        let varalignmentType = <string>TestInitializer.getValue("alignShapes", "alignmentType", "string");
        let varalignToSlide = <boolean>TestInitializer.getValue("alignShapes", "alignToSlide", "boolean");
        let varshapes = <Array<number>>TestInitializer.getValue("alignShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("alignShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("alignShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("alignShapes", "storage", "string");
        varalignmentType = <string>TestInitializer.invalidizeValue(varalignmentType, field, "string", "alignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("alignShapes", field, varalignmentType).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "alignShapes", field, varalignmentType);
            });
        });
    });

    it("invalid alignToSlide test", () => {
        const field = "alignToSlide";
        let varname = <string>TestInitializer.getValue("alignShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("alignShapes", "slideIndex", "number");
        let varalignmentType = <string>TestInitializer.getValue("alignShapes", "alignmentType", "string");
        let varalignToSlide = <boolean>TestInitializer.getValue("alignShapes", "alignToSlide", "boolean");
        let varshapes = <Array<number>>TestInitializer.getValue("alignShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("alignShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("alignShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("alignShapes", "storage", "string");
        varalignToSlide = <boolean>TestInitializer.invalidizeValue(varalignToSlide, field, "boolean", "alignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("alignShapes", field, varalignToSlide).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "alignShapes", field, varalignToSlide);
            });
        });
    });

    it("invalid shapes test", () => {
        const field = "shapes";
        let varname = <string>TestInitializer.getValue("alignShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("alignShapes", "slideIndex", "number");
        let varalignmentType = <string>TestInitializer.getValue("alignShapes", "alignmentType", "string");
        let varalignToSlide = <boolean>TestInitializer.getValue("alignShapes", "alignToSlide", "boolean");
        let varshapes = <Array<number>>TestInitializer.getValue("alignShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("alignShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("alignShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("alignShapes", "storage", "string");
        varshapes = <Array<number>>TestInitializer.invalidizeValue(varshapes, field, "Array&lt;number&gt;", "alignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("alignShapes", field, varshapes).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "alignShapes", field, varshapes);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("alignShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("alignShapes", "slideIndex", "number");
        let varalignmentType = <string>TestInitializer.getValue("alignShapes", "alignmentType", "string");
        let varalignToSlide = <boolean>TestInitializer.getValue("alignShapes", "alignToSlide", "boolean");
        let varshapes = <Array<number>>TestInitializer.getValue("alignShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("alignShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("alignShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("alignShapes", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "alignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("alignShapes", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "alignShapes", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("alignShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("alignShapes", "slideIndex", "number");
        let varalignmentType = <string>TestInitializer.getValue("alignShapes", "alignmentType", "string");
        let varalignToSlide = <boolean>TestInitializer.getValue("alignShapes", "alignToSlide", "boolean");
        let varshapes = <Array<number>>TestInitializer.getValue("alignShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("alignShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("alignShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("alignShapes", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "alignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("alignShapes", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "alignShapes", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("alignShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("alignShapes", "slideIndex", "number");
        let varalignmentType = <string>TestInitializer.getValue("alignShapes", "alignmentType", "string");
        let varalignToSlide = <boolean>TestInitializer.getValue("alignShapes", "alignToSlide", "boolean");
        let varshapes = <Array<number>>TestInitializer.getValue("alignShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("alignShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("alignShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("alignShapes", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "alignShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("alignShapes", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().alignShapes(varname, varslideIndex, varalignmentType, varalignToSlide, varshapes, varpassword, varfolder, varstorage), "alignShapes", field, varstorage);
            });
        });
    });
});

describe("Tests for convert", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("convert", "document");
            let varformat = <string>TestInitializer.getValue("convert", "format", "string");
            let varpassword = <string>TestInitializer.getValue("convert", "password", "string");
            let varstorage = <string>TestInitializer.getValue("convert", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("convert", "fontsFolder", "string");
            return TestInitializer.initialize("convert", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().convert(vardocument, varformat, varpassword, varstorage, varfontsFolder), true, "convert");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("convert", "document");
        let varformat = <string>TestInitializer.getValue("convert", "format", "string");
        let varpassword = <string>TestInitializer.getValue("convert", "password", "string");
        let varstorage = <string>TestInitializer.getValue("convert", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("convert", "fontsFolder", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "convert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("convert", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convert(vardocument, varformat, varpassword, varstorage, varfontsFolder), "convert", field, vardocument);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("convert", "document");
        let varformat = <string>TestInitializer.getValue("convert", "format", "string");
        let varpassword = <string>TestInitializer.getValue("convert", "password", "string");
        let varstorage = <string>TestInitializer.getValue("convert", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("convert", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "convert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("convert", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convert(vardocument, varformat, varpassword, varstorage, varfontsFolder), "convert", field, varformat);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("convert", "document");
        let varformat = <string>TestInitializer.getValue("convert", "format", "string");
        let varpassword = <string>TestInitializer.getValue("convert", "password", "string");
        let varstorage = <string>TestInitializer.getValue("convert", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("convert", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "convert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("convert", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convert(vardocument, varformat, varpassword, varstorage, varfontsFolder), "convert", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("convert", "document");
        let varformat = <string>TestInitializer.getValue("convert", "format", "string");
        let varpassword = <string>TestInitializer.getValue("convert", "password", "string");
        let varstorage = <string>TestInitializer.getValue("convert", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("convert", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "convert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("convert", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convert(vardocument, varformat, varpassword, varstorage, varfontsFolder), "convert", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("convert", "document");
        let varformat = <string>TestInitializer.getValue("convert", "format", "string");
        let varpassword = <string>TestInitializer.getValue("convert", "password", "string");
        let varstorage = <string>TestInitializer.getValue("convert", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("convert", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "convert");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("convert", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convert(vardocument, varformat, varpassword, varstorage, varfontsFolder), "convert", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for convertAndSave", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("convertAndSave", "document");
            let varformat = <string>TestInitializer.getValue("convertAndSave", "format", "string");
            let varoutPath = <string>TestInitializer.getValue("convertAndSave", "outPath", "string");
            let varpassword = <string>TestInitializer.getValue("convertAndSave", "password", "string");
            let varstorage = <string>TestInitializer.getValue("convertAndSave", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("convertAndSave", "fontsFolder", "string");
            return TestInitializer.initialize("convertAndSave", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().convertAndSave(vardocument, varformat, varoutPath, varpassword, varstorage, varfontsFolder), false, "convertAndSave");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("convertAndSave", "document");
        let varformat = <string>TestInitializer.getValue("convertAndSave", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("convertAndSave", "outPath", "string");
        let varpassword = <string>TestInitializer.getValue("convertAndSave", "password", "string");
        let varstorage = <string>TestInitializer.getValue("convertAndSave", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("convertAndSave", "fontsFolder", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "convertAndSave");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("convertAndSave", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convertAndSave(vardocument, varformat, varoutPath, varpassword, varstorage, varfontsFolder), "convertAndSave", field, vardocument);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("convertAndSave", "document");
        let varformat = <string>TestInitializer.getValue("convertAndSave", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("convertAndSave", "outPath", "string");
        let varpassword = <string>TestInitializer.getValue("convertAndSave", "password", "string");
        let varstorage = <string>TestInitializer.getValue("convertAndSave", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("convertAndSave", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "convertAndSave");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("convertAndSave", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convertAndSave(vardocument, varformat, varoutPath, varpassword, varstorage, varfontsFolder), "convertAndSave", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let vardocument = <Buffer>TestInitializer.getStreamValue("convertAndSave", "document");
        let varformat = <string>TestInitializer.getValue("convertAndSave", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("convertAndSave", "outPath", "string");
        let varpassword = <string>TestInitializer.getValue("convertAndSave", "password", "string");
        let varstorage = <string>TestInitializer.getValue("convertAndSave", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("convertAndSave", "fontsFolder", "string");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "convertAndSave");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("convertAndSave", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convertAndSave(vardocument, varformat, varoutPath, varpassword, varstorage, varfontsFolder), "convertAndSave", field, varoutPath);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("convertAndSave", "document");
        let varformat = <string>TestInitializer.getValue("convertAndSave", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("convertAndSave", "outPath", "string");
        let varpassword = <string>TestInitializer.getValue("convertAndSave", "password", "string");
        let varstorage = <string>TestInitializer.getValue("convertAndSave", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("convertAndSave", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "convertAndSave");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("convertAndSave", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convertAndSave(vardocument, varformat, varoutPath, varpassword, varstorage, varfontsFolder), "convertAndSave", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("convertAndSave", "document");
        let varformat = <string>TestInitializer.getValue("convertAndSave", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("convertAndSave", "outPath", "string");
        let varpassword = <string>TestInitializer.getValue("convertAndSave", "password", "string");
        let varstorage = <string>TestInitializer.getValue("convertAndSave", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("convertAndSave", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "convertAndSave");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("convertAndSave", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convertAndSave(vardocument, varformat, varoutPath, varpassword, varstorage, varfontsFolder), "convertAndSave", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("convertAndSave", "document");
        let varformat = <string>TestInitializer.getValue("convertAndSave", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("convertAndSave", "outPath", "string");
        let varpassword = <string>TestInitializer.getValue("convertAndSave", "password", "string");
        let varstorage = <string>TestInitializer.getValue("convertAndSave", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("convertAndSave", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "convertAndSave");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("convertAndSave", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().convertAndSave(vardocument, varformat, varoutPath, varpassword, varstorage, varfontsFolder), "convertAndSave", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for copyFile", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varsrcPath = <string>TestInitializer.getValue("copyFile", "srcPath", "string");
            let vardestPath = <string>TestInitializer.getValue("copyFile", "destPath", "string");
            let varsrcStorageName = <string>TestInitializer.getValue("copyFile", "srcStorageName", "string");
            let vardestStorageName = <string>TestInitializer.getValue("copyFile", "destStorageName", "string");
            let varversionId = <string>TestInitializer.getValue("copyFile", "versionId", "string");
            return TestInitializer.initialize("copyFile", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().copyFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), false, "copyFile");
            });
        });
    });

    it("invalid srcPath test", () => {
        const field = "srcPath";
        let varsrcPath = <string>TestInitializer.getValue("copyFile", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("copyFile", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFile", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("copyFile", "destStorageName", "string");
        let varversionId = <string>TestInitializer.getValue("copyFile", "versionId", "string");
        varsrcPath = <string>TestInitializer.invalidizeValue(varsrcPath, field, "string", "copyFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFile", field, varsrcPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "copyFile", field, varsrcPath);
            });
        });
    });

    it("invalid destPath test", () => {
        const field = "destPath";
        let varsrcPath = <string>TestInitializer.getValue("copyFile", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("copyFile", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFile", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("copyFile", "destStorageName", "string");
        let varversionId = <string>TestInitializer.getValue("copyFile", "versionId", "string");
        vardestPath = <string>TestInitializer.invalidizeValue(vardestPath, field, "string", "copyFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFile", field, vardestPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "copyFile", field, vardestPath);
            });
        });
    });

    it("invalid srcStorageName test", () => {
        const field = "srcStorageName";
        let varsrcPath = <string>TestInitializer.getValue("copyFile", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("copyFile", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFile", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("copyFile", "destStorageName", "string");
        let varversionId = <string>TestInitializer.getValue("copyFile", "versionId", "string");
        varsrcStorageName = <string>TestInitializer.invalidizeValue(varsrcStorageName, field, "string", "copyFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFile", field, varsrcStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "copyFile", field, varsrcStorageName);
            });
        });
    });

    it("invalid destStorageName test", () => {
        const field = "destStorageName";
        let varsrcPath = <string>TestInitializer.getValue("copyFile", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("copyFile", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFile", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("copyFile", "destStorageName", "string");
        let varversionId = <string>TestInitializer.getValue("copyFile", "versionId", "string");
        vardestStorageName = <string>TestInitializer.invalidizeValue(vardestStorageName, field, "string", "copyFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFile", field, vardestStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "copyFile", field, vardestStorageName);
            });
        });
    });

    it("invalid versionId test", () => {
        const field = "versionId";
        let varsrcPath = <string>TestInitializer.getValue("copyFile", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("copyFile", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFile", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("copyFile", "destStorageName", "string");
        let varversionId = <string>TestInitializer.getValue("copyFile", "versionId", "string");
        varversionId = <string>TestInitializer.invalidizeValue(varversionId, field, "string", "copyFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFile", field, varversionId).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "copyFile", field, varversionId);
            });
        });
    });
});

describe("Tests for copyFolder", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varsrcPath = <string>TestInitializer.getValue("copyFolder", "srcPath", "string");
            let vardestPath = <string>TestInitializer.getValue("copyFolder", "destPath", "string");
            let varsrcStorageName = <string>TestInitializer.getValue("copyFolder", "srcStorageName", "string");
            let vardestStorageName = <string>TestInitializer.getValue("copyFolder", "destStorageName", "string");
            return TestInitializer.initialize("copyFolder", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().copyFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), false, "copyFolder");
            });
        });
    });

    it("invalid srcPath test", () => {
        const field = "srcPath";
        let varsrcPath = <string>TestInitializer.getValue("copyFolder", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("copyFolder", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFolder", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("copyFolder", "destStorageName", "string");
        varsrcPath = <string>TestInitializer.invalidizeValue(varsrcPath, field, "string", "copyFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFolder", field, varsrcPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "copyFolder", field, varsrcPath);
            });
        });
    });

    it("invalid destPath test", () => {
        const field = "destPath";
        let varsrcPath = <string>TestInitializer.getValue("copyFolder", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("copyFolder", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFolder", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("copyFolder", "destStorageName", "string");
        vardestPath = <string>TestInitializer.invalidizeValue(vardestPath, field, "string", "copyFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFolder", field, vardestPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "copyFolder", field, vardestPath);
            });
        });
    });

    it("invalid srcStorageName test", () => {
        const field = "srcStorageName";
        let varsrcPath = <string>TestInitializer.getValue("copyFolder", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("copyFolder", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFolder", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("copyFolder", "destStorageName", "string");
        varsrcStorageName = <string>TestInitializer.invalidizeValue(varsrcStorageName, field, "string", "copyFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFolder", field, varsrcStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "copyFolder", field, varsrcStorageName);
            });
        });
    });

    it("invalid destStorageName test", () => {
        const field = "destStorageName";
        let varsrcPath = <string>TestInitializer.getValue("copyFolder", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("copyFolder", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("copyFolder", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("copyFolder", "destStorageName", "string");
        vardestStorageName = <string>TestInitializer.invalidizeValue(vardestStorageName, field, "string", "copyFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyFolder", field, vardestStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "copyFolder", field, vardestStorageName);
            });
        });
    });
});

describe("Tests for copyLayoutSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("copyLayoutSlide", "name", "string");
            let varcloneFrom = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFrom", "string");
            let varcloneFromPosition = <number>TestInitializer.getValue("copyLayoutSlide", "cloneFromPosition", "number");
            let varcloneFromPassword = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromPassword", "string");
            let varcloneFromStorage = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromStorage", "string");
            let varpassword = <string>TestInitializer.getValue("copyLayoutSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("copyLayoutSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("copyLayoutSlide", "storage", "string");
            return TestInitializer.initialize("copyLayoutSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), false, "copyLayoutSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("copyLayoutSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyLayoutSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copyLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyLayoutSlide", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "copyLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyLayoutSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "copyLayoutSlide", field, varname);
            });
        });
    });

    it("invalid cloneFrom test", () => {
        const field = "cloneFrom";
        let varname = <string>TestInitializer.getValue("copyLayoutSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyLayoutSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copyLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyLayoutSlide", "storage", "string");
        varcloneFrom = <string>TestInitializer.invalidizeValue(varcloneFrom, field, "string", "copyLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyLayoutSlide", field, varcloneFrom).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "copyLayoutSlide", field, varcloneFrom);
            });
        });
    });

    it("invalid cloneFromPosition test", () => {
        const field = "cloneFromPosition";
        let varname = <string>TestInitializer.getValue("copyLayoutSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyLayoutSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copyLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyLayoutSlide", "storage", "string");
        varcloneFromPosition = <number>TestInitializer.invalidizeValue(varcloneFromPosition, field, "number", "copyLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyLayoutSlide", field, varcloneFromPosition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "copyLayoutSlide", field, varcloneFromPosition);
            });
        });
    });

    it("invalid cloneFromPassword test", () => {
        const field = "cloneFromPassword";
        let varname = <string>TestInitializer.getValue("copyLayoutSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyLayoutSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copyLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyLayoutSlide", "storage", "string");
        varcloneFromPassword = <string>TestInitializer.invalidizeValue(varcloneFromPassword, field, "string", "copyLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyLayoutSlide", field, varcloneFromPassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "copyLayoutSlide", field, varcloneFromPassword);
            });
        });
    });

    it("invalid cloneFromStorage test", () => {
        const field = "cloneFromStorage";
        let varname = <string>TestInitializer.getValue("copyLayoutSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyLayoutSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copyLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyLayoutSlide", "storage", "string");
        varcloneFromStorage = <string>TestInitializer.invalidizeValue(varcloneFromStorage, field, "string", "copyLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyLayoutSlide", field, varcloneFromStorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "copyLayoutSlide", field, varcloneFromStorage);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("copyLayoutSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyLayoutSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copyLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyLayoutSlide", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "copyLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyLayoutSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "copyLayoutSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("copyLayoutSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyLayoutSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copyLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyLayoutSlide", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "copyLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyLayoutSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "copyLayoutSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("copyLayoutSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyLayoutSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyLayoutSlide", "cloneFromStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copyLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyLayoutSlide", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "copyLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyLayoutSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyLayoutSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varpassword, varfolder, varstorage), "copyLayoutSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for copyMasterSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("copyMasterSlide", "name", "string");
            let varcloneFrom = <string>TestInitializer.getValue("copyMasterSlide", "cloneFrom", "string");
            let varcloneFromPosition = <number>TestInitializer.getValue("copyMasterSlide", "cloneFromPosition", "number");
            let varcloneFromPassword = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromPassword", "string");
            let varcloneFromStorage = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromStorage", "string");
            let varapplyToAll = <boolean>TestInitializer.getValue("copyMasterSlide", "applyToAll", "boolean");
            let varpassword = <string>TestInitializer.getValue("copyMasterSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("copyMasterSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("copyMasterSlide", "storage", "string");
            return TestInitializer.initialize("copyMasterSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), false, "copyMasterSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("copyMasterSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyMasterSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyMasterSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromStorage", "string");
        let varapplyToAll = <boolean>TestInitializer.getValue("copyMasterSlide", "applyToAll", "boolean");
        let varpassword = <string>TestInitializer.getValue("copyMasterSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyMasterSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyMasterSlide", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "copyMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyMasterSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "copyMasterSlide", field, varname);
            });
        });
    });

    it("invalid cloneFrom test", () => {
        const field = "cloneFrom";
        let varname = <string>TestInitializer.getValue("copyMasterSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyMasterSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyMasterSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromStorage", "string");
        let varapplyToAll = <boolean>TestInitializer.getValue("copyMasterSlide", "applyToAll", "boolean");
        let varpassword = <string>TestInitializer.getValue("copyMasterSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyMasterSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyMasterSlide", "storage", "string");
        varcloneFrom = <string>TestInitializer.invalidizeValue(varcloneFrom, field, "string", "copyMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyMasterSlide", field, varcloneFrom).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "copyMasterSlide", field, varcloneFrom);
            });
        });
    });

    it("invalid cloneFromPosition test", () => {
        const field = "cloneFromPosition";
        let varname = <string>TestInitializer.getValue("copyMasterSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyMasterSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyMasterSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromStorage", "string");
        let varapplyToAll = <boolean>TestInitializer.getValue("copyMasterSlide", "applyToAll", "boolean");
        let varpassword = <string>TestInitializer.getValue("copyMasterSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyMasterSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyMasterSlide", "storage", "string");
        varcloneFromPosition = <number>TestInitializer.invalidizeValue(varcloneFromPosition, field, "number", "copyMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyMasterSlide", field, varcloneFromPosition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "copyMasterSlide", field, varcloneFromPosition);
            });
        });
    });

    it("invalid cloneFromPassword test", () => {
        const field = "cloneFromPassword";
        let varname = <string>TestInitializer.getValue("copyMasterSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyMasterSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyMasterSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromStorage", "string");
        let varapplyToAll = <boolean>TestInitializer.getValue("copyMasterSlide", "applyToAll", "boolean");
        let varpassword = <string>TestInitializer.getValue("copyMasterSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyMasterSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyMasterSlide", "storage", "string");
        varcloneFromPassword = <string>TestInitializer.invalidizeValue(varcloneFromPassword, field, "string", "copyMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyMasterSlide", field, varcloneFromPassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "copyMasterSlide", field, varcloneFromPassword);
            });
        });
    });

    it("invalid cloneFromStorage test", () => {
        const field = "cloneFromStorage";
        let varname = <string>TestInitializer.getValue("copyMasterSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyMasterSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyMasterSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromStorage", "string");
        let varapplyToAll = <boolean>TestInitializer.getValue("copyMasterSlide", "applyToAll", "boolean");
        let varpassword = <string>TestInitializer.getValue("copyMasterSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyMasterSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyMasterSlide", "storage", "string");
        varcloneFromStorage = <string>TestInitializer.invalidizeValue(varcloneFromStorage, field, "string", "copyMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyMasterSlide", field, varcloneFromStorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "copyMasterSlide", field, varcloneFromStorage);
            });
        });
    });

    it("invalid applyToAll test", () => {
        const field = "applyToAll";
        let varname = <string>TestInitializer.getValue("copyMasterSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyMasterSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyMasterSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromStorage", "string");
        let varapplyToAll = <boolean>TestInitializer.getValue("copyMasterSlide", "applyToAll", "boolean");
        let varpassword = <string>TestInitializer.getValue("copyMasterSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyMasterSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyMasterSlide", "storage", "string");
        varapplyToAll = <boolean>TestInitializer.invalidizeValue(varapplyToAll, field, "boolean", "copyMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyMasterSlide", field, varapplyToAll).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "copyMasterSlide", field, varapplyToAll);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("copyMasterSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyMasterSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyMasterSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromStorage", "string");
        let varapplyToAll = <boolean>TestInitializer.getValue("copyMasterSlide", "applyToAll", "boolean");
        let varpassword = <string>TestInitializer.getValue("copyMasterSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyMasterSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyMasterSlide", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "copyMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyMasterSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "copyMasterSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("copyMasterSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyMasterSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyMasterSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromStorage", "string");
        let varapplyToAll = <boolean>TestInitializer.getValue("copyMasterSlide", "applyToAll", "boolean");
        let varpassword = <string>TestInitializer.getValue("copyMasterSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyMasterSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyMasterSlide", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "copyMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyMasterSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "copyMasterSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("copyMasterSlide", "name", "string");
        let varcloneFrom = <string>TestInitializer.getValue("copyMasterSlide", "cloneFrom", "string");
        let varcloneFromPosition = <number>TestInitializer.getValue("copyMasterSlide", "cloneFromPosition", "number");
        let varcloneFromPassword = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromPassword", "string");
        let varcloneFromStorage = <string>TestInitializer.getValue("copyMasterSlide", "cloneFromStorage", "string");
        let varapplyToAll = <boolean>TestInitializer.getValue("copyMasterSlide", "applyToAll", "boolean");
        let varpassword = <string>TestInitializer.getValue("copyMasterSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copyMasterSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copyMasterSlide", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "copyMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copyMasterSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copyMasterSlide(varname, varcloneFrom, varcloneFromPosition, varcloneFromPassword, varcloneFromStorage, varapplyToAll, varpassword, varfolder, varstorage), "copyMasterSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for copySlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("copySlide", "name", "string");
            let varslideToCopy = <number>TestInitializer.getValue("copySlide", "slideToCopy", "number");
            let varposition = <number>TestInitializer.getValue("copySlide", "position", "number");
            let varsource = <string>TestInitializer.getValue("copySlide", "source", "string");
            let varsourcePassword = <string>TestInitializer.getValue("copySlide", "sourcePassword", "string");
            let varsourceStorage = <string>TestInitializer.getValue("copySlide", "sourceStorage", "string");
            let varpassword = <string>TestInitializer.getValue("copySlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("copySlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("copySlide", "storage", "string");
            return TestInitializer.initialize("copySlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), false, "copySlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("copySlide", "name", "string");
        let varslideToCopy = <number>TestInitializer.getValue("copySlide", "slideToCopy", "number");
        let varposition = <number>TestInitializer.getValue("copySlide", "position", "number");
        let varsource = <string>TestInitializer.getValue("copySlide", "source", "string");
        let varsourcePassword = <string>TestInitializer.getValue("copySlide", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("copySlide", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copySlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copySlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copySlide", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "copySlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copySlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "copySlide", field, varname);
            });
        });
    });

    it("invalid slideToCopy test", () => {
        const field = "slideToCopy";
        let varname = <string>TestInitializer.getValue("copySlide", "name", "string");
        let varslideToCopy = <number>TestInitializer.getValue("copySlide", "slideToCopy", "number");
        let varposition = <number>TestInitializer.getValue("copySlide", "position", "number");
        let varsource = <string>TestInitializer.getValue("copySlide", "source", "string");
        let varsourcePassword = <string>TestInitializer.getValue("copySlide", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("copySlide", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copySlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copySlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copySlide", "storage", "string");
        varslideToCopy = <number>TestInitializer.invalidizeValue(varslideToCopy, field, "number", "copySlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copySlide", field, varslideToCopy).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "copySlide", field, varslideToCopy);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("copySlide", "name", "string");
        let varslideToCopy = <number>TestInitializer.getValue("copySlide", "slideToCopy", "number");
        let varposition = <number>TestInitializer.getValue("copySlide", "position", "number");
        let varsource = <string>TestInitializer.getValue("copySlide", "source", "string");
        let varsourcePassword = <string>TestInitializer.getValue("copySlide", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("copySlide", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copySlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copySlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copySlide", "storage", "string");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "copySlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copySlide", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "copySlide", field, varposition);
            });
        });
    });

    it("invalid source test", () => {
        const field = "source";
        let varname = <string>TestInitializer.getValue("copySlide", "name", "string");
        let varslideToCopy = <number>TestInitializer.getValue("copySlide", "slideToCopy", "number");
        let varposition = <number>TestInitializer.getValue("copySlide", "position", "number");
        let varsource = <string>TestInitializer.getValue("copySlide", "source", "string");
        let varsourcePassword = <string>TestInitializer.getValue("copySlide", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("copySlide", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copySlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copySlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copySlide", "storage", "string");
        varsource = <string>TestInitializer.invalidizeValue(varsource, field, "string", "copySlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copySlide", field, varsource).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "copySlide", field, varsource);
            });
        });
    });

    it("invalid sourcePassword test", () => {
        const field = "sourcePassword";
        let varname = <string>TestInitializer.getValue("copySlide", "name", "string");
        let varslideToCopy = <number>TestInitializer.getValue("copySlide", "slideToCopy", "number");
        let varposition = <number>TestInitializer.getValue("copySlide", "position", "number");
        let varsource = <string>TestInitializer.getValue("copySlide", "source", "string");
        let varsourcePassword = <string>TestInitializer.getValue("copySlide", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("copySlide", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copySlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copySlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copySlide", "storage", "string");
        varsourcePassword = <string>TestInitializer.invalidizeValue(varsourcePassword, field, "string", "copySlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copySlide", field, varsourcePassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "copySlide", field, varsourcePassword);
            });
        });
    });

    it("invalid sourceStorage test", () => {
        const field = "sourceStorage";
        let varname = <string>TestInitializer.getValue("copySlide", "name", "string");
        let varslideToCopy = <number>TestInitializer.getValue("copySlide", "slideToCopy", "number");
        let varposition = <number>TestInitializer.getValue("copySlide", "position", "number");
        let varsource = <string>TestInitializer.getValue("copySlide", "source", "string");
        let varsourcePassword = <string>TestInitializer.getValue("copySlide", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("copySlide", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copySlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copySlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copySlide", "storage", "string");
        varsourceStorage = <string>TestInitializer.invalidizeValue(varsourceStorage, field, "string", "copySlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copySlide", field, varsourceStorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "copySlide", field, varsourceStorage);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("copySlide", "name", "string");
        let varslideToCopy = <number>TestInitializer.getValue("copySlide", "slideToCopy", "number");
        let varposition = <number>TestInitializer.getValue("copySlide", "position", "number");
        let varsource = <string>TestInitializer.getValue("copySlide", "source", "string");
        let varsourcePassword = <string>TestInitializer.getValue("copySlide", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("copySlide", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copySlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copySlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copySlide", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "copySlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copySlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "copySlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("copySlide", "name", "string");
        let varslideToCopy = <number>TestInitializer.getValue("copySlide", "slideToCopy", "number");
        let varposition = <number>TestInitializer.getValue("copySlide", "position", "number");
        let varsource = <string>TestInitializer.getValue("copySlide", "source", "string");
        let varsourcePassword = <string>TestInitializer.getValue("copySlide", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("copySlide", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copySlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copySlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copySlide", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "copySlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copySlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "copySlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("copySlide", "name", "string");
        let varslideToCopy = <number>TestInitializer.getValue("copySlide", "slideToCopy", "number");
        let varposition = <number>TestInitializer.getValue("copySlide", "position", "number");
        let varsource = <string>TestInitializer.getValue("copySlide", "source", "string");
        let varsourcePassword = <string>TestInitializer.getValue("copySlide", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("copySlide", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("copySlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("copySlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("copySlide", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "copySlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("copySlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().copySlide(varname, varslideToCopy, varposition, varsource, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "copySlide", field, varstorage);
            });
        });
    });
});

describe("Tests for createAnimationEffect", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createAnimationEffect", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createAnimationEffect", "slideIndex", "number");
            let vareffect = <model.Effect>TestInitializer.getValue("createAnimationEffect", "effect", "Effect");
            let varpassword = <string>TestInitializer.getValue("createAnimationEffect", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createAnimationEffect", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createAnimationEffect", "storage", "string");
            return TestInitializer.initialize("createAnimationEffect", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createAnimationEffect(varname, varslideIndex, vareffect, varpassword, varfolder, varstorage), false, "createAnimationEffect");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationEffect", "slideIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("createAnimationEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("createAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationEffect", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationEffect", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationEffect(varname, varslideIndex, vareffect, varpassword, varfolder, varstorage), "createAnimationEffect", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationEffect", "slideIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("createAnimationEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("createAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationEffect", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationEffect", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationEffect(varname, varslideIndex, vareffect, varpassword, varfolder, varstorage), "createAnimationEffect", field, varslideIndex);
            });
        });
    });

    it("invalid effect test", () => {
        const field = "effect";
        let varname = <string>TestInitializer.getValue("createAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationEffect", "slideIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("createAnimationEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("createAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationEffect", "storage", "string");
        vareffect = <model.Effect>TestInitializer.invalidizeValue(vareffect, field, "Effect", "createAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationEffect", field, vareffect).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationEffect(varname, varslideIndex, vareffect, varpassword, varfolder, varstorage), "createAnimationEffect", field, vareffect);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationEffect", "slideIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("createAnimationEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("createAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationEffect", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationEffect", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationEffect(varname, varslideIndex, vareffect, varpassword, varfolder, varstorage), "createAnimationEffect", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationEffect", "slideIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("createAnimationEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("createAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationEffect", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationEffect", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationEffect(varname, varslideIndex, vareffect, varpassword, varfolder, varstorage), "createAnimationEffect", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationEffect", "slideIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("createAnimationEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("createAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationEffect", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationEffect", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationEffect(varname, varslideIndex, vareffect, varpassword, varfolder, varstorage), "createAnimationEffect", field, varstorage);
            });
        });
    });
});

describe("Tests for createAnimationInteractiveSequence", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequence", "slideIndex", "number");
            let varsequence = <model.InteractiveSequence>TestInitializer.getValue("createAnimationInteractiveSequence", "sequence", "InteractiveSequence");
            let varpassword = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "storage", "string");
            return TestInitializer.initialize("createAnimationInteractiveSequence", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createAnimationInteractiveSequence(varname, varslideIndex, varsequence, varpassword, varfolder, varstorage), false, "createAnimationInteractiveSequence");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequence", "slideIndex", "number");
        let varsequence = <model.InteractiveSequence>TestInitializer.getValue("createAnimationInteractiveSequence", "sequence", "InteractiveSequence");
        let varpassword = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationInteractiveSequence", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequence(varname, varslideIndex, varsequence, varpassword, varfolder, varstorage), "createAnimationInteractiveSequence", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequence", "slideIndex", "number");
        let varsequence = <model.InteractiveSequence>TestInitializer.getValue("createAnimationInteractiveSequence", "sequence", "InteractiveSequence");
        let varpassword = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationInteractiveSequence", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequence(varname, varslideIndex, varsequence, varpassword, varfolder, varstorage), "createAnimationInteractiveSequence", field, varslideIndex);
            });
        });
    });

    it("invalid sequence test", () => {
        const field = "sequence";
        let varname = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequence", "slideIndex", "number");
        let varsequence = <model.InteractiveSequence>TestInitializer.getValue("createAnimationInteractiveSequence", "sequence", "InteractiveSequence");
        let varpassword = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "storage", "string");
        varsequence = <model.InteractiveSequence>TestInitializer.invalidizeValue(varsequence, field, "InteractiveSequence", "createAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationInteractiveSequence", field, varsequence).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequence(varname, varslideIndex, varsequence, varpassword, varfolder, varstorage), "createAnimationInteractiveSequence", field, varsequence);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequence", "slideIndex", "number");
        let varsequence = <model.InteractiveSequence>TestInitializer.getValue("createAnimationInteractiveSequence", "sequence", "InteractiveSequence");
        let varpassword = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationInteractiveSequence", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequence(varname, varslideIndex, varsequence, varpassword, varfolder, varstorage), "createAnimationInteractiveSequence", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequence", "slideIndex", "number");
        let varsequence = <model.InteractiveSequence>TestInitializer.getValue("createAnimationInteractiveSequence", "sequence", "InteractiveSequence");
        let varpassword = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationInteractiveSequence", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequence(varname, varslideIndex, varsequence, varpassword, varfolder, varstorage), "createAnimationInteractiveSequence", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequence", "slideIndex", "number");
        let varsequence = <model.InteractiveSequence>TestInitializer.getValue("createAnimationInteractiveSequence", "sequence", "InteractiveSequence");
        let varpassword = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationInteractiveSequence", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationInteractiveSequence", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequence(varname, varslideIndex, varsequence, varpassword, varfolder, varstorage), "createAnimationInteractiveSequence", field, varstorage);
            });
        });
    });
});

describe("Tests for createAnimationInteractiveSequenceEffect", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "slideIndex", "number");
            let varsequenceIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
            let vareffect = <model.Effect>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "effect", "Effect");
            let varpassword = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "storage", "string");
            return TestInitializer.initialize("createAnimationInteractiveSequenceEffect", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), false, "createAnimationInteractiveSequenceEffect");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationInteractiveSequenceEffect", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), "createAnimationInteractiveSequenceEffect", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationInteractiveSequenceEffect", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), "createAnimationInteractiveSequenceEffect", field, varslideIndex);
            });
        });
    });

    it("invalid sequenceIndex test", () => {
        const field = "sequenceIndex";
        let varname = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "storage", "string");
        varsequenceIndex = <number>TestInitializer.invalidizeValue(varsequenceIndex, field, "number", "createAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationInteractiveSequenceEffect", field, varsequenceIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), "createAnimationInteractiveSequenceEffect", field, varsequenceIndex);
            });
        });
    });

    it("invalid effect test", () => {
        const field = "effect";
        let varname = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "storage", "string");
        vareffect = <model.Effect>TestInitializer.invalidizeValue(vareffect, field, "Effect", "createAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationInteractiveSequenceEffect", field, vareffect).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), "createAnimationInteractiveSequenceEffect", field, vareffect);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationInteractiveSequenceEffect", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), "createAnimationInteractiveSequenceEffect", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationInteractiveSequenceEffect", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), "createAnimationInteractiveSequenceEffect", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createAnimationInteractiveSequenceEffect", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createAnimationInteractiveSequenceEffect", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffect, varpassword, varfolder, varstorage), "createAnimationInteractiveSequenceEffect", field, varstorage);
            });
        });
    });
});

describe("Tests for createChartCategory", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createChartCategory", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createChartCategory", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("createChartCategory", "shapeIndex", "number");
            let varcategory = <model.ChartCategory>TestInitializer.getValue("createChartCategory", "category", "ChartCategory");
            let varpassword = <string>TestInitializer.getValue("createChartCategory", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createChartCategory", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createChartCategory", "storage", "string");
            return TestInitializer.initialize("createChartCategory", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), false, "createChartCategory");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartCategory", "shapeIndex", "number");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("createChartCategory", "category", "ChartCategory");
        let varpassword = <string>TestInitializer.getValue("createChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartCategory", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartCategory", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), "createChartCategory", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartCategory", "shapeIndex", "number");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("createChartCategory", "category", "ChartCategory");
        let varpassword = <string>TestInitializer.getValue("createChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartCategory", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartCategory", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), "createChartCategory", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("createChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartCategory", "shapeIndex", "number");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("createChartCategory", "category", "ChartCategory");
        let varpassword = <string>TestInitializer.getValue("createChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartCategory", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "createChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartCategory", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), "createChartCategory", field, varshapeIndex);
            });
        });
    });

    it("invalid category test", () => {
        const field = "category";
        let varname = <string>TestInitializer.getValue("createChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartCategory", "shapeIndex", "number");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("createChartCategory", "category", "ChartCategory");
        let varpassword = <string>TestInitializer.getValue("createChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartCategory", "storage", "string");
        varcategory = <model.ChartCategory>TestInitializer.invalidizeValue(varcategory, field, "ChartCategory", "createChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartCategory", field, varcategory).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), "createChartCategory", field, varcategory);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartCategory", "shapeIndex", "number");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("createChartCategory", "category", "ChartCategory");
        let varpassword = <string>TestInitializer.getValue("createChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartCategory", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartCategory", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), "createChartCategory", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartCategory", "shapeIndex", "number");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("createChartCategory", "category", "ChartCategory");
        let varpassword = <string>TestInitializer.getValue("createChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartCategory", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartCategory", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), "createChartCategory", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartCategory", "shapeIndex", "number");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("createChartCategory", "category", "ChartCategory");
        let varpassword = <string>TestInitializer.getValue("createChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartCategory", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartCategory", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartCategory(varname, varslideIndex, varshapeIndex, varcategory, varpassword, varfolder, varstorage), "createChartCategory", field, varstorage);
            });
        });
    });
});

describe("Tests for createChartDataPoint", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createChartDataPoint", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createChartDataPoint", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("createChartDataPoint", "shapeIndex", "number");
            let varseriesIndex = <number>TestInitializer.getValue("createChartDataPoint", "seriesIndex", "number");
            let vardataPoint = <model.DataPoint>TestInitializer.getValue("createChartDataPoint", "dataPoint", "DataPoint");
            let varpassword = <string>TestInitializer.getValue("createChartDataPoint", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createChartDataPoint", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createChartDataPoint", "storage", "string");
            return TestInitializer.initialize("createChartDataPoint", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), false, "createChartDataPoint");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("createChartDataPoint", "seriesIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("createChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("createChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartDataPoint", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartDataPoint", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "createChartDataPoint", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("createChartDataPoint", "seriesIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("createChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("createChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartDataPoint", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartDataPoint", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "createChartDataPoint", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("createChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("createChartDataPoint", "seriesIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("createChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("createChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartDataPoint", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "createChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartDataPoint", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "createChartDataPoint", field, varshapeIndex);
            });
        });
    });

    it("invalid seriesIndex test", () => {
        const field = "seriesIndex";
        let varname = <string>TestInitializer.getValue("createChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("createChartDataPoint", "seriesIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("createChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("createChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartDataPoint", "storage", "string");
        varseriesIndex = <number>TestInitializer.invalidizeValue(varseriesIndex, field, "number", "createChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartDataPoint", field, varseriesIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "createChartDataPoint", field, varseriesIndex);
            });
        });
    });

    it("invalid dataPoint test", () => {
        const field = "dataPoint";
        let varname = <string>TestInitializer.getValue("createChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("createChartDataPoint", "seriesIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("createChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("createChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartDataPoint", "storage", "string");
        vardataPoint = <model.DataPoint>TestInitializer.invalidizeValue(vardataPoint, field, "DataPoint", "createChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartDataPoint", field, vardataPoint).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "createChartDataPoint", field, vardataPoint);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("createChartDataPoint", "seriesIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("createChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("createChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartDataPoint", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartDataPoint", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "createChartDataPoint", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("createChartDataPoint", "seriesIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("createChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("createChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartDataPoint", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartDataPoint", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "createChartDataPoint", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("createChartDataPoint", "seriesIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("createChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("createChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartDataPoint", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartDataPoint", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, vardataPoint, varpassword, varfolder, varstorage), "createChartDataPoint", field, varstorage);
            });
        });
    });
});

describe("Tests for createChartSeries", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createChartSeries", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createChartSeries", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("createChartSeries", "shapeIndex", "number");
            let varseries = <model.Series>TestInitializer.getValue("createChartSeries", "series", "Series");
            let varpassword = <string>TestInitializer.getValue("createChartSeries", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createChartSeries", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createChartSeries", "storage", "string");
            return TestInitializer.initialize("createChartSeries", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), false, "createChartSeries");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartSeries", "shapeIndex", "number");
        let varseries = <model.Series>TestInitializer.getValue("createChartSeries", "series", "Series");
        let varpassword = <string>TestInitializer.getValue("createChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartSeries", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartSeries", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), "createChartSeries", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartSeries", "shapeIndex", "number");
        let varseries = <model.Series>TestInitializer.getValue("createChartSeries", "series", "Series");
        let varpassword = <string>TestInitializer.getValue("createChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartSeries", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartSeries", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), "createChartSeries", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("createChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartSeries", "shapeIndex", "number");
        let varseries = <model.Series>TestInitializer.getValue("createChartSeries", "series", "Series");
        let varpassword = <string>TestInitializer.getValue("createChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartSeries", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "createChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartSeries", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), "createChartSeries", field, varshapeIndex);
            });
        });
    });

    it("invalid series test", () => {
        const field = "series";
        let varname = <string>TestInitializer.getValue("createChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartSeries", "shapeIndex", "number");
        let varseries = <model.Series>TestInitializer.getValue("createChartSeries", "series", "Series");
        let varpassword = <string>TestInitializer.getValue("createChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartSeries", "storage", "string");
        varseries = <model.Series>TestInitializer.invalidizeValue(varseries, field, "Series", "createChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartSeries", field, varseries).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), "createChartSeries", field, varseries);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartSeries", "shapeIndex", "number");
        let varseries = <model.Series>TestInitializer.getValue("createChartSeries", "series", "Series");
        let varpassword = <string>TestInitializer.getValue("createChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartSeries", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartSeries", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), "createChartSeries", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartSeries", "shapeIndex", "number");
        let varseries = <model.Series>TestInitializer.getValue("createChartSeries", "series", "Series");
        let varpassword = <string>TestInitializer.getValue("createChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartSeries", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartSeries", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), "createChartSeries", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createChartSeries", "shapeIndex", "number");
        let varseries = <model.Series>TestInitializer.getValue("createChartSeries", "series", "Series");
        let varpassword = <string>TestInitializer.getValue("createChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createChartSeries", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createChartSeries", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createChartSeries(varname, varslideIndex, varshapeIndex, varseries, varpassword, varfolder, varstorage), "createChartSeries", field, varstorage);
            });
        });
    });
});

describe("Tests for createComment", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createComment", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createComment", "slideIndex", "number");
            let vardto = <model.SlideComment>TestInitializer.getValue("createComment", "dto", "SlideComment");
            let varpassword = <string>TestInitializer.getValue("createComment", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createComment", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createComment", "storage", "string");
            return TestInitializer.initialize("createComment", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createComment(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), false, "createComment");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createComment", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createComment", "slideIndex", "number");
        let vardto = <model.SlideComment>TestInitializer.getValue("createComment", "dto", "SlideComment");
        let varpassword = <string>TestInitializer.getValue("createComment", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createComment", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createComment", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createComment");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createComment", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createComment(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "createComment", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createComment", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createComment", "slideIndex", "number");
        let vardto = <model.SlideComment>TestInitializer.getValue("createComment", "dto", "SlideComment");
        let varpassword = <string>TestInitializer.getValue("createComment", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createComment", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createComment", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createComment");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createComment", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createComment(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "createComment", field, varslideIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("createComment", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createComment", "slideIndex", "number");
        let vardto = <model.SlideComment>TestInitializer.getValue("createComment", "dto", "SlideComment");
        let varpassword = <string>TestInitializer.getValue("createComment", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createComment", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createComment", "storage", "string");
        vardto = <model.SlideComment>TestInitializer.invalidizeValue(vardto, field, "SlideComment", "createComment");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createComment", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createComment(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "createComment", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createComment", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createComment", "slideIndex", "number");
        let vardto = <model.SlideComment>TestInitializer.getValue("createComment", "dto", "SlideComment");
        let varpassword = <string>TestInitializer.getValue("createComment", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createComment", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createComment", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createComment");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createComment", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createComment(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "createComment", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createComment", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createComment", "slideIndex", "number");
        let vardto = <model.SlideComment>TestInitializer.getValue("createComment", "dto", "SlideComment");
        let varpassword = <string>TestInitializer.getValue("createComment", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createComment", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createComment", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createComment");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createComment", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createComment(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "createComment", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createComment", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createComment", "slideIndex", "number");
        let vardto = <model.SlideComment>TestInitializer.getValue("createComment", "dto", "SlideComment");
        let varpassword = <string>TestInitializer.getValue("createComment", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createComment", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createComment", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createComment");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createComment", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createComment(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "createComment", field, varstorage);
            });
        });
    });
});

describe("Tests for createCommentOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("createCommentOnline", "document");
            let varslideIndex = <number>TestInitializer.getValue("createCommentOnline", "slideIndex", "number");
            let vardto = <model.SlideComment>TestInitializer.getValue("createCommentOnline", "dto", "SlideComment");
            let varpassword = <string>TestInitializer.getValue("createCommentOnline", "password", "string");
            return TestInitializer.initialize("createCommentOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createCommentOnline(vardocument, varslideIndex, vardto, varpassword), true, "createCommentOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("createCommentOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("createCommentOnline", "slideIndex", "number");
        let vardto = <model.SlideComment>TestInitializer.getValue("createCommentOnline", "dto", "SlideComment");
        let varpassword = <string>TestInitializer.getValue("createCommentOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "createCommentOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createCommentOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createCommentOnline(vardocument, varslideIndex, vardto, varpassword), "createCommentOnline", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("createCommentOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("createCommentOnline", "slideIndex", "number");
        let vardto = <model.SlideComment>TestInitializer.getValue("createCommentOnline", "dto", "SlideComment");
        let varpassword = <string>TestInitializer.getValue("createCommentOnline", "password", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createCommentOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createCommentOnline", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createCommentOnline(vardocument, varslideIndex, vardto, varpassword), "createCommentOnline", field, varslideIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let vardocument = <Buffer>TestInitializer.getStreamValue("createCommentOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("createCommentOnline", "slideIndex", "number");
        let vardto = <model.SlideComment>TestInitializer.getValue("createCommentOnline", "dto", "SlideComment");
        let varpassword = <string>TestInitializer.getValue("createCommentOnline", "password", "string");
        vardto = <model.SlideComment>TestInitializer.invalidizeValue(vardto, field, "SlideComment", "createCommentOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createCommentOnline", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createCommentOnline(vardocument, varslideIndex, vardto, varpassword), "createCommentOnline", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("createCommentOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("createCommentOnline", "slideIndex", "number");
        let vardto = <model.SlideComment>TestInitializer.getValue("createCommentOnline", "dto", "SlideComment");
        let varpassword = <string>TestInitializer.getValue("createCommentOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createCommentOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createCommentOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createCommentOnline(vardocument, varslideIndex, vardto, varpassword), "createCommentOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for createFolder", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("createFolder", "path", "string");
            let varstorageName = <string>TestInitializer.getValue("createFolder", "storageName", "string");
            return TestInitializer.initialize("createFolder", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createFolder(varpath, varstorageName), false, "createFolder");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("createFolder", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("createFolder", "storageName", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "createFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createFolder", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createFolder(varpath, varstorageName), "createFolder", field, varpath);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("createFolder", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("createFolder", "storageName", "string");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "createFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createFolder", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createFolder(varpath, varstorageName), "createFolder", field, varstorageName);
            });
        });
    });
});

describe("Tests for createImageWatermark", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createImageWatermark", "name", "string");
            let varimage = <Buffer>TestInitializer.getStreamValue("createImageWatermark", "image");
            let varpictureFrame = <model.PictureFrame>TestInitializer.getValue("createImageWatermark", "pictureFrame", "PictureFrame");
            let varpassword = <string>TestInitializer.getValue("createImageWatermark", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createImageWatermark", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createImageWatermark", "storage", "string");
            return TestInitializer.initialize("createImageWatermark", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createImageWatermark(varname, varimage, varpictureFrame, varpassword, varfolder, varstorage), false, "createImageWatermark");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createImageWatermark", "name", "string");
        let varimage = <Buffer>TestInitializer.getStreamValue("createImageWatermark", "image");
        let varpictureFrame = <model.PictureFrame>TestInitializer.getValue("createImageWatermark", "pictureFrame", "PictureFrame");
        let varpassword = <string>TestInitializer.getValue("createImageWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createImageWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createImageWatermark", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createImageWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createImageWatermark", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createImageWatermark(varname, varimage, varpictureFrame, varpassword, varfolder, varstorage), "createImageWatermark", field, varname);
            });
        });
    });

    it("invalid image test", () => {
        const field = "image";
        let varname = <string>TestInitializer.getValue("createImageWatermark", "name", "string");
        let varimage = <Buffer>TestInitializer.getStreamValue("createImageWatermark", "image");
        let varpictureFrame = <model.PictureFrame>TestInitializer.getValue("createImageWatermark", "pictureFrame", "PictureFrame");
        let varpassword = <string>TestInitializer.getValue("createImageWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createImageWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createImageWatermark", "storage", "string");
        varimage = <Buffer>TestInitializer.invalidizeValue(varimage, field, "Buffer", "createImageWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createImageWatermark", field, varimage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createImageWatermark(varname, varimage, varpictureFrame, varpassword, varfolder, varstorage), "createImageWatermark", field, varimage);
            });
        });
    });

    it("invalid pictureFrame test", () => {
        const field = "pictureFrame";
        let varname = <string>TestInitializer.getValue("createImageWatermark", "name", "string");
        let varimage = <Buffer>TestInitializer.getStreamValue("createImageWatermark", "image");
        let varpictureFrame = <model.PictureFrame>TestInitializer.getValue("createImageWatermark", "pictureFrame", "PictureFrame");
        let varpassword = <string>TestInitializer.getValue("createImageWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createImageWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createImageWatermark", "storage", "string");
        varpictureFrame = <model.PictureFrame>TestInitializer.invalidizeValue(varpictureFrame, field, "PictureFrame", "createImageWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createImageWatermark", field, varpictureFrame).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createImageWatermark(varname, varimage, varpictureFrame, varpassword, varfolder, varstorage), "createImageWatermark", field, varpictureFrame);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createImageWatermark", "name", "string");
        let varimage = <Buffer>TestInitializer.getStreamValue("createImageWatermark", "image");
        let varpictureFrame = <model.PictureFrame>TestInitializer.getValue("createImageWatermark", "pictureFrame", "PictureFrame");
        let varpassword = <string>TestInitializer.getValue("createImageWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createImageWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createImageWatermark", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createImageWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createImageWatermark", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createImageWatermark(varname, varimage, varpictureFrame, varpassword, varfolder, varstorage), "createImageWatermark", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createImageWatermark", "name", "string");
        let varimage = <Buffer>TestInitializer.getStreamValue("createImageWatermark", "image");
        let varpictureFrame = <model.PictureFrame>TestInitializer.getValue("createImageWatermark", "pictureFrame", "PictureFrame");
        let varpassword = <string>TestInitializer.getValue("createImageWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createImageWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createImageWatermark", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createImageWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createImageWatermark", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createImageWatermark(varname, varimage, varpictureFrame, varpassword, varfolder, varstorage), "createImageWatermark", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createImageWatermark", "name", "string");
        let varimage = <Buffer>TestInitializer.getStreamValue("createImageWatermark", "image");
        let varpictureFrame = <model.PictureFrame>TestInitializer.getValue("createImageWatermark", "pictureFrame", "PictureFrame");
        let varpassword = <string>TestInitializer.getValue("createImageWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createImageWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createImageWatermark", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createImageWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createImageWatermark", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createImageWatermark(varname, varimage, varpictureFrame, varpassword, varfolder, varstorage), "createImageWatermark", field, varstorage);
            });
        });
    });
});

describe("Tests for createImageWatermarkOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("createImageWatermarkOnline", "document");
            let varimage = <Buffer>TestInitializer.getStreamValue("createImageWatermarkOnline", "image");
            let varpictureFrame = <model.PictureFrame>TestInitializer.getValue("createImageWatermarkOnline", "pictureFrame", "PictureFrame");
            let varpassword = <string>TestInitializer.getValue("createImageWatermarkOnline", "password", "string");
            return TestInitializer.initialize("createImageWatermarkOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createImageWatermarkOnline(vardocument, varimage, varpictureFrame, varpassword), true, "createImageWatermarkOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("createImageWatermarkOnline", "document");
        let varimage = <Buffer>TestInitializer.getStreamValue("createImageWatermarkOnline", "image");
        let varpictureFrame = <model.PictureFrame>TestInitializer.getValue("createImageWatermarkOnline", "pictureFrame", "PictureFrame");
        let varpassword = <string>TestInitializer.getValue("createImageWatermarkOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "createImageWatermarkOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createImageWatermarkOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createImageWatermarkOnline(vardocument, varimage, varpictureFrame, varpassword), "createImageWatermarkOnline", field, vardocument);
            });
        });
    });

    it("invalid image test", () => {
        const field = "image";
        let vardocument = <Buffer>TestInitializer.getStreamValue("createImageWatermarkOnline", "document");
        let varimage = <Buffer>TestInitializer.getStreamValue("createImageWatermarkOnline", "image");
        let varpictureFrame = <model.PictureFrame>TestInitializer.getValue("createImageWatermarkOnline", "pictureFrame", "PictureFrame");
        let varpassword = <string>TestInitializer.getValue("createImageWatermarkOnline", "password", "string");
        varimage = <Buffer>TestInitializer.invalidizeValue(varimage, field, "Buffer", "createImageWatermarkOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createImageWatermarkOnline", field, varimage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createImageWatermarkOnline(vardocument, varimage, varpictureFrame, varpassword), "createImageWatermarkOnline", field, varimage);
            });
        });
    });

    it("invalid pictureFrame test", () => {
        const field = "pictureFrame";
        let vardocument = <Buffer>TestInitializer.getStreamValue("createImageWatermarkOnline", "document");
        let varimage = <Buffer>TestInitializer.getStreamValue("createImageWatermarkOnline", "image");
        let varpictureFrame = <model.PictureFrame>TestInitializer.getValue("createImageWatermarkOnline", "pictureFrame", "PictureFrame");
        let varpassword = <string>TestInitializer.getValue("createImageWatermarkOnline", "password", "string");
        varpictureFrame = <model.PictureFrame>TestInitializer.invalidizeValue(varpictureFrame, field, "PictureFrame", "createImageWatermarkOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createImageWatermarkOnline", field, varpictureFrame).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createImageWatermarkOnline(vardocument, varimage, varpictureFrame, varpassword), "createImageWatermarkOnline", field, varpictureFrame);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("createImageWatermarkOnline", "document");
        let varimage = <Buffer>TestInitializer.getStreamValue("createImageWatermarkOnline", "image");
        let varpictureFrame = <model.PictureFrame>TestInitializer.getValue("createImageWatermarkOnline", "pictureFrame", "PictureFrame");
        let varpassword = <string>TestInitializer.getValue("createImageWatermarkOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createImageWatermarkOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createImageWatermarkOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createImageWatermarkOnline(vardocument, varimage, varpictureFrame, varpassword), "createImageWatermarkOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for createNotesSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createNotesSlide", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createNotesSlide", "slideIndex", "number");
            let vardto = <model.NotesSlide>TestInitializer.getValue("createNotesSlide", "dto", "NotesSlide");
            let varpassword = <string>TestInitializer.getValue("createNotesSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createNotesSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createNotesSlide", "storage", "string");
            return TestInitializer.initialize("createNotesSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), false, "createNotesSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlide", "slideIndex", "number");
        let vardto = <model.NotesSlide>TestInitializer.getValue("createNotesSlide", "dto", "NotesSlide");
        let varpassword = <string>TestInitializer.getValue("createNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlide", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "createNotesSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlide", "slideIndex", "number");
        let vardto = <model.NotesSlide>TestInitializer.getValue("createNotesSlide", "dto", "NotesSlide");
        let varpassword = <string>TestInitializer.getValue("createNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlide", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "createNotesSlide", field, varslideIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("createNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlide", "slideIndex", "number");
        let vardto = <model.NotesSlide>TestInitializer.getValue("createNotesSlide", "dto", "NotesSlide");
        let varpassword = <string>TestInitializer.getValue("createNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlide", "storage", "string");
        vardto = <model.NotesSlide>TestInitializer.invalidizeValue(vardto, field, "NotesSlide", "createNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlide", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "createNotesSlide", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlide", "slideIndex", "number");
        let vardto = <model.NotesSlide>TestInitializer.getValue("createNotesSlide", "dto", "NotesSlide");
        let varpassword = <string>TestInitializer.getValue("createNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlide", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "createNotesSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlide", "slideIndex", "number");
        let vardto = <model.NotesSlide>TestInitializer.getValue("createNotesSlide", "dto", "NotesSlide");
        let varpassword = <string>TestInitializer.getValue("createNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlide", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "createNotesSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlide", "slideIndex", "number");
        let vardto = <model.NotesSlide>TestInitializer.getValue("createNotesSlide", "dto", "NotesSlide");
        let varpassword = <string>TestInitializer.getValue("createNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlide", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "createNotesSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for createNotesSlideParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createNotesSlideParagraph", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "shapeIndex", "number");
            let vardto = <model.Paragraph>TestInitializer.getValue("createNotesSlideParagraph", "dto", "Paragraph");
            let varposition = <number>TestInitializer.getValue("createNotesSlideParagraph", "position", "number");
            let varpassword = <string>TestInitializer.getValue("createNotesSlideParagraph", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createNotesSlideParagraph", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createNotesSlideParagraph", "storage", "string");
            return TestInitializer.initialize("createNotesSlideParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), false, "createNotesSlideParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createNotesSlideParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createNotesSlideParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideParagraph", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlideParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createNotesSlideParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createNotesSlideParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideParagraph", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlideParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("createNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createNotesSlideParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createNotesSlideParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideParagraph", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "createNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlideParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("createNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createNotesSlideParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createNotesSlideParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideParagraph", "storage", "string");
        vardto = <model.Paragraph>TestInitializer.invalidizeValue(vardto, field, "Paragraph", "createNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideParagraph", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlideParagraph", field, vardto);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("createNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createNotesSlideParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createNotesSlideParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideParagraph", "storage", "string");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "createNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideParagraph", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlideParagraph", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createNotesSlideParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createNotesSlideParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideParagraph", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlideParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createNotesSlideParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createNotesSlideParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideParagraph", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlideParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlideParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createNotesSlideParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createNotesSlideParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideParagraph", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlideParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for createNotesSlidePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createNotesSlidePortion", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "paragraphIndex", "number");
            let vardto = <model.Portion>TestInitializer.getValue("createNotesSlidePortion", "dto", "Portion");
            let varposition = <number>TestInitializer.getValue("createNotesSlidePortion", "position", "number");
            let varpassword = <string>TestInitializer.getValue("createNotesSlidePortion", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createNotesSlidePortion", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createNotesSlidePortion", "storage", "string");
            return TestInitializer.initialize("createNotesSlidePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), false, "createNotesSlidePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createNotesSlidePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createNotesSlidePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlidePortion", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlidePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlidePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createNotesSlidePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createNotesSlidePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlidePortion", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlidePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlidePortion", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("createNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createNotesSlidePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createNotesSlidePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlidePortion", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "createNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlidePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlidePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("createNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createNotesSlidePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createNotesSlidePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlidePortion", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "createNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlidePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlidePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("createNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createNotesSlidePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createNotesSlidePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlidePortion", "storage", "string");
        vardto = <model.Portion>TestInitializer.invalidizeValue(vardto, field, "Portion", "createNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlidePortion", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlidePortion", field, vardto);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("createNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createNotesSlidePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createNotesSlidePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlidePortion", "storage", "string");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "createNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlidePortion", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlidePortion", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createNotesSlidePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createNotesSlidePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlidePortion", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlidePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlidePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createNotesSlidePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createNotesSlidePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlidePortion", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlidePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlidePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createNotesSlidePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createNotesSlidePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createNotesSlidePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlidePortion", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlidePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createNotesSlidePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for createNotesSlideShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createNotesSlideShape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createNotesSlideShape", "slideIndex", "number");
            let vardto = <model.ShapeBase>TestInitializer.getValue("createNotesSlideShape", "dto", "ShapeBase");
            let varshapeToClone = <number>TestInitializer.getValue("createNotesSlideShape", "shapeToClone", "number");
            let varposition = <number>TestInitializer.getValue("createNotesSlideShape", "position", "number");
            let varpassword = <string>TestInitializer.getValue("createNotesSlideShape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createNotesSlideShape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createNotesSlideShape", "storage", "string");
            return TestInitializer.initialize("createNotesSlideShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), false, "createNotesSlideShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createNotesSlideShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createNotesSlideShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createNotesSlideShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideShape", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createNotesSlideShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createNotesSlideShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createNotesSlideShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createNotesSlideShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideShape", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createNotesSlideShape", field, varslideIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("createNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createNotesSlideShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createNotesSlideShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createNotesSlideShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideShape", "storage", "string");
        vardto = <model.ShapeBase>TestInitializer.invalidizeValue(vardto, field, "ShapeBase", "createNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideShape", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createNotesSlideShape", field, vardto);
            });
        });
    });

    it("invalid shapeToClone test", () => {
        const field = "shapeToClone";
        let varname = <string>TestInitializer.getValue("createNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createNotesSlideShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createNotesSlideShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createNotesSlideShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideShape", "storage", "string");
        varshapeToClone = <number>TestInitializer.invalidizeValue(varshapeToClone, field, "number", "createNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideShape", field, varshapeToClone).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createNotesSlideShape", field, varshapeToClone);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("createNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createNotesSlideShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createNotesSlideShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createNotesSlideShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideShape", "storage", "string");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "createNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideShape", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createNotesSlideShape", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createNotesSlideShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createNotesSlideShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createNotesSlideShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideShape", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createNotesSlideShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createNotesSlideShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createNotesSlideShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createNotesSlideShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideShape", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createNotesSlideShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createNotesSlideShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createNotesSlideShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createNotesSlideShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createNotesSlideShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createNotesSlideShape", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createNotesSlideShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createNotesSlideShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createNotesSlideShape", field, varstorage);
            });
        });
    });
});

describe("Tests for createParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createParagraph", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createParagraph", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("createParagraph", "shapeIndex", "number");
            let vardto = <model.Paragraph>TestInitializer.getValue("createParagraph", "dto", "Paragraph");
            let varposition = <number>TestInitializer.getValue("createParagraph", "position", "number");
            let varpassword = <string>TestInitializer.getValue("createParagraph", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createParagraph", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createParagraph", "storage", "string");
            return TestInitializer.initialize("createParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), false, "createParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createParagraph", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createParagraph", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("createParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createParagraph", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "createParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("createParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createParagraph", "storage", "string");
        vardto = <model.Paragraph>TestInitializer.invalidizeValue(vardto, field, "Paragraph", "createParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createParagraph", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createParagraph", field, vardto);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("createParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createParagraph", "storage", "string");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "createParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createParagraph", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createParagraph", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createParagraph", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createParagraph", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createParagraph", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createParagraph(varname, varslideIndex, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for createPortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createPortion", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createPortion", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("createPortion", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("createPortion", "paragraphIndex", "number");
            let vardto = <model.Portion>TestInitializer.getValue("createPortion", "dto", "Portion");
            let varposition = <number>TestInitializer.getValue("createPortion", "position", "number");
            let varpassword = <string>TestInitializer.getValue("createPortion", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createPortion", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createPortion", "storage", "string");
            return TestInitializer.initialize("createPortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), false, "createPortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createPortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createPortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createPortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPortion", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createPortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createPortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createPortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createPortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPortion", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createPortion", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("createPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createPortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createPortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createPortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPortion", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "createPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createPortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("createPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createPortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createPortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createPortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPortion", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "createPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createPortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("createPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createPortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createPortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createPortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPortion", "storage", "string");
        vardto = <model.Portion>TestInitializer.invalidizeValue(vardto, field, "Portion", "createPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPortion", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createPortion", field, vardto);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("createPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createPortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createPortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createPortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPortion", "storage", "string");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "createPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPortion", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createPortion", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createPortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createPortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createPortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPortion", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createPortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createPortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createPortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createPortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPortion", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createPortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("createPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createPortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createPortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createPortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPortion", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createPortion", field, varstorage);
            });
        });
    });
});

describe("Tests for createPresentation", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createPresentation", "name", "string");
            let vardata = <Buffer>TestInitializer.getStreamValue("createPresentation", "data");
            let varinputPassword = <string>TestInitializer.getValue("createPresentation", "inputPassword", "string");
            let varpassword = <string>TestInitializer.getValue("createPresentation", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createPresentation", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createPresentation", "storage", "string");
            return TestInitializer.initialize("createPresentation", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createPresentation(varname, vardata, varinputPassword, varpassword, varfolder, varstorage), false, "createPresentation");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createPresentation", "name", "string");
        let vardata = <Buffer>TestInitializer.getStreamValue("createPresentation", "data");
        let varinputPassword = <string>TestInitializer.getValue("createPresentation", "inputPassword", "string");
        let varpassword = <string>TestInitializer.getValue("createPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentation", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentation", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentation(varname, vardata, varinputPassword, varpassword, varfolder, varstorage), "createPresentation", field, varname);
            });
        });
    });

    it("invalid data test", () => {
        const field = "data";
        let varname = <string>TestInitializer.getValue("createPresentation", "name", "string");
        let vardata = <Buffer>TestInitializer.getStreamValue("createPresentation", "data");
        let varinputPassword = <string>TestInitializer.getValue("createPresentation", "inputPassword", "string");
        let varpassword = <string>TestInitializer.getValue("createPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentation", "storage", "string");
        vardata = <Buffer>TestInitializer.invalidizeValue(vardata, field, "Buffer", "createPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentation", field, vardata).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentation(varname, vardata, varinputPassword, varpassword, varfolder, varstorage), "createPresentation", field, vardata);
            });
        });
    });

    it("invalid inputPassword test", () => {
        const field = "inputPassword";
        let varname = <string>TestInitializer.getValue("createPresentation", "name", "string");
        let vardata = <Buffer>TestInitializer.getStreamValue("createPresentation", "data");
        let varinputPassword = <string>TestInitializer.getValue("createPresentation", "inputPassword", "string");
        let varpassword = <string>TestInitializer.getValue("createPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentation", "storage", "string");
        varinputPassword = <string>TestInitializer.invalidizeValue(varinputPassword, field, "string", "createPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentation", field, varinputPassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentation(varname, vardata, varinputPassword, varpassword, varfolder, varstorage), "createPresentation", field, varinputPassword);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createPresentation", "name", "string");
        let vardata = <Buffer>TestInitializer.getStreamValue("createPresentation", "data");
        let varinputPassword = <string>TestInitializer.getValue("createPresentation", "inputPassword", "string");
        let varpassword = <string>TestInitializer.getValue("createPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentation", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentation", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentation(varname, vardata, varinputPassword, varpassword, varfolder, varstorage), "createPresentation", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createPresentation", "name", "string");
        let vardata = <Buffer>TestInitializer.getStreamValue("createPresentation", "data");
        let varinputPassword = <string>TestInitializer.getValue("createPresentation", "inputPassword", "string");
        let varpassword = <string>TestInitializer.getValue("createPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentation", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentation", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentation(varname, vardata, varinputPassword, varpassword, varfolder, varstorage), "createPresentation", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createPresentation", "name", "string");
        let vardata = <Buffer>TestInitializer.getStreamValue("createPresentation", "data");
        let varinputPassword = <string>TestInitializer.getValue("createPresentation", "inputPassword", "string");
        let varpassword = <string>TestInitializer.getValue("createPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentation", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentation", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentation(varname, vardata, varinputPassword, varpassword, varfolder, varstorage), "createPresentation", field, varstorage);
            });
        });
    });
});

describe("Tests for createPresentationFromSource", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createPresentationFromSource", "name", "string");
            let varsourcePath = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePath", "string");
            let varsourcePassword = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePassword", "string");
            let varsourceStorage = <string>TestInitializer.getValue("createPresentationFromSource", "sourceStorage", "string");
            let varpassword = <string>TestInitializer.getValue("createPresentationFromSource", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createPresentationFromSource", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createPresentationFromSource", "storage", "string");
            return TestInitializer.initialize("createPresentationFromSource", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), false, "createPresentationFromSource");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createPresentationFromSource", "name", "string");
        let varsourcePath = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePath", "string");
        let varsourcePassword = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("createPresentationFromSource", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromSource", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromSource", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromSource", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createPresentationFromSource");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromSource", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "createPresentationFromSource", field, varname);
            });
        });
    });

    it("invalid sourcePath test", () => {
        const field = "sourcePath";
        let varname = <string>TestInitializer.getValue("createPresentationFromSource", "name", "string");
        let varsourcePath = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePath", "string");
        let varsourcePassword = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("createPresentationFromSource", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromSource", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromSource", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromSource", "storage", "string");
        varsourcePath = <string>TestInitializer.invalidizeValue(varsourcePath, field, "string", "createPresentationFromSource");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromSource", field, varsourcePath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "createPresentationFromSource", field, varsourcePath);
            });
        });
    });

    it("invalid sourcePassword test", () => {
        const field = "sourcePassword";
        let varname = <string>TestInitializer.getValue("createPresentationFromSource", "name", "string");
        let varsourcePath = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePath", "string");
        let varsourcePassword = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("createPresentationFromSource", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromSource", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromSource", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromSource", "storage", "string");
        varsourcePassword = <string>TestInitializer.invalidizeValue(varsourcePassword, field, "string", "createPresentationFromSource");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromSource", field, varsourcePassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "createPresentationFromSource", field, varsourcePassword);
            });
        });
    });

    it("invalid sourceStorage test", () => {
        const field = "sourceStorage";
        let varname = <string>TestInitializer.getValue("createPresentationFromSource", "name", "string");
        let varsourcePath = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePath", "string");
        let varsourcePassword = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("createPresentationFromSource", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromSource", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromSource", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromSource", "storage", "string");
        varsourceStorage = <string>TestInitializer.invalidizeValue(varsourceStorage, field, "string", "createPresentationFromSource");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromSource", field, varsourceStorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "createPresentationFromSource", field, varsourceStorage);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createPresentationFromSource", "name", "string");
        let varsourcePath = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePath", "string");
        let varsourcePassword = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("createPresentationFromSource", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromSource", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromSource", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromSource", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createPresentationFromSource");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromSource", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "createPresentationFromSource", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createPresentationFromSource", "name", "string");
        let varsourcePath = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePath", "string");
        let varsourcePassword = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("createPresentationFromSource", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromSource", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromSource", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromSource", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createPresentationFromSource");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromSource", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "createPresentationFromSource", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createPresentationFromSource", "name", "string");
        let varsourcePath = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePath", "string");
        let varsourcePassword = <string>TestInitializer.getValue("createPresentationFromSource", "sourcePassword", "string");
        let varsourceStorage = <string>TestInitializer.getValue("createPresentationFromSource", "sourceStorage", "string");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromSource", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromSource", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromSource", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createPresentationFromSource");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromSource", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromSource(varname, varsourcePath, varsourcePassword, varsourceStorage, varpassword, varfolder, varstorage), "createPresentationFromSource", field, varstorage);
            });
        });
    });
});

describe("Tests for createPresentationFromTemplate", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createPresentationFromTemplate", "name", "string");
            let vartemplatePath = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePath", "string");
            let vardata = <string>TestInitializer.getValue("createPresentationFromTemplate", "data", "string");
            let vartemplatePassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePassword", "string");
            let vartemplateStorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "templateStorage", "string");
            let varisImageDataEmbedded = <boolean>TestInitializer.getValue("createPresentationFromTemplate", "isImageDataEmbedded", "boolean");
            let varpassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createPresentationFromTemplate", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "storage", "string");
            return TestInitializer.initialize("createPresentationFromTemplate", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), false, "createPresentationFromTemplate");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createPresentationFromTemplate", "name", "string");
        let vartemplatePath = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePath", "string");
        let vardata = <string>TestInitializer.getValue("createPresentationFromTemplate", "data", "string");
        let vartemplatePassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePassword", "string");
        let vartemplateStorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "templateStorage", "string");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("createPresentationFromTemplate", "isImageDataEmbedded", "boolean");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromTemplate", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createPresentationFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromTemplate", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "createPresentationFromTemplate", field, varname);
            });
        });
    });

    it("invalid templatePath test", () => {
        const field = "templatePath";
        let varname = <string>TestInitializer.getValue("createPresentationFromTemplate", "name", "string");
        let vartemplatePath = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePath", "string");
        let vardata = <string>TestInitializer.getValue("createPresentationFromTemplate", "data", "string");
        let vartemplatePassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePassword", "string");
        let vartemplateStorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "templateStorage", "string");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("createPresentationFromTemplate", "isImageDataEmbedded", "boolean");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromTemplate", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "storage", "string");
        vartemplatePath = <string>TestInitializer.invalidizeValue(vartemplatePath, field, "string", "createPresentationFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromTemplate", field, vartemplatePath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "createPresentationFromTemplate", field, vartemplatePath);
            });
        });
    });

    it("invalid data test", () => {
        const field = "data";
        let varname = <string>TestInitializer.getValue("createPresentationFromTemplate", "name", "string");
        let vartemplatePath = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePath", "string");
        let vardata = <string>TestInitializer.getValue("createPresentationFromTemplate", "data", "string");
        let vartemplatePassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePassword", "string");
        let vartemplateStorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "templateStorage", "string");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("createPresentationFromTemplate", "isImageDataEmbedded", "boolean");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromTemplate", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "storage", "string");
        vardata = <string>TestInitializer.invalidizeValue(vardata, field, "string", "createPresentationFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromTemplate", field, vardata).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "createPresentationFromTemplate", field, vardata);
            });
        });
    });

    it("invalid templatePassword test", () => {
        const field = "templatePassword";
        let varname = <string>TestInitializer.getValue("createPresentationFromTemplate", "name", "string");
        let vartemplatePath = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePath", "string");
        let vardata = <string>TestInitializer.getValue("createPresentationFromTemplate", "data", "string");
        let vartemplatePassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePassword", "string");
        let vartemplateStorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "templateStorage", "string");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("createPresentationFromTemplate", "isImageDataEmbedded", "boolean");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromTemplate", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "storage", "string");
        vartemplatePassword = <string>TestInitializer.invalidizeValue(vartemplatePassword, field, "string", "createPresentationFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromTemplate", field, vartemplatePassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "createPresentationFromTemplate", field, vartemplatePassword);
            });
        });
    });

    it("invalid templateStorage test", () => {
        const field = "templateStorage";
        let varname = <string>TestInitializer.getValue("createPresentationFromTemplate", "name", "string");
        let vartemplatePath = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePath", "string");
        let vardata = <string>TestInitializer.getValue("createPresentationFromTemplate", "data", "string");
        let vartemplatePassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePassword", "string");
        let vartemplateStorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "templateStorage", "string");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("createPresentationFromTemplate", "isImageDataEmbedded", "boolean");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromTemplate", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "storage", "string");
        vartemplateStorage = <string>TestInitializer.invalidizeValue(vartemplateStorage, field, "string", "createPresentationFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromTemplate", field, vartemplateStorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "createPresentationFromTemplate", field, vartemplateStorage);
            });
        });
    });

    it("invalid isImageDataEmbedded test", () => {
        const field = "isImageDataEmbedded";
        let varname = <string>TestInitializer.getValue("createPresentationFromTemplate", "name", "string");
        let vartemplatePath = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePath", "string");
        let vardata = <string>TestInitializer.getValue("createPresentationFromTemplate", "data", "string");
        let vartemplatePassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePassword", "string");
        let vartemplateStorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "templateStorage", "string");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("createPresentationFromTemplate", "isImageDataEmbedded", "boolean");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromTemplate", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "storage", "string");
        varisImageDataEmbedded = <boolean>TestInitializer.invalidizeValue(varisImageDataEmbedded, field, "boolean", "createPresentationFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromTemplate", field, varisImageDataEmbedded).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "createPresentationFromTemplate", field, varisImageDataEmbedded);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createPresentationFromTemplate", "name", "string");
        let vartemplatePath = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePath", "string");
        let vardata = <string>TestInitializer.getValue("createPresentationFromTemplate", "data", "string");
        let vartemplatePassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePassword", "string");
        let vartemplateStorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "templateStorage", "string");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("createPresentationFromTemplate", "isImageDataEmbedded", "boolean");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromTemplate", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createPresentationFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromTemplate", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "createPresentationFromTemplate", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createPresentationFromTemplate", "name", "string");
        let vartemplatePath = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePath", "string");
        let vardata = <string>TestInitializer.getValue("createPresentationFromTemplate", "data", "string");
        let vartemplatePassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePassword", "string");
        let vartemplateStorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "templateStorage", "string");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("createPresentationFromTemplate", "isImageDataEmbedded", "boolean");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromTemplate", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createPresentationFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromTemplate", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "createPresentationFromTemplate", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createPresentationFromTemplate", "name", "string");
        let vartemplatePath = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePath", "string");
        let vardata = <string>TestInitializer.getValue("createPresentationFromTemplate", "data", "string");
        let vartemplatePassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "templatePassword", "string");
        let vartemplateStorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "templateStorage", "string");
        let varisImageDataEmbedded = <boolean>TestInitializer.getValue("createPresentationFromTemplate", "isImageDataEmbedded", "boolean");
        let varpassword = <string>TestInitializer.getValue("createPresentationFromTemplate", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createPresentationFromTemplate", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createPresentationFromTemplate", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createPresentationFromTemplate");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createPresentationFromTemplate", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createPresentationFromTemplate(varname, vartemplatePath, vardata, vartemplatePassword, vartemplateStorage, varisImageDataEmbedded, varpassword, varfolder, varstorage), "createPresentationFromTemplate", field, varstorage);
            });
        });
    });
});

describe("Tests for createSection", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createSection", "name", "string");
            let varsectionName = <string>TestInitializer.getValue("createSection", "sectionName", "string");
            let varslideIndex = <number>TestInitializer.getValue("createSection", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("createSection", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createSection", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createSection", "storage", "string");
            return TestInitializer.initialize("createSection", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createSection(varname, varsectionName, varslideIndex, varpassword, varfolder, varstorage), false, "createSection");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createSection", "name", "string");
        let varsectionName = <string>TestInitializer.getValue("createSection", "sectionName", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSection", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("createSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSection", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSection", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSection(varname, varsectionName, varslideIndex, varpassword, varfolder, varstorage), "createSection", field, varname);
            });
        });
    });

    it("invalid sectionName test", () => {
        const field = "sectionName";
        let varname = <string>TestInitializer.getValue("createSection", "name", "string");
        let varsectionName = <string>TestInitializer.getValue("createSection", "sectionName", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSection", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("createSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSection", "storage", "string");
        varsectionName = <string>TestInitializer.invalidizeValue(varsectionName, field, "string", "createSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSection", field, varsectionName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSection(varname, varsectionName, varslideIndex, varpassword, varfolder, varstorage), "createSection", field, varsectionName);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createSection", "name", "string");
        let varsectionName = <string>TestInitializer.getValue("createSection", "sectionName", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSection", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("createSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSection", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSection", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSection(varname, varsectionName, varslideIndex, varpassword, varfolder, varstorage), "createSection", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createSection", "name", "string");
        let varsectionName = <string>TestInitializer.getValue("createSection", "sectionName", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSection", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("createSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSection", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSection", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSection(varname, varsectionName, varslideIndex, varpassword, varfolder, varstorage), "createSection", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createSection", "name", "string");
        let varsectionName = <string>TestInitializer.getValue("createSection", "sectionName", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSection", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("createSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSection", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSection", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSection(varname, varsectionName, varslideIndex, varpassword, varfolder, varstorage), "createSection", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createSection", "name", "string");
        let varsectionName = <string>TestInitializer.getValue("createSection", "sectionName", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSection", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("createSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSection", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSection", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSection(varname, varsectionName, varslideIndex, varpassword, varfolder, varstorage), "createSection", field, varstorage);
            });
        });
    });
});

describe("Tests for createShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createShape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createShape", "slideIndex", "number");
            let vardto = <model.ShapeBase>TestInitializer.getValue("createShape", "dto", "ShapeBase");
            let varshapeToClone = <number>TestInitializer.getValue("createShape", "shapeToClone", "number");
            let varposition = <number>TestInitializer.getValue("createShape", "position", "number");
            let varpassword = <string>TestInitializer.getValue("createShape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createShape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createShape", "storage", "string");
            return TestInitializer.initialize("createShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), false, "createShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createShape", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createShape", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createShape", field, varslideIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("createShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createShape", "storage", "string");
        vardto = <model.ShapeBase>TestInitializer.invalidizeValue(vardto, field, "ShapeBase", "createShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createShape", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createShape", field, vardto);
            });
        });
    });

    it("invalid shapeToClone test", () => {
        const field = "shapeToClone";
        let varname = <string>TestInitializer.getValue("createShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createShape", "storage", "string");
        varshapeToClone = <number>TestInitializer.invalidizeValue(varshapeToClone, field, "number", "createShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createShape", field, varshapeToClone).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createShape", field, varshapeToClone);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("createShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createShape", "storage", "string");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "createShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createShape", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createShape", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createShape", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createShape", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createShape", "slideIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createShape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createShape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createShape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createShape", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createShape(varname, varslideIndex, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createShape", field, varstorage);
            });
        });
    });
});

describe("Tests for createSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createSlide", "name", "string");
            let varlayoutAlias = <string>TestInitializer.getValue("createSlide", "layoutAlias", "string");
            let varposition = <number>TestInitializer.getValue("createSlide", "position", "number");
            let varpassword = <string>TestInitializer.getValue("createSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createSlide", "storage", "string");
            return TestInitializer.initialize("createSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createSlide(varname, varlayoutAlias, varposition, varpassword, varfolder, varstorage), false, "createSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createSlide", "name", "string");
        let varlayoutAlias = <string>TestInitializer.getValue("createSlide", "layoutAlias", "string");
        let varposition = <number>TestInitializer.getValue("createSlide", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSlide", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSlide(varname, varlayoutAlias, varposition, varpassword, varfolder, varstorage), "createSlide", field, varname);
            });
        });
    });

    it("invalid layoutAlias test", () => {
        const field = "layoutAlias";
        let varname = <string>TestInitializer.getValue("createSlide", "name", "string");
        let varlayoutAlias = <string>TestInitializer.getValue("createSlide", "layoutAlias", "string");
        let varposition = <number>TestInitializer.getValue("createSlide", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSlide", "storage", "string");
        varlayoutAlias = <string>TestInitializer.invalidizeValue(varlayoutAlias, field, "string", "createSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSlide", field, varlayoutAlias).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSlide(varname, varlayoutAlias, varposition, varpassword, varfolder, varstorage), "createSlide", field, varlayoutAlias);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("createSlide", "name", "string");
        let varlayoutAlias = <string>TestInitializer.getValue("createSlide", "layoutAlias", "string");
        let varposition = <number>TestInitializer.getValue("createSlide", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSlide", "storage", "string");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "createSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSlide", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSlide(varname, varlayoutAlias, varposition, varpassword, varfolder, varstorage), "createSlide", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createSlide", "name", "string");
        let varlayoutAlias = <string>TestInitializer.getValue("createSlide", "layoutAlias", "string");
        let varposition = <number>TestInitializer.getValue("createSlide", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSlide", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSlide(varname, varlayoutAlias, varposition, varpassword, varfolder, varstorage), "createSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createSlide", "name", "string");
        let varlayoutAlias = <string>TestInitializer.getValue("createSlide", "layoutAlias", "string");
        let varposition = <number>TestInitializer.getValue("createSlide", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSlide", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSlide(varname, varlayoutAlias, varposition, varpassword, varfolder, varstorage), "createSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createSlide", "name", "string");
        let varlayoutAlias = <string>TestInitializer.getValue("createSlide", "layoutAlias", "string");
        let varposition = <number>TestInitializer.getValue("createSlide", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSlide", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSlide(varname, varlayoutAlias, varposition, varpassword, varfolder, varstorage), "createSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for createSubshape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createSubshape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createSubshape", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("createSubshape", "path", "string");
            let vardto = <model.ShapeBase>TestInitializer.getValue("createSubshape", "dto", "ShapeBase");
            let varshapeToClone = <number>TestInitializer.getValue("createSubshape", "shapeToClone", "number");
            let varposition = <number>TestInitializer.getValue("createSubshape", "position", "number");
            let varpassword = <string>TestInitializer.getValue("createSubshape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createSubshape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createSubshape", "storage", "string");
            return TestInitializer.initialize("createSubshape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), false, "createSubshape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshape", "path", "string");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createSubshape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createSubshape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createSubshape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshape", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createSubshape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshape", "path", "string");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createSubshape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createSubshape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createSubshape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshape", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createSubshape", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("createSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshape", "path", "string");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createSubshape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createSubshape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createSubshape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshape", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "createSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshape", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createSubshape", field, varpath);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("createSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshape", "path", "string");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createSubshape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createSubshape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createSubshape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshape", "storage", "string");
        vardto = <model.ShapeBase>TestInitializer.invalidizeValue(vardto, field, "ShapeBase", "createSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshape", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createSubshape", field, vardto);
            });
        });
    });

    it("invalid shapeToClone test", () => {
        const field = "shapeToClone";
        let varname = <string>TestInitializer.getValue("createSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshape", "path", "string");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createSubshape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createSubshape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createSubshape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshape", "storage", "string");
        varshapeToClone = <number>TestInitializer.invalidizeValue(varshapeToClone, field, "number", "createSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshape", field, varshapeToClone).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createSubshape", field, varshapeToClone);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("createSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshape", "path", "string");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createSubshape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createSubshape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createSubshape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshape", "storage", "string");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "createSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshape", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createSubshape", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshape", "path", "string");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createSubshape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createSubshape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createSubshape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshape", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createSubshape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshape", "path", "string");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createSubshape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createSubshape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createSubshape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshape", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createSubshape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshape", "path", "string");
        let vardto = <model.ShapeBase>TestInitializer.getValue("createSubshape", "dto", "ShapeBase");
        let varshapeToClone = <number>TestInitializer.getValue("createSubshape", "shapeToClone", "number");
        let varposition = <number>TestInitializer.getValue("createSubshape", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshape", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshape(varname, varslideIndex, varpath, vardto, varshapeToClone, varposition, varpassword, varfolder, varstorage), "createSubshape", field, varstorage);
            });
        });
    });
});

describe("Tests for createSubshapeParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createSubshapeParagraph", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("createSubshapeParagraph", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "shapeIndex", "number");
            let vardto = <model.Paragraph>TestInitializer.getValue("createSubshapeParagraph", "dto", "Paragraph");
            let varposition = <number>TestInitializer.getValue("createSubshapeParagraph", "position", "number");
            let varpassword = <string>TestInitializer.getValue("createSubshapeParagraph", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createSubshapeParagraph", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createSubshapeParagraph", "storage", "string");
            return TestInitializer.initialize("createSubshapeParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), false, "createSubshapeParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createSubshapeParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createSubshapeParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapeParagraph", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapeParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapeParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createSubshapeParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createSubshapeParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapeParagraph", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapeParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapeParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("createSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createSubshapeParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createSubshapeParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapeParagraph", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "createSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapeParagraph", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapeParagraph", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("createSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createSubshapeParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createSubshapeParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapeParagraph", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "createSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapeParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapeParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("createSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createSubshapeParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createSubshapeParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapeParagraph", "storage", "string");
        vardto = <model.Paragraph>TestInitializer.invalidizeValue(vardto, field, "Paragraph", "createSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapeParagraph", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapeParagraph", field, vardto);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("createSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createSubshapeParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createSubshapeParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapeParagraph", "storage", "string");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "createSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapeParagraph", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapeParagraph", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createSubshapeParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createSubshapeParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapeParagraph", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapeParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapeParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createSubshapeParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createSubshapeParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapeParagraph", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapeParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapeParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapeParagraph", "shapeIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("createSubshapeParagraph", "dto", "Paragraph");
        let varposition = <number>TestInitializer.getValue("createSubshapeParagraph", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapeParagraph", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapeParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapeParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for createSubshapePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createSubshapePortion", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("createSubshapePortion", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("createSubshapePortion", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("createSubshapePortion", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("createSubshapePortion", "paragraphIndex", "number");
            let vardto = <model.Portion>TestInitializer.getValue("createSubshapePortion", "dto", "Portion");
            let varposition = <number>TestInitializer.getValue("createSubshapePortion", "position", "number");
            let varpassword = <string>TestInitializer.getValue("createSubshapePortion", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createSubshapePortion", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createSubshapePortion", "storage", "string");
            return TestInitializer.initialize("createSubshapePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), false, "createSubshapePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createSubshapePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createSubshapePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createSubshapePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapePortion", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("createSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createSubshapePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createSubshapePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createSubshapePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapePortion", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "createSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapePortion", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("createSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createSubshapePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createSubshapePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createSubshapePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapePortion", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "createSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapePortion", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapePortion", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("createSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createSubshapePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createSubshapePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createSubshapePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapePortion", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "createSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("createSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createSubshapePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createSubshapePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createSubshapePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapePortion", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "createSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("createSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createSubshapePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createSubshapePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createSubshapePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapePortion", "storage", "string");
        vardto = <model.Portion>TestInitializer.invalidizeValue(vardto, field, "Portion", "createSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapePortion", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapePortion", field, vardto);
            });
        });
    });

    it("invalid position test", () => {
        const field = "position";
        let varname = <string>TestInitializer.getValue("createSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createSubshapePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createSubshapePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createSubshapePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapePortion", "storage", "string");
        varposition = <number>TestInitializer.invalidizeValue(varposition, field, "number", "createSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapePortion", field, varposition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapePortion", field, varposition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createSubshapePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createSubshapePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createSubshapePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapePortion", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createSubshapePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createSubshapePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createSubshapePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapePortion", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("createSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("createSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("createSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("createSubshapePortion", "paragraphIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("createSubshapePortion", "dto", "Portion");
        let varposition = <number>TestInitializer.getValue("createSubshapePortion", "position", "number");
        let varpassword = <string>TestInitializer.getValue("createSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createSubshapePortion", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createSubshapePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varposition, varpassword, varfolder, varstorage), "createSubshapePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for createWatermark", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("createWatermark", "name", "string");
            let varshape = <model.Shape>TestInitializer.getValue("createWatermark", "shape", "Shape");
            let varfontHeight = <number>TestInitializer.getValue("createWatermark", "fontHeight", "number");
            let vartext = <string>TestInitializer.getValue("createWatermark", "text", "string");
            let varfontName = <string>TestInitializer.getValue("createWatermark", "fontName", "string");
            let varfontColor = <string>TestInitializer.getValue("createWatermark", "fontColor", "string");
            let varpassword = <string>TestInitializer.getValue("createWatermark", "password", "string");
            let varfolder = <string>TestInitializer.getValue("createWatermark", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("createWatermark", "storage", "string");
            return TestInitializer.initialize("createWatermark", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createWatermark(varname, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword, varfolder, varstorage), false, "createWatermark");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("createWatermark", "name", "string");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermark", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermark", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermark", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermark", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermark", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createWatermark", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "createWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermark", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermark(varname, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword, varfolder, varstorage), "createWatermark", field, varname);
            });
        });
    });

    it("invalid shape test", () => {
        const field = "shape";
        let varname = <string>TestInitializer.getValue("createWatermark", "name", "string");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermark", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermark", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermark", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermark", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermark", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createWatermark", "storage", "string");
        varshape = <model.Shape>TestInitializer.invalidizeValue(varshape, field, "Shape", "createWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermark", field, varshape).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermark(varname, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword, varfolder, varstorage), "createWatermark", field, varshape);
            });
        });
    });

    it("invalid fontHeight test", () => {
        const field = "fontHeight";
        let varname = <string>TestInitializer.getValue("createWatermark", "name", "string");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermark", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermark", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermark", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermark", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermark", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createWatermark", "storage", "string");
        varfontHeight = <number>TestInitializer.invalidizeValue(varfontHeight, field, "number", "createWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermark", field, varfontHeight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermark(varname, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword, varfolder, varstorage), "createWatermark", field, varfontHeight);
            });
        });
    });

    it("invalid text test", () => {
        const field = "text";
        let varname = <string>TestInitializer.getValue("createWatermark", "name", "string");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermark", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermark", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermark", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermark", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermark", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createWatermark", "storage", "string");
        vartext = <string>TestInitializer.invalidizeValue(vartext, field, "string", "createWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermark", field, vartext).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermark(varname, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword, varfolder, varstorage), "createWatermark", field, vartext);
            });
        });
    });

    it("invalid fontName test", () => {
        const field = "fontName";
        let varname = <string>TestInitializer.getValue("createWatermark", "name", "string");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermark", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermark", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermark", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermark", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermark", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createWatermark", "storage", "string");
        varfontName = <string>TestInitializer.invalidizeValue(varfontName, field, "string", "createWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermark", field, varfontName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermark(varname, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword, varfolder, varstorage), "createWatermark", field, varfontName);
            });
        });
    });

    it("invalid fontColor test", () => {
        const field = "fontColor";
        let varname = <string>TestInitializer.getValue("createWatermark", "name", "string");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermark", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermark", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermark", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermark", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermark", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createWatermark", "storage", "string");
        varfontColor = <string>TestInitializer.invalidizeValue(varfontColor, field, "string", "createWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermark", field, varfontColor).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermark(varname, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword, varfolder, varstorage), "createWatermark", field, varfontColor);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("createWatermark", "name", "string");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermark", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermark", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermark", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermark", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermark", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createWatermark", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermark", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermark(varname, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword, varfolder, varstorage), "createWatermark", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("createWatermark", "name", "string");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermark", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermark", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermark", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermark", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermark", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createWatermark", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "createWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermark", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermark(varname, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword, varfolder, varstorage), "createWatermark", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("createWatermark", "name", "string");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermark", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermark", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermark", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermark", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermark", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("createWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("createWatermark", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "createWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermark", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermark(varname, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword, varfolder, varstorage), "createWatermark", field, varstorage);
            });
        });
    });
});

describe("Tests for createWatermarkOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("createWatermarkOnline", "document");
            let varshape = <model.Shape>TestInitializer.getValue("createWatermarkOnline", "shape", "Shape");
            let varfontHeight = <number>TestInitializer.getValue("createWatermarkOnline", "fontHeight", "number");
            let vartext = <string>TestInitializer.getValue("createWatermarkOnline", "text", "string");
            let varfontName = <string>TestInitializer.getValue("createWatermarkOnline", "fontName", "string");
            let varfontColor = <string>TestInitializer.getValue("createWatermarkOnline", "fontColor", "string");
            let varpassword = <string>TestInitializer.getValue("createWatermarkOnline", "password", "string");
            return TestInitializer.initialize("createWatermarkOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().createWatermarkOnline(vardocument, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword), true, "createWatermarkOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("createWatermarkOnline", "document");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermarkOnline", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermarkOnline", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermarkOnline", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermarkOnline", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermarkOnline", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermarkOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "createWatermarkOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermarkOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermarkOnline(vardocument, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword), "createWatermarkOnline", field, vardocument);
            });
        });
    });

    it("invalid shape test", () => {
        const field = "shape";
        let vardocument = <Buffer>TestInitializer.getStreamValue("createWatermarkOnline", "document");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermarkOnline", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermarkOnline", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermarkOnline", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermarkOnline", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermarkOnline", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermarkOnline", "password", "string");
        varshape = <model.Shape>TestInitializer.invalidizeValue(varshape, field, "Shape", "createWatermarkOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermarkOnline", field, varshape).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermarkOnline(vardocument, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword), "createWatermarkOnline", field, varshape);
            });
        });
    });

    it("invalid fontHeight test", () => {
        const field = "fontHeight";
        let vardocument = <Buffer>TestInitializer.getStreamValue("createWatermarkOnline", "document");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermarkOnline", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermarkOnline", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermarkOnline", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermarkOnline", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermarkOnline", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermarkOnline", "password", "string");
        varfontHeight = <number>TestInitializer.invalidizeValue(varfontHeight, field, "number", "createWatermarkOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermarkOnline", field, varfontHeight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermarkOnline(vardocument, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword), "createWatermarkOnline", field, varfontHeight);
            });
        });
    });

    it("invalid text test", () => {
        const field = "text";
        let vardocument = <Buffer>TestInitializer.getStreamValue("createWatermarkOnline", "document");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermarkOnline", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermarkOnline", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermarkOnline", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermarkOnline", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermarkOnline", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermarkOnline", "password", "string");
        vartext = <string>TestInitializer.invalidizeValue(vartext, field, "string", "createWatermarkOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermarkOnline", field, vartext).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermarkOnline(vardocument, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword), "createWatermarkOnline", field, vartext);
            });
        });
    });

    it("invalid fontName test", () => {
        const field = "fontName";
        let vardocument = <Buffer>TestInitializer.getStreamValue("createWatermarkOnline", "document");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermarkOnline", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermarkOnline", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermarkOnline", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermarkOnline", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermarkOnline", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermarkOnline", "password", "string");
        varfontName = <string>TestInitializer.invalidizeValue(varfontName, field, "string", "createWatermarkOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermarkOnline", field, varfontName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermarkOnline(vardocument, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword), "createWatermarkOnline", field, varfontName);
            });
        });
    });

    it("invalid fontColor test", () => {
        const field = "fontColor";
        let vardocument = <Buffer>TestInitializer.getStreamValue("createWatermarkOnline", "document");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermarkOnline", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermarkOnline", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermarkOnline", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermarkOnline", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermarkOnline", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermarkOnline", "password", "string");
        varfontColor = <string>TestInitializer.invalidizeValue(varfontColor, field, "string", "createWatermarkOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermarkOnline", field, varfontColor).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermarkOnline(vardocument, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword), "createWatermarkOnline", field, varfontColor);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("createWatermarkOnline", "document");
        let varshape = <model.Shape>TestInitializer.getValue("createWatermarkOnline", "shape", "Shape");
        let varfontHeight = <number>TestInitializer.getValue("createWatermarkOnline", "fontHeight", "number");
        let vartext = <string>TestInitializer.getValue("createWatermarkOnline", "text", "string");
        let varfontName = <string>TestInitializer.getValue("createWatermarkOnline", "fontName", "string");
        let varfontColor = <string>TestInitializer.getValue("createWatermarkOnline", "fontColor", "string");
        let varpassword = <string>TestInitializer.getValue("createWatermarkOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "createWatermarkOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("createWatermarkOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().createWatermarkOnline(vardocument, varshape, varfontHeight, vartext, varfontName, varfontColor, varpassword), "createWatermarkOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for deleteAnimation", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteAnimation", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteAnimation", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteAnimation", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteAnimation", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteAnimation", "storage", "string");
            return TestInitializer.initialize("deleteAnimation", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteAnimation(varname, varslideIndex, varpassword, varfolder, varstorage), false, "deleteAnimation");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimation", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimation", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimation", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimation(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteAnimation", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimation", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimation", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimation", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimation(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteAnimation", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimation", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimation", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimation", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimation(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteAnimation", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimation", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimation", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimation", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimation(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteAnimation", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimation", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimation", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimation", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimation(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteAnimation", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteAnimationEffect", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteAnimationEffect", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteAnimationEffect", "slideIndex", "number");
            let vareffectIndex = <number>TestInitializer.getValue("deleteAnimationEffect", "effectIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteAnimationEffect", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteAnimationEffect", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteAnimationEffect", "storage", "string");
            return TestInitializer.initialize("deleteAnimationEffect", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteAnimationEffect(varname, varslideIndex, vareffectIndex, varpassword, varfolder, varstorage), false, "deleteAnimationEffect");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationEffect", "slideIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("deleteAnimationEffect", "effectIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationEffect", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationEffect", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationEffect(varname, varslideIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteAnimationEffect", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationEffect", "slideIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("deleteAnimationEffect", "effectIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationEffect", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationEffect", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationEffect(varname, varslideIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteAnimationEffect", field, varslideIndex);
            });
        });
    });

    it("invalid effectIndex test", () => {
        const field = "effectIndex";
        let varname = <string>TestInitializer.getValue("deleteAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationEffect", "slideIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("deleteAnimationEffect", "effectIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationEffect", "storage", "string");
        vareffectIndex = <number>TestInitializer.invalidizeValue(vareffectIndex, field, "number", "deleteAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationEffect", field, vareffectIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationEffect(varname, varslideIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteAnimationEffect", field, vareffectIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationEffect", "slideIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("deleteAnimationEffect", "effectIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationEffect", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationEffect", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationEffect(varname, varslideIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteAnimationEffect", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationEffect", "slideIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("deleteAnimationEffect", "effectIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationEffect", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationEffect", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationEffect(varname, varslideIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteAnimationEffect", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationEffect", "slideIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("deleteAnimationEffect", "effectIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationEffect", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationEffect", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationEffect(varname, varslideIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteAnimationEffect", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteAnimationInteractiveSequence", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequence", "slideIndex", "number");
            let varsequenceIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequence", "sequenceIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "storage", "string");
            return TestInitializer.initialize("deleteAnimationInteractiveSequence", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteAnimationInteractiveSequence(varname, varslideIndex, varsequenceIndex, varpassword, varfolder, varstorage), false, "deleteAnimationInteractiveSequence");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequence", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequence", "sequenceIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequence", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequence(varname, varslideIndex, varsequenceIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequence", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequence", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequence", "sequenceIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequence", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequence(varname, varslideIndex, varsequenceIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequence", field, varslideIndex);
            });
        });
    });

    it("invalid sequenceIndex test", () => {
        const field = "sequenceIndex";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequence", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequence", "sequenceIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "storage", "string");
        varsequenceIndex = <number>TestInitializer.invalidizeValue(varsequenceIndex, field, "number", "deleteAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequence", field, varsequenceIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequence(varname, varslideIndex, varsequenceIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequence", field, varsequenceIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequence", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequence", "sequenceIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequence", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequence(varname, varslideIndex, varsequenceIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequence", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequence", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequence", "sequenceIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequence", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequence(varname, varslideIndex, varsequenceIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequence", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequence", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequence", "sequenceIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequence", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteAnimationInteractiveSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequence", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequence(varname, varslideIndex, varsequenceIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequence", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteAnimationInteractiveSequenceEffect", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "number");
            let varsequenceIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
            let vareffectIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "storage", "string");
            return TestInitializer.initialize("deleteAnimationInteractiveSequenceEffect", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), false, "deleteAnimationInteractiveSequenceEffect");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequenceEffect", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequenceEffect", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequenceEffect", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequenceEffect", field, varslideIndex);
            });
        });
    });

    it("invalid sequenceIndex test", () => {
        const field = "sequenceIndex";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "storage", "string");
        varsequenceIndex = <number>TestInitializer.invalidizeValue(varsequenceIndex, field, "number", "deleteAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequenceEffect", field, varsequenceIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequenceEffect", field, varsequenceIndex);
            });
        });
    });

    it("invalid effectIndex test", () => {
        const field = "effectIndex";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "storage", "string");
        vareffectIndex = <number>TestInitializer.invalidizeValue(vareffectIndex, field, "number", "deleteAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequenceEffect", field, vareffectIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequenceEffect", field, vareffectIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequenceEffect", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequenceEffect", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequenceEffect", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequenceEffect", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequenceEffect", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequenceEffect", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequenceEffect", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteAnimationInteractiveSequences", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequences", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "storage", "string");
            return TestInitializer.initialize("deleteAnimationInteractiveSequences", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteAnimationInteractiveSequences(varname, varslideIndex, varpassword, varfolder, varstorage), false, "deleteAnimationInteractiveSequences");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequences", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteAnimationInteractiveSequences");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequences", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequences(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequences", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequences", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteAnimationInteractiveSequences");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequences", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequences(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequences", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequences", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteAnimationInteractiveSequences");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequences", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequences(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequences", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequences", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteAnimationInteractiveSequences");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequences", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequences(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequences", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationInteractiveSequences", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationInteractiveSequences", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteAnimationInteractiveSequences");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationInteractiveSequences", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationInteractiveSequences(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteAnimationInteractiveSequences", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteAnimationMainSequence", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteAnimationMainSequence", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteAnimationMainSequence", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteAnimationMainSequence", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteAnimationMainSequence", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteAnimationMainSequence", "storage", "string");
            return TestInitializer.initialize("deleteAnimationMainSequence", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteAnimationMainSequence(varname, varslideIndex, varpassword, varfolder, varstorage), false, "deleteAnimationMainSequence");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteAnimationMainSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationMainSequence", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationMainSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationMainSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationMainSequence", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteAnimationMainSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationMainSequence", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationMainSequence(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteAnimationMainSequence", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteAnimationMainSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationMainSequence", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationMainSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationMainSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationMainSequence", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteAnimationMainSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationMainSequence", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationMainSequence(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteAnimationMainSequence", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteAnimationMainSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationMainSequence", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationMainSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationMainSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationMainSequence", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteAnimationMainSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationMainSequence", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationMainSequence(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteAnimationMainSequence", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteAnimationMainSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationMainSequence", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationMainSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationMainSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationMainSequence", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteAnimationMainSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationMainSequence", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationMainSequence(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteAnimationMainSequence", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteAnimationMainSequence", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteAnimationMainSequence", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteAnimationMainSequence", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteAnimationMainSequence", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteAnimationMainSequence", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteAnimationMainSequence");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteAnimationMainSequence", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteAnimationMainSequence(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteAnimationMainSequence", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteBackground", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteBackground", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteBackground", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteBackground", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteBackground", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteBackground", "storage", "string");
            return TestInitializer.initialize("deleteBackground", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteBackground(varname, varslideIndex, varpassword, varfolder, varstorage), false, "deleteBackground");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteBackground", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteBackground", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteBackground", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteBackground", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteBackground", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteBackground", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteBackground", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteBackground", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteBackground", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteBackground", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteBackground", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteBackground", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteBackground", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteBackground", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteBackground", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteBackground", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteBackground", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteBackground", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteBackground", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteBackground", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteChartCategory", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteChartCategory", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex", "number");
            let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage", "string");
            return TestInitializer.initialize("deleteChartCategory", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), false, "deleteChartCategory");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex", "number");
        let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartCategory", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), "deleteChartCategory", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex", "number");
        let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartCategory", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), "deleteChartCategory", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex", "number");
        let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartCategory", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), "deleteChartCategory", field, varshapeIndex);
            });
        });
    });

    it("invalid categoryIndex test", () => {
        const field = "categoryIndex";
        let varname = <string>TestInitializer.getValue("deleteChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex", "number");
        let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage", "string");
        varcategoryIndex = <number>TestInitializer.invalidizeValue(varcategoryIndex, field, "number", "deleteChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartCategory", field, varcategoryIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), "deleteChartCategory", field, varcategoryIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex", "number");
        let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartCategory", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), "deleteChartCategory", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex", "number");
        let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartCategory", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), "deleteChartCategory", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartCategory", "shapeIndex", "number");
        let varcategoryIndex = <number>TestInitializer.getValue("deleteChartCategory", "categoryIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartCategory", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartCategory", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varpassword, varfolder, varstorage), "deleteChartCategory", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteChartDataPoint", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex", "number");
            let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex", "number");
            let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage", "string");
            return TestInitializer.initialize("deleteChartDataPoint", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), false, "deleteChartDataPoint");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varshapeIndex);
            });
        });
    });

    it("invalid seriesIndex test", () => {
        const field = "seriesIndex";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage", "string");
        varseriesIndex = <number>TestInitializer.invalidizeValue(varseriesIndex, field, "number", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varseriesIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varseriesIndex);
            });
        });
    });

    it("invalid pointIndex test", () => {
        const field = "pointIndex";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage", "string");
        varpointIndex = <number>TestInitializer.invalidizeValue(varpointIndex, field, "number", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varpointIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varpointIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("deleteChartDataPoint", "pointIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartDataPoint", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartDataPoint", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, varpassword, varfolder, varstorage), "deleteChartDataPoint", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteChartSeries", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteChartSeries", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex", "number");
            let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage", "string");
            return TestInitializer.initialize("deleteChartSeries", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), false, "deleteChartSeries");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartSeries", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), "deleteChartSeries", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartSeries", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), "deleteChartSeries", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartSeries", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), "deleteChartSeries", field, varshapeIndex);
            });
        });
    });

    it("invalid seriesIndex test", () => {
        const field = "seriesIndex";
        let varname = <string>TestInitializer.getValue("deleteChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage", "string");
        varseriesIndex = <number>TestInitializer.invalidizeValue(varseriesIndex, field, "number", "deleteChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartSeries", field, varseriesIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), "deleteChartSeries", field, varseriesIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartSeries", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), "deleteChartSeries", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartSeries", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), "deleteChartSeries", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteChartSeries", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("deleteChartSeries", "seriesIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteChartSeries", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteChartSeries", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varpassword, varfolder, varstorage), "deleteChartSeries", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteComments", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteComments", "name", "string");
            let varauthor = <string>TestInitializer.getValue("deleteComments", "author", "string");
            let varpassword = <string>TestInitializer.getValue("deleteComments", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteComments", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteComments", "storage", "string");
            return TestInitializer.initialize("deleteComments", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteComments(varname, varauthor, varpassword, varfolder, varstorage), false, "deleteComments");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteComments", "name", "string");
        let varauthor = <string>TestInitializer.getValue("deleteComments", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteComments", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteComments", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteComments(varname, varauthor, varpassword, varfolder, varstorage), "deleteComments", field, varname);
            });
        });
    });

    it("invalid author test", () => {
        const field = "author";
        let varname = <string>TestInitializer.getValue("deleteComments", "name", "string");
        let varauthor = <string>TestInitializer.getValue("deleteComments", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteComments", "storage", "string");
        varauthor = <string>TestInitializer.invalidizeValue(varauthor, field, "string", "deleteComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteComments", field, varauthor).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteComments(varname, varauthor, varpassword, varfolder, varstorage), "deleteComments", field, varauthor);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteComments", "name", "string");
        let varauthor = <string>TestInitializer.getValue("deleteComments", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteComments", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteComments", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteComments(varname, varauthor, varpassword, varfolder, varstorage), "deleteComments", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteComments", "name", "string");
        let varauthor = <string>TestInitializer.getValue("deleteComments", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteComments", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteComments", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteComments(varname, varauthor, varpassword, varfolder, varstorage), "deleteComments", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteComments", "name", "string");
        let varauthor = <string>TestInitializer.getValue("deleteComments", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteComments", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteComments", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteComments(varname, varauthor, varpassword, varfolder, varstorage), "deleteComments", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteCommentsOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("deleteCommentsOnline", "document");
            let varauthor = <string>TestInitializer.getValue("deleteCommentsOnline", "author", "string");
            let varpassword = <string>TestInitializer.getValue("deleteCommentsOnline", "password", "string");
            return TestInitializer.initialize("deleteCommentsOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteCommentsOnline(vardocument, varauthor, varpassword), true, "deleteCommentsOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("deleteCommentsOnline", "document");
        let varauthor = <string>TestInitializer.getValue("deleteCommentsOnline", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteCommentsOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "deleteCommentsOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteCommentsOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteCommentsOnline(vardocument, varauthor, varpassword), "deleteCommentsOnline", field, vardocument);
            });
        });
    });

    it("invalid author test", () => {
        const field = "author";
        let vardocument = <Buffer>TestInitializer.getStreamValue("deleteCommentsOnline", "document");
        let varauthor = <string>TestInitializer.getValue("deleteCommentsOnline", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteCommentsOnline", "password", "string");
        varauthor = <string>TestInitializer.invalidizeValue(varauthor, field, "string", "deleteCommentsOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteCommentsOnline", field, varauthor).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteCommentsOnline(vardocument, varauthor, varpassword), "deleteCommentsOnline", field, varauthor);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("deleteCommentsOnline", "document");
        let varauthor = <string>TestInitializer.getValue("deleteCommentsOnline", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteCommentsOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteCommentsOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteCommentsOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteCommentsOnline(vardocument, varauthor, varpassword), "deleteCommentsOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for deleteDocumentProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteDocumentProperties", "name", "string");
            let varpassword = <string>TestInitializer.getValue("deleteDocumentProperties", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteDocumentProperties", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteDocumentProperties", "storage", "string");
            return TestInitializer.initialize("deleteDocumentProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteDocumentProperties(varname, varpassword, varfolder, varstorage), false, "deleteDocumentProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteDocumentProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("deleteDocumentProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteDocumentProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteDocumentProperties", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteDocumentProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperties(varname, varpassword, varfolder, varstorage), "deleteDocumentProperties", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteDocumentProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("deleteDocumentProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteDocumentProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteDocumentProperties", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteDocumentProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperties(varname, varpassword, varfolder, varstorage), "deleteDocumentProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteDocumentProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("deleteDocumentProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteDocumentProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteDocumentProperties", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteDocumentProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperties(varname, varpassword, varfolder, varstorage), "deleteDocumentProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteDocumentProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("deleteDocumentProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteDocumentProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteDocumentProperties", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteDocumentProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperties(varname, varpassword, varfolder, varstorage), "deleteDocumentProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteDocumentProperty", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteDocumentProperty", "name", "string");
            let varpropertyName = <string>TestInitializer.getValue("deleteDocumentProperty", "propertyName", "string");
            let varpassword = <string>TestInitializer.getValue("deleteDocumentProperty", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteDocumentProperty", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteDocumentProperty", "storage", "string");
            return TestInitializer.initialize("deleteDocumentProperty", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), false, "deleteDocumentProperty");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("deleteDocumentProperty", "propertyName", "string");
        let varpassword = <string>TestInitializer.getValue("deleteDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteDocumentProperty", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteDocumentProperty", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "deleteDocumentProperty", field, varname);
            });
        });
    });

    it("invalid propertyName test", () => {
        const field = "propertyName";
        let varname = <string>TestInitializer.getValue("deleteDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("deleteDocumentProperty", "propertyName", "string");
        let varpassword = <string>TestInitializer.getValue("deleteDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteDocumentProperty", "storage", "string");
        varpropertyName = <string>TestInitializer.invalidizeValue(varpropertyName, field, "string", "deleteDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteDocumentProperty", field, varpropertyName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "deleteDocumentProperty", field, varpropertyName);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("deleteDocumentProperty", "propertyName", "string");
        let varpassword = <string>TestInitializer.getValue("deleteDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteDocumentProperty", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteDocumentProperty", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "deleteDocumentProperty", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("deleteDocumentProperty", "propertyName", "string");
        let varpassword = <string>TestInitializer.getValue("deleteDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteDocumentProperty", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteDocumentProperty", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "deleteDocumentProperty", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("deleteDocumentProperty", "propertyName", "string");
        let varpassword = <string>TestInitializer.getValue("deleteDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteDocumentProperty", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteDocumentProperty", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "deleteDocumentProperty", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteFile", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("deleteFile", "path", "string");
            let varstorageName = <string>TestInitializer.getValue("deleteFile", "storageName", "string");
            let varversionId = <string>TestInitializer.getValue("deleteFile", "versionId", "string");
            return TestInitializer.initialize("deleteFile", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteFile(varpath, varstorageName, varversionId), false, "deleteFile");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("deleteFile", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("deleteFile", "storageName", "string");
        let varversionId = <string>TestInitializer.getValue("deleteFile", "versionId", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteFile", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteFile(varpath, varstorageName, varversionId), "deleteFile", field, varpath);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("deleteFile", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("deleteFile", "storageName", "string");
        let varversionId = <string>TestInitializer.getValue("deleteFile", "versionId", "string");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "deleteFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteFile", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteFile(varpath, varstorageName, varversionId), "deleteFile", field, varstorageName);
            });
        });
    });

    it("invalid versionId test", () => {
        const field = "versionId";
        let varpath = <string>TestInitializer.getValue("deleteFile", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("deleteFile", "storageName", "string");
        let varversionId = <string>TestInitializer.getValue("deleteFile", "versionId", "string");
        varversionId = <string>TestInitializer.invalidizeValue(varversionId, field, "string", "deleteFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteFile", field, varversionId).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteFile(varpath, varstorageName, varversionId), "deleteFile", field, varversionId);
            });
        });
    });
});

describe("Tests for deleteFolder", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("deleteFolder", "path", "string");
            let varstorageName = <string>TestInitializer.getValue("deleteFolder", "storageName", "string");
            let varrecursive = <boolean>TestInitializer.getValue("deleteFolder", "recursive", "boolean");
            return TestInitializer.initialize("deleteFolder", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteFolder(varpath, varstorageName, varrecursive), false, "deleteFolder");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("deleteFolder", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("deleteFolder", "storageName", "string");
        let varrecursive = <boolean>TestInitializer.getValue("deleteFolder", "recursive", "boolean");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteFolder", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteFolder(varpath, varstorageName, varrecursive), "deleteFolder", field, varpath);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("deleteFolder", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("deleteFolder", "storageName", "string");
        let varrecursive = <boolean>TestInitializer.getValue("deleteFolder", "recursive", "boolean");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "deleteFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteFolder", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteFolder(varpath, varstorageName, varrecursive), "deleteFolder", field, varstorageName);
            });
        });
    });

    it("invalid recursive test", () => {
        const field = "recursive";
        let varpath = <string>TestInitializer.getValue("deleteFolder", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("deleteFolder", "storageName", "string");
        let varrecursive = <boolean>TestInitializer.getValue("deleteFolder", "recursive", "boolean");
        varrecursive = <boolean>TestInitializer.invalidizeValue(varrecursive, field, "boolean", "deleteFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteFolder", field, varrecursive).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteFolder(varpath, varstorageName, varrecursive), "deleteFolder", field, varrecursive);
            });
        });
    });
});

describe("Tests for deleteNotesSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteNotesSlide", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlide", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteNotesSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteNotesSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteNotesSlide", "storage", "string");
            return TestInitializer.initialize("deleteNotesSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), false, "deleteNotesSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlide", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteNotesSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlide", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteNotesSlide", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlide", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteNotesSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlide", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteNotesSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlide", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteNotesSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteNotesSlideParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage", "string");
            return TestInitializer.initialize("deleteNotesSlideParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "deleteNotesSlideParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteNotesSlideParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteNotesSlideParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteNotesSlideParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deleteNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteNotesSlideParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteNotesSlideParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteNotesSlideParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraph", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteNotesSlideParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteNotesSlideParagraphs", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex", "number");
            let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs", "Array&lt;number&gt;");
            let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage", "string");
            return TestInitializer.initialize("deleteNotesSlideParagraphs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), false, "deleteNotesSlideParagraphs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraphs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteNotesSlideParagraphs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraphs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteNotesSlideParagraphs", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraphs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteNotesSlideParagraphs", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphs test", () => {
        const field = "paragraphs";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage", "string");
        varparagraphs = <Array<number>>TestInitializer.invalidizeValue(varparagraphs, field, "Array&lt;number&gt;", "deleteNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraphs", field, varparagraphs).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteNotesSlideParagraphs", field, varparagraphs);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraphs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteNotesSlideParagraphs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraphs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteNotesSlideParagraphs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteNotesSlideParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideParagraphs", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideParagraphs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteNotesSlideParagraphs", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteNotesSlidePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex", "number");
            let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage", "string");
            return TestInitializer.initialize("deleteNotesSlidePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), false, "deleteNotesSlidePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage", "string");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varportionIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortion", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteNotesSlidePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteNotesSlidePortions", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex", "number");
            let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions", "Array&lt;number&gt;");
            let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage", "string");
            return TestInitializer.initialize("deleteNotesSlidePortions", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), false, "deleteNotesSlidePortions");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varparagraphIndex);
            });
        });
    });

    it("invalid portions test", () => {
        const field = "portions";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage", "string");
        varportions = <Array<number>>TestInitializer.invalidizeValue(varportions, field, "Array&lt;number&gt;", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varportions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varportions);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteNotesSlidePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteNotesSlidePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteNotesSlidePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlidePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlidePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlidePortions", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlidePortions", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteNotesSlidePortions", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteNotesSlideShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteNotesSlideShape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "shapeIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShape", "storage", "string");
            return TestInitializer.initialize("deleteNotesSlideShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), false, "deleteNotesSlideShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShape", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteNotesSlideShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShape", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteNotesSlideShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShape", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteNotesSlideShape", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShape", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteNotesSlideShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShape", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteNotesSlideShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteNotesSlideShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShape", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteNotesSlideShape", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteNotesSlideShapes", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteNotesSlideShapes", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShapes", "slideIndex", "number");
            let varshapes = <Array<number>>TestInitializer.getValue("deleteNotesSlideShapes", "shapes", "Array&lt;number&gt;");
            let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShapes", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShapes", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShapes", "storage", "string");
            return TestInitializer.initialize("deleteNotesSlideShapes", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteNotesSlideShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), false, "deleteNotesSlideShapes");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShapes", "slideIndex", "number");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteNotesSlideShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShapes", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShapes", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteNotesSlideShapes", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShapes", "slideIndex", "number");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteNotesSlideShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShapes", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShapes", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteNotesSlideShapes", field, varslideIndex);
            });
        });
    });

    it("invalid shapes test", () => {
        const field = "shapes";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShapes", "slideIndex", "number");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteNotesSlideShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShapes", "storage", "string");
        varshapes = <Array<number>>TestInitializer.invalidizeValue(varshapes, field, "Array&lt;number&gt;", "deleteNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShapes", field, varshapes).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteNotesSlideShapes", field, varshapes);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShapes", "slideIndex", "number");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteNotesSlideShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShapes", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShapes", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteNotesSlideShapes", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShapes", "slideIndex", "number");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteNotesSlideShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShapes", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShapes", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteNotesSlideShapes", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteNotesSlideShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteNotesSlideShapes", "slideIndex", "number");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteNotesSlideShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteNotesSlideShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteNotesSlideShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteNotesSlideShapes", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteNotesSlideShapes", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteNotesSlideShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteNotesSlideShapes", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteParagraph", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage", "string");
            return TestInitializer.initialize("deleteParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "deleteParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deleteParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deleteParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteParagraph", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteParagraphs", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteParagraphs", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex", "number");
            let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs", "Array&lt;number&gt;");
            let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage", "string");
            return TestInitializer.initialize("deleteParagraphs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), false, "deleteParagraphs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraphs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteParagraphs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraphs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteParagraphs", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraphs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteParagraphs", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphs test", () => {
        const field = "paragraphs";
        let varname = <string>TestInitializer.getValue("deleteParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage", "string");
        varparagraphs = <Array<number>>TestInitializer.invalidizeValue(varparagraphs, field, "Array&lt;number&gt;", "deleteParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraphs", field, varparagraphs).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteParagraphs", field, varparagraphs);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraphs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteParagraphs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraphs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteParagraphs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteParagraphs", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteParagraphs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteParagraphs(varname, varslideIndex, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteParagraphs", field, varstorage);
            });
        });
    });
});

describe("Tests for deletePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deletePortion", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex", "number");
            let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deletePortion", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deletePortion", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deletePortion", "storage", "string");
            return TestInitializer.initialize("deletePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), false, "deletePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deletePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deletePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deletePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deletePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("deletePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage", "string");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varportionIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deletePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deletePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deletePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deletePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deletePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortion", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deletePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deletePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for deletePortions", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deletePortions", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex", "number");
            let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions", "Array&lt;number&gt;");
            let varpassword = <string>TestInitializer.getValue("deletePortions", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deletePortions", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deletePortions", "storage", "string");
            return TestInitializer.initialize("deletePortions", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), false, "deletePortions");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deletePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deletePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deletePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deletePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varparagraphIndex);
            });
        });
    });

    it("invalid portions test", () => {
        const field = "portions";
        let varname = <string>TestInitializer.getValue("deletePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage", "string");
        varportions = <Array<number>>TestInitializer.invalidizeValue(varportions, field, "Array&lt;number&gt;", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varportions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varportions);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deletePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deletePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deletePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deletePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deletePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deletePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deletePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deletePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deletePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deletePortions", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deletePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deletePortions", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deletePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deletePortions", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteProtection", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteProtection", "name", "string");
            let varpassword = <string>TestInitializer.getValue("deleteProtection", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteProtection", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteProtection", "storage", "string");
            return TestInitializer.initialize("deleteProtection", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteProtection(varname, varpassword, varfolder, varstorage), false, "deleteProtection");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteProtection", "name", "string");
        let varpassword = <string>TestInitializer.getValue("deleteProtection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteProtection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteProtection", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteProtection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteProtection", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteProtection(varname, varpassword, varfolder, varstorage), "deleteProtection", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteProtection", "name", "string");
        let varpassword = <string>TestInitializer.getValue("deleteProtection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteProtection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteProtection", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteProtection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteProtection", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteProtection(varname, varpassword, varfolder, varstorage), "deleteProtection", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteProtection", "name", "string");
        let varpassword = <string>TestInitializer.getValue("deleteProtection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteProtection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteProtection", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteProtection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteProtection", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteProtection(varname, varpassword, varfolder, varstorage), "deleteProtection", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteProtection", "name", "string");
        let varpassword = <string>TestInitializer.getValue("deleteProtection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteProtection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteProtection", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteProtection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteProtection", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteProtection(varname, varpassword, varfolder, varstorage), "deleteProtection", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteProtectionOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("deleteProtectionOnline", "document");
            let varpassword = <string>TestInitializer.getValue("deleteProtectionOnline", "password", "string");
            return TestInitializer.initialize("deleteProtectionOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteProtectionOnline(vardocument, varpassword), true, "deleteProtectionOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("deleteProtectionOnline", "document");
        let varpassword = <string>TestInitializer.getValue("deleteProtectionOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "deleteProtectionOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteProtectionOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteProtectionOnline(vardocument, varpassword), "deleteProtectionOnline", field, vardocument);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("deleteProtectionOnline", "document");
        let varpassword = <string>TestInitializer.getValue("deleteProtectionOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteProtectionOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteProtectionOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteProtectionOnline(vardocument, varpassword), "deleteProtectionOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for deleteSection", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSection", "name", "string");
            let varsectionIndex = <number>TestInitializer.getValue("deleteSection", "sectionIndex", "number");
            let varwithSlides = <boolean>TestInitializer.getValue("deleteSection", "withSlides", "boolean");
            let varpassword = <string>TestInitializer.getValue("deleteSection", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteSection", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteSection", "storage", "string");
            return TestInitializer.initialize("deleteSection", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSection(varname, varsectionIndex, varwithSlides, varpassword, varfolder, varstorage), false, "deleteSection");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("deleteSection", "sectionIndex", "number");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSection", "withSlides", "boolean");
        let varpassword = <string>TestInitializer.getValue("deleteSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSection", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSection", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSection(varname, varsectionIndex, varwithSlides, varpassword, varfolder, varstorage), "deleteSection", field, varname);
            });
        });
    });

    it("invalid sectionIndex test", () => {
        const field = "sectionIndex";
        let varname = <string>TestInitializer.getValue("deleteSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("deleteSection", "sectionIndex", "number");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSection", "withSlides", "boolean");
        let varpassword = <string>TestInitializer.getValue("deleteSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSection", "storage", "string");
        varsectionIndex = <number>TestInitializer.invalidizeValue(varsectionIndex, field, "number", "deleteSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSection", field, varsectionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSection(varname, varsectionIndex, varwithSlides, varpassword, varfolder, varstorage), "deleteSection", field, varsectionIndex);
            });
        });
    });

    it("invalid withSlides test", () => {
        const field = "withSlides";
        let varname = <string>TestInitializer.getValue("deleteSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("deleteSection", "sectionIndex", "number");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSection", "withSlides", "boolean");
        let varpassword = <string>TestInitializer.getValue("deleteSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSection", "storage", "string");
        varwithSlides = <boolean>TestInitializer.invalidizeValue(varwithSlides, field, "boolean", "deleteSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSection", field, varwithSlides).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSection(varname, varsectionIndex, varwithSlides, varpassword, varfolder, varstorage), "deleteSection", field, varwithSlides);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("deleteSection", "sectionIndex", "number");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSection", "withSlides", "boolean");
        let varpassword = <string>TestInitializer.getValue("deleteSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSection", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSection", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSection(varname, varsectionIndex, varwithSlides, varpassword, varfolder, varstorage), "deleteSection", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("deleteSection", "sectionIndex", "number");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSection", "withSlides", "boolean");
        let varpassword = <string>TestInitializer.getValue("deleteSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSection", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSection", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSection(varname, varsectionIndex, varwithSlides, varpassword, varfolder, varstorage), "deleteSection", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("deleteSection", "sectionIndex", "number");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSection", "withSlides", "boolean");
        let varpassword = <string>TestInitializer.getValue("deleteSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSection", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSection", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSection(varname, varsectionIndex, varwithSlides, varpassword, varfolder, varstorage), "deleteSection", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSections", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSections", "name", "string");
            let varsections = <Array<number>>TestInitializer.getValue("deleteSections", "sections", "Array&lt;number&gt;");
            let varwithSlides = <boolean>TestInitializer.getValue("deleteSections", "withSlides", "boolean");
            let varpassword = <string>TestInitializer.getValue("deleteSections", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteSections", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteSections", "storage", "string");
            return TestInitializer.initialize("deleteSections", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSections(varname, varsections, varwithSlides, varpassword, varfolder, varstorage), false, "deleteSections");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSections", "name", "string");
        let varsections = <Array<number>>TestInitializer.getValue("deleteSections", "sections", "Array&lt;number&gt;");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSections", "withSlides", "boolean");
        let varpassword = <string>TestInitializer.getValue("deleteSections", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSections", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSections", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSections", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSections(varname, varsections, varwithSlides, varpassword, varfolder, varstorage), "deleteSections", field, varname);
            });
        });
    });

    it("invalid sections test", () => {
        const field = "sections";
        let varname = <string>TestInitializer.getValue("deleteSections", "name", "string");
        let varsections = <Array<number>>TestInitializer.getValue("deleteSections", "sections", "Array&lt;number&gt;");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSections", "withSlides", "boolean");
        let varpassword = <string>TestInitializer.getValue("deleteSections", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSections", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSections", "storage", "string");
        varsections = <Array<number>>TestInitializer.invalidizeValue(varsections, field, "Array&lt;number&gt;", "deleteSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSections", field, varsections).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSections(varname, varsections, varwithSlides, varpassword, varfolder, varstorage), "deleteSections", field, varsections);
            });
        });
    });

    it("invalid withSlides test", () => {
        const field = "withSlides";
        let varname = <string>TestInitializer.getValue("deleteSections", "name", "string");
        let varsections = <Array<number>>TestInitializer.getValue("deleteSections", "sections", "Array&lt;number&gt;");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSections", "withSlides", "boolean");
        let varpassword = <string>TestInitializer.getValue("deleteSections", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSections", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSections", "storage", "string");
        varwithSlides = <boolean>TestInitializer.invalidizeValue(varwithSlides, field, "boolean", "deleteSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSections", field, varwithSlides).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSections(varname, varsections, varwithSlides, varpassword, varfolder, varstorage), "deleteSections", field, varwithSlides);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSections", "name", "string");
        let varsections = <Array<number>>TestInitializer.getValue("deleteSections", "sections", "Array&lt;number&gt;");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSections", "withSlides", "boolean");
        let varpassword = <string>TestInitializer.getValue("deleteSections", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSections", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSections", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSections", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSections(varname, varsections, varwithSlides, varpassword, varfolder, varstorage), "deleteSections", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSections", "name", "string");
        let varsections = <Array<number>>TestInitializer.getValue("deleteSections", "sections", "Array&lt;number&gt;");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSections", "withSlides", "boolean");
        let varpassword = <string>TestInitializer.getValue("deleteSections", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSections", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSections", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSections", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSections(varname, varsections, varwithSlides, varpassword, varfolder, varstorage), "deleteSections", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSections", "name", "string");
        let varsections = <Array<number>>TestInitializer.getValue("deleteSections", "sections", "Array&lt;number&gt;");
        let varwithSlides = <boolean>TestInitializer.getValue("deleteSections", "withSlides", "boolean");
        let varpassword = <string>TestInitializer.getValue("deleteSections", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSections", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSections", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSections", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSections(varname, varsections, varwithSlides, varpassword, varfolder, varstorage), "deleteSections", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteShape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteShape", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("deleteShape", "shapeIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteShape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteShape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteShape", "storage", "string");
            return TestInitializer.initialize("deleteShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), false, "deleteShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteShape", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteShape", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteShape", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteShape", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteShape", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteShape", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("deleteShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteShape", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "deleteShape", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteShapes", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteShapes", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteShapes", "slideIndex", "number");
            let varshapes = <Array<number>>TestInitializer.getValue("deleteShapes", "shapes", "Array&lt;number&gt;");
            let varpassword = <string>TestInitializer.getValue("deleteShapes", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteShapes", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteShapes", "storage", "string");
            return TestInitializer.initialize("deleteShapes", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), false, "deleteShapes");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteShapes", "slideIndex", "number");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteShapes", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteShapes", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteShapes", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteShapes", "slideIndex", "number");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteShapes", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteShapes", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteShapes", field, varslideIndex);
            });
        });
    });

    it("invalid shapes test", () => {
        const field = "shapes";
        let varname = <string>TestInitializer.getValue("deleteShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteShapes", "slideIndex", "number");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteShapes", "storage", "string");
        varshapes = <Array<number>>TestInitializer.invalidizeValue(varshapes, field, "Array&lt;number&gt;", "deleteShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteShapes", field, varshapes).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteShapes", field, varshapes);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteShapes", "slideIndex", "number");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteShapes", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteShapes", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteShapes", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteShapes", "slideIndex", "number");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteShapes", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteShapes", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteShapes", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteShapes", "slideIndex", "number");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteShapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteShapes", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteShapes", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteShapes(varname, varslideIndex, varshapes, varpassword, varfolder, varstorage), "deleteShapes", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlide", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteSlide", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteSlide", "storage", "string");
            return TestInitializer.initialize("deleteSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSlide(varname, varslideIndex, varpassword, varfolder, varstorage), false, "deleteSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlide", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlide", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlide", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlide", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlide", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlide", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "deleteSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSlideComments", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlideComments", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteSlideComments", "slideIndex", "number");
            let varauthor = <string>TestInitializer.getValue("deleteSlideComments", "author", "string");
            let varpassword = <string>TestInitializer.getValue("deleteSlideComments", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteSlideComments", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteSlideComments", "storage", "string");
            return TestInitializer.initialize("deleteSlideComments", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSlideComments(varname, varslideIndex, varauthor, varpassword, varfolder, varstorage), false, "deleteSlideComments");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlideComments", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideComments", "slideIndex", "number");
        let varauthor = <string>TestInitializer.getValue("deleteSlideComments", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteSlideComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlideComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlideComments", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideComments", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlideComments(varname, varslideIndex, varauthor, varpassword, varfolder, varstorage), "deleteSlideComments", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSlideComments", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideComments", "slideIndex", "number");
        let varauthor = <string>TestInitializer.getValue("deleteSlideComments", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteSlideComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlideComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlideComments", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideComments", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlideComments(varname, varslideIndex, varauthor, varpassword, varfolder, varstorage), "deleteSlideComments", field, varslideIndex);
            });
        });
    });

    it("invalid author test", () => {
        const field = "author";
        let varname = <string>TestInitializer.getValue("deleteSlideComments", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideComments", "slideIndex", "number");
        let varauthor = <string>TestInitializer.getValue("deleteSlideComments", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteSlideComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlideComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlideComments", "storage", "string");
        varauthor = <string>TestInitializer.invalidizeValue(varauthor, field, "string", "deleteSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideComments", field, varauthor).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlideComments(varname, varslideIndex, varauthor, varpassword, varfolder, varstorage), "deleteSlideComments", field, varauthor);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlideComments", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideComments", "slideIndex", "number");
        let varauthor = <string>TestInitializer.getValue("deleteSlideComments", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteSlideComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlideComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlideComments", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideComments", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlideComments(varname, varslideIndex, varauthor, varpassword, varfolder, varstorage), "deleteSlideComments", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlideComments", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideComments", "slideIndex", "number");
        let varauthor = <string>TestInitializer.getValue("deleteSlideComments", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteSlideComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlideComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlideComments", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideComments", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlideComments(varname, varslideIndex, varauthor, varpassword, varfolder, varstorage), "deleteSlideComments", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlideComments", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideComments", "slideIndex", "number");
        let varauthor = <string>TestInitializer.getValue("deleteSlideComments", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteSlideComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlideComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlideComments", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideComments", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlideComments(varname, varslideIndex, varauthor, varpassword, varfolder, varstorage), "deleteSlideComments", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSlideCommentsOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("deleteSlideCommentsOnline", "document");
            let varslideIndex = <number>TestInitializer.getValue("deleteSlideCommentsOnline", "slideIndex", "number");
            let varauthor = <string>TestInitializer.getValue("deleteSlideCommentsOnline", "author", "string");
            let varpassword = <string>TestInitializer.getValue("deleteSlideCommentsOnline", "password", "string");
            return TestInitializer.initialize("deleteSlideCommentsOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSlideCommentsOnline(vardocument, varslideIndex, varauthor, varpassword), true, "deleteSlideCommentsOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("deleteSlideCommentsOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideCommentsOnline", "slideIndex", "number");
        let varauthor = <string>TestInitializer.getValue("deleteSlideCommentsOnline", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteSlideCommentsOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "deleteSlideCommentsOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideCommentsOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlideCommentsOnline(vardocument, varslideIndex, varauthor, varpassword), "deleteSlideCommentsOnline", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("deleteSlideCommentsOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideCommentsOnline", "slideIndex", "number");
        let varauthor = <string>TestInitializer.getValue("deleteSlideCommentsOnline", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteSlideCommentsOnline", "password", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSlideCommentsOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideCommentsOnline", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlideCommentsOnline(vardocument, varslideIndex, varauthor, varpassword), "deleteSlideCommentsOnline", field, varslideIndex);
            });
        });
    });

    it("invalid author test", () => {
        const field = "author";
        let vardocument = <Buffer>TestInitializer.getStreamValue("deleteSlideCommentsOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideCommentsOnline", "slideIndex", "number");
        let varauthor = <string>TestInitializer.getValue("deleteSlideCommentsOnline", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteSlideCommentsOnline", "password", "string");
        varauthor = <string>TestInitializer.invalidizeValue(varauthor, field, "string", "deleteSlideCommentsOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideCommentsOnline", field, varauthor).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlideCommentsOnline(vardocument, varslideIndex, varauthor, varpassword), "deleteSlideCommentsOnline", field, varauthor);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("deleteSlideCommentsOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("deleteSlideCommentsOnline", "slideIndex", "number");
        let varauthor = <string>TestInitializer.getValue("deleteSlideCommentsOnline", "author", "string");
        let varpassword = <string>TestInitializer.getValue("deleteSlideCommentsOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlideCommentsOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlideCommentsOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlideCommentsOnline(vardocument, varslideIndex, varauthor, varpassword), "deleteSlideCommentsOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for deleteSlides", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSlides", "name", "string");
            let varslides = <Array<number>>TestInitializer.getValue("deleteSlides", "slides", "Array&lt;number&gt;");
            let varpassword = <string>TestInitializer.getValue("deleteSlides", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteSlides", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteSlides", "storage", "string");
            return TestInitializer.initialize("deleteSlides", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSlides(varname, varslides, varpassword, varfolder, varstorage), false, "deleteSlides");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSlides", "name", "string");
        let varslides = <Array<number>>TestInitializer.getValue("deleteSlides", "slides", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlides", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlides", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlides(varname, varslides, varpassword, varfolder, varstorage), "deleteSlides", field, varname);
            });
        });
    });

    it("invalid slides test", () => {
        const field = "slides";
        let varname = <string>TestInitializer.getValue("deleteSlides", "name", "string");
        let varslides = <Array<number>>TestInitializer.getValue("deleteSlides", "slides", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlides", "storage", "string");
        varslides = <Array<number>>TestInitializer.invalidizeValue(varslides, field, "Array&lt;number&gt;", "deleteSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlides", field, varslides).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlides(varname, varslides, varpassword, varfolder, varstorage), "deleteSlides", field, varslides);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSlides", "name", "string");
        let varslides = <Array<number>>TestInitializer.getValue("deleteSlides", "slides", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlides", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlides", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlides(varname, varslides, varpassword, varfolder, varstorage), "deleteSlides", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSlides", "name", "string");
        let varslides = <Array<number>>TestInitializer.getValue("deleteSlides", "slides", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlides", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlides", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlides(varname, varslides, varpassword, varfolder, varstorage), "deleteSlides", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSlides", "name", "string");
        let varslides = <Array<number>>TestInitializer.getValue("deleteSlides", "slides", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSlides", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSlides", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSlides(varname, varslides, varpassword, varfolder, varstorage), "deleteSlides", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSubshape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSubshape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteSubshape", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("deleteSubshape", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("deleteSubshape", "shapeIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteSubshape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteSubshape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteSubshape", "storage", "string");
            return TestInitializer.initialize("deleteSubshape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), false, "deleteSubshape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshape", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "deleteSubshape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshape", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "deleteSubshape", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("deleteSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshape", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshape", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "deleteSubshape", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshape", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "deleteSubshape", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshape", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "deleteSubshape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshape", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "deleteSubshape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshape", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "deleteSubshape", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSubshapeParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage", "string");
            return TestInitializer.initialize("deleteSubshapeParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "deleteSubshapeParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraph", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "deleteSubshapeParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSubshapeParagraphs", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex", "number");
            let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs", "Array&lt;number&gt;");
            let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage", "string");
            return TestInitializer.initialize("deleteSubshapeParagraphs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), false, "deleteSubshapeParagraphs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphs test", () => {
        const field = "paragraphs";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage", "string");
        varparagraphs = <Array<number>>TestInitializer.invalidizeValue(varparagraphs, field, "Array&lt;number&gt;", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varparagraphs).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varparagraphs);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapeParagraphs", "shapeIndex", "number");
        let varparagraphs = <Array<number>>TestInitializer.getValue("deleteSubshapeParagraphs", "paragraphs", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapeParagraphs", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapeParagraphs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varparagraphs, varpassword, varfolder, varstorage), "deleteSubshapeParagraphs", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSubshapePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex", "number");
            let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex", "number");
            let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage", "string");
            return TestInitializer.initialize("deleteSubshapePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), false, "deleteSubshapePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage", "string");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varportionIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("deleteSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortion", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "deleteSubshapePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSubshapePortions", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex", "number");
            let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions", "Array&lt;number&gt;");
            let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage", "string");
            return TestInitializer.initialize("deleteSubshapePortions", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), false, "deleteSubshapePortions");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varparagraphIndex);
            });
        });
    });

    it("invalid portions test", () => {
        const field = "portions";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage", "string");
        varportions = <Array<number>>TestInitializer.invalidizeValue(varportions, field, "Array&lt;number&gt;", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varportions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varportions);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("deleteSubshapePortions", "paragraphIndex", "number");
        let varportions = <Array<number>>TestInitializer.getValue("deleteSubshapePortions", "portions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapePortions", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapePortions", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportions, varpassword, varfolder, varstorage), "deleteSubshapePortions", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteSubshapes", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteSubshapes", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("deleteSubshapes", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("deleteSubshapes", "path", "string");
            let varshapes = <Array<number>>TestInitializer.getValue("deleteSubshapes", "shapes", "Array&lt;number&gt;");
            let varpassword = <string>TestInitializer.getValue("deleteSubshapes", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteSubshapes", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteSubshapes", "storage", "string");
            return TestInitializer.initialize("deleteSubshapes", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), false, "deleteSubshapes");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteSubshapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapes", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapes", "path", "string");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSubshapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapes", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapes", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), "deleteSubshapes", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("deleteSubshapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapes", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapes", "path", "string");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSubshapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapes", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "deleteSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapes", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), "deleteSubshapes", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("deleteSubshapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapes", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapes", "path", "string");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSubshapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapes", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "deleteSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapes", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), "deleteSubshapes", field, varpath);
            });
        });
    });

    it("invalid shapes test", () => {
        const field = "shapes";
        let varname = <string>TestInitializer.getValue("deleteSubshapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapes", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapes", "path", "string");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSubshapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapes", "storage", "string");
        varshapes = <Array<number>>TestInitializer.invalidizeValue(varshapes, field, "Array&lt;number&gt;", "deleteSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapes", field, varshapes).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), "deleteSubshapes", field, varshapes);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteSubshapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapes", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapes", "path", "string");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSubshapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapes", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapes", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), "deleteSubshapes", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteSubshapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapes", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapes", "path", "string");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSubshapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapes", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapes", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), "deleteSubshapes", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteSubshapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("deleteSubshapes", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("deleteSubshapes", "path", "string");
        let varshapes = <Array<number>>TestInitializer.getValue("deleteSubshapes", "shapes", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("deleteSubshapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteSubshapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteSubshapes", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteSubshapes", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteSubshapes(varname, varslideIndex, varpath, varshapes, varpassword, varfolder, varstorage), "deleteSubshapes", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteWatermark", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("deleteWatermark", "name", "string");
            let varshapeName = <string>TestInitializer.getValue("deleteWatermark", "shapeName", "string");
            let varpassword = <string>TestInitializer.getValue("deleteWatermark", "password", "string");
            let varfolder = <string>TestInitializer.getValue("deleteWatermark", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("deleteWatermark", "storage", "string");
            return TestInitializer.initialize("deleteWatermark", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteWatermark(varname, varshapeName, varpassword, varfolder, varstorage), false, "deleteWatermark");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("deleteWatermark", "name", "string");
        let varshapeName = <string>TestInitializer.getValue("deleteWatermark", "shapeName", "string");
        let varpassword = <string>TestInitializer.getValue("deleteWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteWatermark", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "deleteWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteWatermark", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteWatermark(varname, varshapeName, varpassword, varfolder, varstorage), "deleteWatermark", field, varname);
            });
        });
    });

    it("invalid shapeName test", () => {
        const field = "shapeName";
        let varname = <string>TestInitializer.getValue("deleteWatermark", "name", "string");
        let varshapeName = <string>TestInitializer.getValue("deleteWatermark", "shapeName", "string");
        let varpassword = <string>TestInitializer.getValue("deleteWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteWatermark", "storage", "string");
        varshapeName = <string>TestInitializer.invalidizeValue(varshapeName, field, "string", "deleteWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteWatermark", field, varshapeName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteWatermark(varname, varshapeName, varpassword, varfolder, varstorage), "deleteWatermark", field, varshapeName);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("deleteWatermark", "name", "string");
        let varshapeName = <string>TestInitializer.getValue("deleteWatermark", "shapeName", "string");
        let varpassword = <string>TestInitializer.getValue("deleteWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteWatermark", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteWatermark", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteWatermark(varname, varshapeName, varpassword, varfolder, varstorage), "deleteWatermark", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("deleteWatermark", "name", "string");
        let varshapeName = <string>TestInitializer.getValue("deleteWatermark", "shapeName", "string");
        let varpassword = <string>TestInitializer.getValue("deleteWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteWatermark", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "deleteWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteWatermark", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteWatermark(varname, varshapeName, varpassword, varfolder, varstorage), "deleteWatermark", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("deleteWatermark", "name", "string");
        let varshapeName = <string>TestInitializer.getValue("deleteWatermark", "shapeName", "string");
        let varpassword = <string>TestInitializer.getValue("deleteWatermark", "password", "string");
        let varfolder = <string>TestInitializer.getValue("deleteWatermark", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("deleteWatermark", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "deleteWatermark");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteWatermark", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteWatermark(varname, varshapeName, varpassword, varfolder, varstorage), "deleteWatermark", field, varstorage);
            });
        });
    });
});

describe("Tests for deleteWatermarkOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("deleteWatermarkOnline", "document");
            let varshapeName = <string>TestInitializer.getValue("deleteWatermarkOnline", "shapeName", "string");
            let varpassword = <string>TestInitializer.getValue("deleteWatermarkOnline", "password", "string");
            return TestInitializer.initialize("deleteWatermarkOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().deleteWatermarkOnline(vardocument, varshapeName, varpassword), true, "deleteWatermarkOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("deleteWatermarkOnline", "document");
        let varshapeName = <string>TestInitializer.getValue("deleteWatermarkOnline", "shapeName", "string");
        let varpassword = <string>TestInitializer.getValue("deleteWatermarkOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "deleteWatermarkOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteWatermarkOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteWatermarkOnline(vardocument, varshapeName, varpassword), "deleteWatermarkOnline", field, vardocument);
            });
        });
    });

    it("invalid shapeName test", () => {
        const field = "shapeName";
        let vardocument = <Buffer>TestInitializer.getStreamValue("deleteWatermarkOnline", "document");
        let varshapeName = <string>TestInitializer.getValue("deleteWatermarkOnline", "shapeName", "string");
        let varpassword = <string>TestInitializer.getValue("deleteWatermarkOnline", "password", "string");
        varshapeName = <string>TestInitializer.invalidizeValue(varshapeName, field, "string", "deleteWatermarkOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteWatermarkOnline", field, varshapeName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteWatermarkOnline(vardocument, varshapeName, varpassword), "deleteWatermarkOnline", field, varshapeName);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("deleteWatermarkOnline", "document");
        let varshapeName = <string>TestInitializer.getValue("deleteWatermarkOnline", "shapeName", "string");
        let varpassword = <string>TestInitializer.getValue("deleteWatermarkOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "deleteWatermarkOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("deleteWatermarkOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().deleteWatermarkOnline(vardocument, varshapeName, varpassword), "deleteWatermarkOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for downloadFile", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("downloadFile", "path", "string");
            let varstorageName = <string>TestInitializer.getValue("downloadFile", "storageName", "string");
            let varversionId = <string>TestInitializer.getValue("downloadFile", "versionId", "string");
            return TestInitializer.initialize("downloadFile", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadFile(varpath, varstorageName, varversionId), true, "downloadFile");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("downloadFile", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("downloadFile", "storageName", "string");
        let varversionId = <string>TestInitializer.getValue("downloadFile", "versionId", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "downloadFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadFile", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadFile(varpath, varstorageName, varversionId), "downloadFile", field, varpath);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("downloadFile", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("downloadFile", "storageName", "string");
        let varversionId = <string>TestInitializer.getValue("downloadFile", "versionId", "string");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "downloadFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadFile", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadFile(varpath, varstorageName, varversionId), "downloadFile", field, varstorageName);
            });
        });
    });

    it("invalid versionId test", () => {
        const field = "versionId";
        let varpath = <string>TestInitializer.getValue("downloadFile", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("downloadFile", "storageName", "string");
        let varversionId = <string>TestInitializer.getValue("downloadFile", "versionId", "string");
        varversionId = <string>TestInitializer.invalidizeValue(varversionId, field, "string", "downloadFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadFile", field, varversionId).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadFile(varpath, varstorageName, varversionId), "downloadFile", field, varversionId);
            });
        });
    });
});

describe("Tests for downloadImage", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("downloadImage", "name", "string");
            let varindex = <number>TestInitializer.getValue("downloadImage", "index", "number");
            let varformat = <string>TestInitializer.getValue("downloadImage", "format", "string");
            let varpassword = <string>TestInitializer.getValue("downloadImage", "password", "string");
            let varfolder = <string>TestInitializer.getValue("downloadImage", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("downloadImage", "storage", "string");
            return TestInitializer.initialize("downloadImage", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImage(varname, varindex, varformat, varpassword, varfolder, varstorage), true, "downloadImage");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("downloadImage", "name", "string");
        let varindex = <number>TestInitializer.getValue("downloadImage", "index", "number");
        let varformat = <string>TestInitializer.getValue("downloadImage", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImage", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImage", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImage", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "downloadImage");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImage", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImage(varname, varindex, varformat, varpassword, varfolder, varstorage), "downloadImage", field, varname);
            });
        });
    });

    it("invalid index test", () => {
        const field = "index";
        let varname = <string>TestInitializer.getValue("downloadImage", "name", "string");
        let varindex = <number>TestInitializer.getValue("downloadImage", "index", "number");
        let varformat = <string>TestInitializer.getValue("downloadImage", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImage", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImage", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImage", "storage", "string");
        varindex = <number>TestInitializer.invalidizeValue(varindex, field, "number", "downloadImage");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImage", field, varindex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImage(varname, varindex, varformat, varpassword, varfolder, varstorage), "downloadImage", field, varindex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("downloadImage", "name", "string");
        let varindex = <number>TestInitializer.getValue("downloadImage", "index", "number");
        let varformat = <string>TestInitializer.getValue("downloadImage", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImage", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImage", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImage", "storage", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "downloadImage");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImage", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImage(varname, varindex, varformat, varpassword, varfolder, varstorage), "downloadImage", field, varformat);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("downloadImage", "name", "string");
        let varindex = <number>TestInitializer.getValue("downloadImage", "index", "number");
        let varformat = <string>TestInitializer.getValue("downloadImage", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImage", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImage", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImage", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadImage");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImage", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImage(varname, varindex, varformat, varpassword, varfolder, varstorage), "downloadImage", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("downloadImage", "name", "string");
        let varindex = <number>TestInitializer.getValue("downloadImage", "index", "number");
        let varformat = <string>TestInitializer.getValue("downloadImage", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImage", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImage", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImage", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "downloadImage");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImage", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImage(varname, varindex, varformat, varpassword, varfolder, varstorage), "downloadImage", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("downloadImage", "name", "string");
        let varindex = <number>TestInitializer.getValue("downloadImage", "index", "number");
        let varformat = <string>TestInitializer.getValue("downloadImage", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImage", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImage", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImage", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "downloadImage");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImage", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImage(varname, varindex, varformat, varpassword, varfolder, varstorage), "downloadImage", field, varstorage);
            });
        });
    });
});

describe("Tests for downloadImageDefaultFormat", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("downloadImageDefaultFormat", "name", "string");
            let varindex = <number>TestInitializer.getValue("downloadImageDefaultFormat", "index", "number");
            let varpassword = <string>TestInitializer.getValue("downloadImageDefaultFormat", "password", "string");
            let varfolder = <string>TestInitializer.getValue("downloadImageDefaultFormat", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("downloadImageDefaultFormat", "storage", "string");
            return TestInitializer.initialize("downloadImageDefaultFormat", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImageDefaultFormat(varname, varindex, varpassword, varfolder, varstorage), true, "downloadImageDefaultFormat");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("downloadImageDefaultFormat", "name", "string");
        let varindex = <number>TestInitializer.getValue("downloadImageDefaultFormat", "index", "number");
        let varpassword = <string>TestInitializer.getValue("downloadImageDefaultFormat", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImageDefaultFormat", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImageDefaultFormat", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "downloadImageDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImageDefaultFormat", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormat(varname, varindex, varpassword, varfolder, varstorage), "downloadImageDefaultFormat", field, varname);
            });
        });
    });

    it("invalid index test", () => {
        const field = "index";
        let varname = <string>TestInitializer.getValue("downloadImageDefaultFormat", "name", "string");
        let varindex = <number>TestInitializer.getValue("downloadImageDefaultFormat", "index", "number");
        let varpassword = <string>TestInitializer.getValue("downloadImageDefaultFormat", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImageDefaultFormat", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImageDefaultFormat", "storage", "string");
        varindex = <number>TestInitializer.invalidizeValue(varindex, field, "number", "downloadImageDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImageDefaultFormat", field, varindex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormat(varname, varindex, varpassword, varfolder, varstorage), "downloadImageDefaultFormat", field, varindex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("downloadImageDefaultFormat", "name", "string");
        let varindex = <number>TestInitializer.getValue("downloadImageDefaultFormat", "index", "number");
        let varpassword = <string>TestInitializer.getValue("downloadImageDefaultFormat", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImageDefaultFormat", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImageDefaultFormat", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadImageDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImageDefaultFormat", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormat(varname, varindex, varpassword, varfolder, varstorage), "downloadImageDefaultFormat", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("downloadImageDefaultFormat", "name", "string");
        let varindex = <number>TestInitializer.getValue("downloadImageDefaultFormat", "index", "number");
        let varpassword = <string>TestInitializer.getValue("downloadImageDefaultFormat", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImageDefaultFormat", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImageDefaultFormat", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "downloadImageDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImageDefaultFormat", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormat(varname, varindex, varpassword, varfolder, varstorage), "downloadImageDefaultFormat", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("downloadImageDefaultFormat", "name", "string");
        let varindex = <number>TestInitializer.getValue("downloadImageDefaultFormat", "index", "number");
        let varpassword = <string>TestInitializer.getValue("downloadImageDefaultFormat", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImageDefaultFormat", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImageDefaultFormat", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "downloadImageDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImageDefaultFormat", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormat(varname, varindex, varpassword, varfolder, varstorage), "downloadImageDefaultFormat", field, varstorage);
            });
        });
    });
});

describe("Tests for downloadImageDefaultFormatOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImageDefaultFormatOnline", "document");
            let varindex = <number>TestInitializer.getValue("downloadImageDefaultFormatOnline", "index", "number");
            let varpassword = <string>TestInitializer.getValue("downloadImageDefaultFormatOnline", "password", "string");
            return TestInitializer.initialize("downloadImageDefaultFormatOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImageDefaultFormatOnline(vardocument, varindex, varpassword), true, "downloadImageDefaultFormatOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImageDefaultFormatOnline", "document");
        let varindex = <number>TestInitializer.getValue("downloadImageDefaultFormatOnline", "index", "number");
        let varpassword = <string>TestInitializer.getValue("downloadImageDefaultFormatOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "downloadImageDefaultFormatOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImageDefaultFormatOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormatOnline(vardocument, varindex, varpassword), "downloadImageDefaultFormatOnline", field, vardocument);
            });
        });
    });

    it("invalid index test", () => {
        const field = "index";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImageDefaultFormatOnline", "document");
        let varindex = <number>TestInitializer.getValue("downloadImageDefaultFormatOnline", "index", "number");
        let varpassword = <string>TestInitializer.getValue("downloadImageDefaultFormatOnline", "password", "string");
        varindex = <number>TestInitializer.invalidizeValue(varindex, field, "number", "downloadImageDefaultFormatOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImageDefaultFormatOnline", field, varindex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormatOnline(vardocument, varindex, varpassword), "downloadImageDefaultFormatOnline", field, varindex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImageDefaultFormatOnline", "document");
        let varindex = <number>TestInitializer.getValue("downloadImageDefaultFormatOnline", "index", "number");
        let varpassword = <string>TestInitializer.getValue("downloadImageDefaultFormatOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadImageDefaultFormatOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImageDefaultFormatOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageDefaultFormatOnline(vardocument, varindex, varpassword), "downloadImageDefaultFormatOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for downloadImageOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImageOnline", "document");
            let varindex = <number>TestInitializer.getValue("downloadImageOnline", "index", "number");
            let varformat = <string>TestInitializer.getValue("downloadImageOnline", "format", "string");
            let varpassword = <string>TestInitializer.getValue("downloadImageOnline", "password", "string");
            return TestInitializer.initialize("downloadImageOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImageOnline(vardocument, varindex, varformat, varpassword), true, "downloadImageOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImageOnline", "document");
        let varindex = <number>TestInitializer.getValue("downloadImageOnline", "index", "number");
        let varformat = <string>TestInitializer.getValue("downloadImageOnline", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImageOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "downloadImageOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImageOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageOnline(vardocument, varindex, varformat, varpassword), "downloadImageOnline", field, vardocument);
            });
        });
    });

    it("invalid index test", () => {
        const field = "index";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImageOnline", "document");
        let varindex = <number>TestInitializer.getValue("downloadImageOnline", "index", "number");
        let varformat = <string>TestInitializer.getValue("downloadImageOnline", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImageOnline", "password", "string");
        varindex = <number>TestInitializer.invalidizeValue(varindex, field, "number", "downloadImageOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImageOnline", field, varindex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageOnline(vardocument, varindex, varformat, varpassword), "downloadImageOnline", field, varindex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImageOnline", "document");
        let varindex = <number>TestInitializer.getValue("downloadImageOnline", "index", "number");
        let varformat = <string>TestInitializer.getValue("downloadImageOnline", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImageOnline", "password", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "downloadImageOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImageOnline", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageOnline(vardocument, varindex, varformat, varpassword), "downloadImageOnline", field, varformat);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImageOnline", "document");
        let varindex = <number>TestInitializer.getValue("downloadImageOnline", "index", "number");
        let varformat = <string>TestInitializer.getValue("downloadImageOnline", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImageOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadImageOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImageOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImageOnline(vardocument, varindex, varformat, varpassword), "downloadImageOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for downloadImages", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("downloadImages", "name", "string");
            let varformat = <string>TestInitializer.getValue("downloadImages", "format", "string");
            let varpassword = <string>TestInitializer.getValue("downloadImages", "password", "string");
            let varfolder = <string>TestInitializer.getValue("downloadImages", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("downloadImages", "storage", "string");
            return TestInitializer.initialize("downloadImages", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImages(varname, varformat, varpassword, varfolder, varstorage), true, "downloadImages");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("downloadImages", "name", "string");
        let varformat = <string>TestInitializer.getValue("downloadImages", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImages", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImages", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImages", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "downloadImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImages", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImages(varname, varformat, varpassword, varfolder, varstorage), "downloadImages", field, varname);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("downloadImages", "name", "string");
        let varformat = <string>TestInitializer.getValue("downloadImages", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImages", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImages", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImages", "storage", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "downloadImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImages", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImages(varname, varformat, varpassword, varfolder, varstorage), "downloadImages", field, varformat);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("downloadImages", "name", "string");
        let varformat = <string>TestInitializer.getValue("downloadImages", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImages", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImages", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImages", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImages", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImages(varname, varformat, varpassword, varfolder, varstorage), "downloadImages", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("downloadImages", "name", "string");
        let varformat = <string>TestInitializer.getValue("downloadImages", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImages", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImages", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImages", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "downloadImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImages", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImages(varname, varformat, varpassword, varfolder, varstorage), "downloadImages", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("downloadImages", "name", "string");
        let varformat = <string>TestInitializer.getValue("downloadImages", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImages", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImages", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImages", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "downloadImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImages", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImages(varname, varformat, varpassword, varfolder, varstorage), "downloadImages", field, varstorage);
            });
        });
    });
});

describe("Tests for downloadImagesDefaultFormat", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "name", "string");
            let varpassword = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "password", "string");
            let varfolder = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "storage", "string");
            return TestInitializer.initialize("downloadImagesDefaultFormat", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImagesDefaultFormat(varname, varpassword, varfolder, varstorage), true, "downloadImagesDefaultFormat");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "name", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "downloadImagesDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImagesDefaultFormat", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesDefaultFormat(varname, varpassword, varfolder, varstorage), "downloadImagesDefaultFormat", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "name", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadImagesDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImagesDefaultFormat", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesDefaultFormat(varname, varpassword, varfolder, varstorage), "downloadImagesDefaultFormat", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "name", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "downloadImagesDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImagesDefaultFormat", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesDefaultFormat(varname, varpassword, varfolder, varstorage), "downloadImagesDefaultFormat", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "name", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadImagesDefaultFormat", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "downloadImagesDefaultFormat");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImagesDefaultFormat", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesDefaultFormat(varname, varpassword, varfolder, varstorage), "downloadImagesDefaultFormat", field, varstorage);
            });
        });
    });
});

describe("Tests for downloadImagesDefaultFormatOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImagesDefaultFormatOnline", "document");
            let varpassword = <string>TestInitializer.getValue("downloadImagesDefaultFormatOnline", "password", "string");
            return TestInitializer.initialize("downloadImagesDefaultFormatOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImagesDefaultFormatOnline(vardocument, varpassword), true, "downloadImagesDefaultFormatOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImagesDefaultFormatOnline", "document");
        let varpassword = <string>TestInitializer.getValue("downloadImagesDefaultFormatOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "downloadImagesDefaultFormatOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImagesDefaultFormatOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesDefaultFormatOnline(vardocument, varpassword), "downloadImagesDefaultFormatOnline", field, vardocument);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImagesDefaultFormatOnline", "document");
        let varpassword = <string>TestInitializer.getValue("downloadImagesDefaultFormatOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadImagesDefaultFormatOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImagesDefaultFormatOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesDefaultFormatOnline(vardocument, varpassword), "downloadImagesDefaultFormatOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for downloadImagesOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImagesOnline", "document");
            let varformat = <string>TestInitializer.getValue("downloadImagesOnline", "format", "string");
            let varpassword = <string>TestInitializer.getValue("downloadImagesOnline", "password", "string");
            return TestInitializer.initialize("downloadImagesOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadImagesOnline(vardocument, varformat, varpassword), true, "downloadImagesOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImagesOnline", "document");
        let varformat = <string>TestInitializer.getValue("downloadImagesOnline", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImagesOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "downloadImagesOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImagesOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesOnline(vardocument, varformat, varpassword), "downloadImagesOnline", field, vardocument);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImagesOnline", "document");
        let varformat = <string>TestInitializer.getValue("downloadImagesOnline", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImagesOnline", "password", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "downloadImagesOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImagesOnline", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesOnline(vardocument, varformat, varpassword), "downloadImagesOnline", field, varformat);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadImagesOnline", "document");
        let varformat = <string>TestInitializer.getValue("downloadImagesOnline", "format", "string");
        let varpassword = <string>TestInitializer.getValue("downloadImagesOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadImagesOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadImagesOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadImagesOnline(vardocument, varformat, varpassword), "downloadImagesOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for downloadNotesSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("downloadNotesSlide", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlide", "slideIndex", "number");
            let varformat = <string>TestInitializer.getValue("downloadNotesSlide", "format", "string");
            let varwidth = <number>TestInitializer.getValue("downloadNotesSlide", "width", "number");
            let varheight = <number>TestInitializer.getValue("downloadNotesSlide", "height", "number");
            let varpassword = <string>TestInitializer.getValue("downloadNotesSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("downloadNotesSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("downloadNotesSlide", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlide", "fontsFolder", "string");
            return TestInitializer.initialize("downloadNotesSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), true, "downloadNotesSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("downloadNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlide", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlide", "fontsFolder", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "downloadNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("downloadNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlide", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlide", "fontsFolder", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "downloadNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlide", field, varslideIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("downloadNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlide", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlide", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "downloadNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlide", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlide", field, varformat);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let varname = <string>TestInitializer.getValue("downloadNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlide", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlide", "fontsFolder", "string");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "downloadNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlide", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlide", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let varname = <string>TestInitializer.getValue("downloadNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlide", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlide", "fontsFolder", "string");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "downloadNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlide", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlide", field, varheight);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("downloadNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlide", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlide", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("downloadNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlide", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlide", "fontsFolder", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "downloadNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("downloadNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlide", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlide", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "downloadNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlide", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("downloadNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlide", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlide", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "downloadNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlide", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlide(varname, varslideIndex, varformat, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlide", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for downloadNotesSlideOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("downloadNotesSlideOnline", "document");
            let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideOnline", "slideIndex", "number");
            let varformat = <string>TestInitializer.getValue("downloadNotesSlideOnline", "format", "string");
            let varwidth = <number>TestInitializer.getValue("downloadNotesSlideOnline", "width", "number");
            let varheight = <number>TestInitializer.getValue("downloadNotesSlideOnline", "height", "number");
            let varpassword = <string>TestInitializer.getValue("downloadNotesSlideOnline", "password", "string");
            let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideOnline", "fontsFolder", "string");
            return TestInitializer.initialize("downloadNotesSlideOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), true, "downloadNotesSlideOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadNotesSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideOnline", "password", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideOnline", "fontsFolder", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "downloadNotesSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), "downloadNotesSlideOnline", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadNotesSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideOnline", "password", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideOnline", "fontsFolder", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "downloadNotesSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideOnline", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), "downloadNotesSlideOnline", field, varslideIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadNotesSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideOnline", "password", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideOnline", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "downloadNotesSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideOnline", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), "downloadNotesSlideOnline", field, varformat);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadNotesSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideOnline", "password", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideOnline", "fontsFolder", "string");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "downloadNotesSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideOnline", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), "downloadNotesSlideOnline", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadNotesSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideOnline", "password", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideOnline", "fontsFolder", "string");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "downloadNotesSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideOnline", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), "downloadNotesSlideOnline", field, varheight);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadNotesSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideOnline", "password", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideOnline", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadNotesSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), "downloadNotesSlideOnline", field, varpassword);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadNotesSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadNotesSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadNotesSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideOnline", "password", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideOnline", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "downloadNotesSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideOnline", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varfontsFolder), "downloadNotesSlideOnline", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for downloadNotesSlideShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("downloadNotesSlideShape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "shapeIndex", "number");
            let varformat = <string>TestInitializer.getValue("downloadNotesSlideShape", "format", "string");
            let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadNotesSlideShape", "options", "IShapeExportOptions");
            let varscaleX = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleX", "number");
            let varscaleY = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleY", "number");
            let varbounds = <string>TestInitializer.getValue("downloadNotesSlideShape", "bounds", "string");
            let varpassword = <string>TestInitializer.getValue("downloadNotesSlideShape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("downloadNotesSlideShape", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "fontsFolder", "string");
            return TestInitializer.initialize("downloadNotesSlideShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), true, "downloadNotesSlideShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("downloadNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "fontsFolder", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "downloadNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlideShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("downloadNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "fontsFolder", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "downloadNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlideShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("downloadNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "fontsFolder", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "downloadNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlideShape", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("downloadNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "downloadNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideShape", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlideShape", field, varformat);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("downloadNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "fontsFolder", "string");
        varoptions = <model.IShapeExportOptions>TestInitializer.invalidizeValue(varoptions, field, "IShapeExportOptions", "downloadNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideShape", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlideShape", field, varoptions);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let varname = <string>TestInitializer.getValue("downloadNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "fontsFolder", "string");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "downloadNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideShape", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlideShape", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let varname = <string>TestInitializer.getValue("downloadNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "fontsFolder", "string");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "downloadNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideShape", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlideShape", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let varname = <string>TestInitializer.getValue("downloadNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "fontsFolder", "string");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "downloadNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideShape", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlideShape", field, varbounds);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("downloadNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlideShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("downloadNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "fontsFolder", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "downloadNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlideShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("downloadNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "downloadNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlideShape", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("downloadNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadNotesSlideShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadNotesSlideShape", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "downloadNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadNotesSlideShape", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadNotesSlideShape", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for downloadPresentation", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("downloadPresentation", "name", "string");
            let varformat = <string>TestInitializer.getValue("downloadPresentation", "format", "string");
            let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadPresentation", "options", "ExportOptions");
            let varpassword = <string>TestInitializer.getValue("downloadPresentation", "password", "string");
            let varfolder = <string>TestInitializer.getValue("downloadPresentation", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("downloadPresentation", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("downloadPresentation", "fontsFolder", "string");
            return TestInitializer.initialize("downloadPresentation", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), true, "downloadPresentation");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("downloadPresentation", "name", "string");
        let varformat = <string>TestInitializer.getValue("downloadPresentation", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadPresentation", "options", "ExportOptions");
        let varpassword = <string>TestInitializer.getValue("downloadPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadPresentation", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadPresentation", "fontsFolder", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "downloadPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadPresentation", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "downloadPresentation", field, varname);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("downloadPresentation", "name", "string");
        let varformat = <string>TestInitializer.getValue("downloadPresentation", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadPresentation", "options", "ExportOptions");
        let varpassword = <string>TestInitializer.getValue("downloadPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadPresentation", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadPresentation", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "downloadPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadPresentation", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "downloadPresentation", field, varformat);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("downloadPresentation", "name", "string");
        let varformat = <string>TestInitializer.getValue("downloadPresentation", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadPresentation", "options", "ExportOptions");
        let varpassword = <string>TestInitializer.getValue("downloadPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadPresentation", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadPresentation", "fontsFolder", "string");
        varoptions = <model.ExportOptions>TestInitializer.invalidizeValue(varoptions, field, "ExportOptions", "downloadPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadPresentation", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "downloadPresentation", field, varoptions);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("downloadPresentation", "name", "string");
        let varformat = <string>TestInitializer.getValue("downloadPresentation", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadPresentation", "options", "ExportOptions");
        let varpassword = <string>TestInitializer.getValue("downloadPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadPresentation", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadPresentation", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadPresentation", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "downloadPresentation", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("downloadPresentation", "name", "string");
        let varformat = <string>TestInitializer.getValue("downloadPresentation", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadPresentation", "options", "ExportOptions");
        let varpassword = <string>TestInitializer.getValue("downloadPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadPresentation", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadPresentation", "fontsFolder", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "downloadPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadPresentation", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "downloadPresentation", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("downloadPresentation", "name", "string");
        let varformat = <string>TestInitializer.getValue("downloadPresentation", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadPresentation", "options", "ExportOptions");
        let varpassword = <string>TestInitializer.getValue("downloadPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadPresentation", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadPresentation", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "downloadPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadPresentation", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "downloadPresentation", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("downloadPresentation", "name", "string");
        let varformat = <string>TestInitializer.getValue("downloadPresentation", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadPresentation", "options", "ExportOptions");
        let varpassword = <string>TestInitializer.getValue("downloadPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadPresentation", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadPresentation", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "downloadPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadPresentation", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadPresentation(varname, varformat, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "downloadPresentation", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for downloadShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("downloadShape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("downloadShape", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("downloadShape", "shapeIndex", "number");
            let varformat = <string>TestInitializer.getValue("downloadShape", "format", "string");
            let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadShape", "options", "IShapeExportOptions");
            let varscaleX = <number>TestInitializer.getValue("downloadShape", "scaleX", "number");
            let varscaleY = <number>TestInitializer.getValue("downloadShape", "scaleY", "number");
            let varbounds = <string>TestInitializer.getValue("downloadShape", "bounds", "string");
            let varpassword = <string>TestInitializer.getValue("downloadShape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("downloadShape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("downloadShape", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("downloadShape", "fontsFolder", "string");
            return TestInitializer.initialize("downloadShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), true, "downloadShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("downloadShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShape", "fontsFolder", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "downloadShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("downloadShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShape", "fontsFolder", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "downloadShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("downloadShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShape", "fontsFolder", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "downloadShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadShape", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("downloadShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShape", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "downloadShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShape", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadShape", field, varformat);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("downloadShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShape", "fontsFolder", "string");
        varoptions = <model.IShapeExportOptions>TestInitializer.invalidizeValue(varoptions, field, "IShapeExportOptions", "downloadShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShape", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadShape", field, varoptions);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let varname = <string>TestInitializer.getValue("downloadShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShape", "fontsFolder", "string");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "downloadShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShape", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadShape", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let varname = <string>TestInitializer.getValue("downloadShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShape", "fontsFolder", "string");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "downloadShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShape", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadShape", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let varname = <string>TestInitializer.getValue("downloadShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShape", "fontsFolder", "string");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "downloadShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShape", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadShape", field, varbounds);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("downloadShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShape", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("downloadShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShape", "fontsFolder", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "downloadShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("downloadShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShape", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "downloadShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadShape", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("downloadShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShape", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "downloadShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShape", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShape(varname, varslideIndex, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadShape", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for downloadShapeOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("downloadShapeOnline", "document");
            let varslideIndex = <number>TestInitializer.getValue("downloadShapeOnline", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("downloadShapeOnline", "shapeIndex", "number");
            let varformat = <string>TestInitializer.getValue("downloadShapeOnline", "format", "string");
            let varscaleX = <number>TestInitializer.getValue("downloadShapeOnline", "scaleX", "number");
            let varscaleY = <number>TestInitializer.getValue("downloadShapeOnline", "scaleY", "number");
            let varbounds = <string>TestInitializer.getValue("downloadShapeOnline", "bounds", "string");
            let varpassword = <string>TestInitializer.getValue("downloadShapeOnline", "password", "string");
            let varstorage = <string>TestInitializer.getValue("downloadShapeOnline", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("downloadShapeOnline", "fontsFolder", "string");
            return TestInitializer.initialize("downloadShapeOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), true, "downloadShapeOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShapeOnline", "format", "string");
        let varscaleX = <number>TestInitializer.getValue("downloadShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShapeOnline", "fontsFolder", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "downloadShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShapeOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "downloadShapeOnline", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShapeOnline", "format", "string");
        let varscaleX = <number>TestInitializer.getValue("downloadShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShapeOnline", "fontsFolder", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "downloadShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShapeOnline", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "downloadShapeOnline", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShapeOnline", "format", "string");
        let varscaleX = <number>TestInitializer.getValue("downloadShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShapeOnline", "fontsFolder", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "downloadShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShapeOnline", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "downloadShapeOnline", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShapeOnline", "format", "string");
        let varscaleX = <number>TestInitializer.getValue("downloadShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShapeOnline", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "downloadShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShapeOnline", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "downloadShapeOnline", field, varformat);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShapeOnline", "format", "string");
        let varscaleX = <number>TestInitializer.getValue("downloadShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShapeOnline", "fontsFolder", "string");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "downloadShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShapeOnline", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "downloadShapeOnline", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShapeOnline", "format", "string");
        let varscaleX = <number>TestInitializer.getValue("downloadShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShapeOnline", "fontsFolder", "string");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "downloadShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShapeOnline", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "downloadShapeOnline", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShapeOnline", "format", "string");
        let varscaleX = <number>TestInitializer.getValue("downloadShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShapeOnline", "fontsFolder", "string");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "downloadShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShapeOnline", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "downloadShapeOnline", field, varbounds);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShapeOnline", "format", "string");
        let varscaleX = <number>TestInitializer.getValue("downloadShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShapeOnline", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShapeOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "downloadShapeOnline", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShapeOnline", "format", "string");
        let varscaleX = <number>TestInitializer.getValue("downloadShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShapeOnline", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "downloadShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShapeOnline", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "downloadShapeOnline", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("downloadShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadShapeOnline", "format", "string");
        let varscaleX = <number>TestInitializer.getValue("downloadShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadShapeOnline", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "downloadShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadShapeOnline", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "downloadShapeOnline", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for downloadSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("downloadSlide", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("downloadSlide", "slideIndex", "number");
            let varformat = <string>TestInitializer.getValue("downloadSlide", "format", "string");
            let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadSlide", "options", "ExportOptions");
            let varwidth = <number>TestInitializer.getValue("downloadSlide", "width", "number");
            let varheight = <number>TestInitializer.getValue("downloadSlide", "height", "number");
            let varpassword = <string>TestInitializer.getValue("downloadSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("downloadSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("downloadSlide", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("downloadSlide", "fontsFolder", "string");
            return TestInitializer.initialize("downloadSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), true, "downloadSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("downloadSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlide", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("downloadSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlide", "fontsFolder", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "downloadSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("downloadSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlide", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("downloadSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlide", "fontsFolder", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "downloadSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadSlide", field, varslideIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("downloadSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlide", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("downloadSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlide", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "downloadSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlide", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadSlide", field, varformat);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("downloadSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlide", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("downloadSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlide", "fontsFolder", "string");
        varoptions = <model.ExportOptions>TestInitializer.invalidizeValue(varoptions, field, "ExportOptions", "downloadSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlide", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadSlide", field, varoptions);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let varname = <string>TestInitializer.getValue("downloadSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlide", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("downloadSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlide", "fontsFolder", "string");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "downloadSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlide", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadSlide", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let varname = <string>TestInitializer.getValue("downloadSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlide", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("downloadSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlide", "fontsFolder", "string");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "downloadSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlide", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadSlide", field, varheight);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("downloadSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlide", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("downloadSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlide", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("downloadSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlide", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("downloadSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlide", "fontsFolder", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "downloadSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("downloadSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlide", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("downloadSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlide", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "downloadSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadSlide", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("downloadSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlide", "format", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("downloadSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("downloadSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlide", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "downloadSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlide", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlide(varname, varslideIndex, varformat, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "downloadSlide", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for downloadSlideOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("downloadSlideOnline", "document");
            let varslideIndex = <number>TestInitializer.getValue("downloadSlideOnline", "slideIndex", "number");
            let varformat = <string>TestInitializer.getValue("downloadSlideOnline", "format", "string");
            let varwidth = <number>TestInitializer.getValue("downloadSlideOnline", "width", "number");
            let varheight = <number>TestInitializer.getValue("downloadSlideOnline", "height", "number");
            let varpassword = <string>TestInitializer.getValue("downloadSlideOnline", "password", "string");
            let varstorage = <string>TestInitializer.getValue("downloadSlideOnline", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("downloadSlideOnline", "fontsFolder", "string");
            return TestInitializer.initialize("downloadSlideOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), true, "downloadSlideOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlideOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlideOnline", "fontsFolder", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "downloadSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlideOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "downloadSlideOnline", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlideOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlideOnline", "fontsFolder", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "downloadSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlideOnline", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "downloadSlideOnline", field, varslideIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlideOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlideOnline", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "downloadSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlideOnline", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "downloadSlideOnline", field, varformat);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlideOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlideOnline", "fontsFolder", "string");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "downloadSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlideOnline", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "downloadSlideOnline", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlideOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlideOnline", "fontsFolder", "string");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "downloadSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlideOnline", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "downloadSlideOnline", field, varheight);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlideOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlideOnline", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlideOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "downloadSlideOnline", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlideOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlideOnline", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "downloadSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlideOnline", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "downloadSlideOnline", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("downloadSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("downloadSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSlideOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("downloadSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("downloadSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("downloadSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSlideOnline", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "downloadSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSlideOnline", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSlideOnline(vardocument, varslideIndex, varformat, varwidth, varheight, varpassword, varstorage, varfontsFolder), "downloadSlideOnline", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for downloadSubshape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("downloadSubshape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("downloadSubshape", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("downloadSubshape", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("downloadSubshape", "shapeIndex", "number");
            let varformat = <string>TestInitializer.getValue("downloadSubshape", "format", "string");
            let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadSubshape", "options", "IShapeExportOptions");
            let varscaleX = <number>TestInitializer.getValue("downloadSubshape", "scaleX", "number");
            let varscaleY = <number>TestInitializer.getValue("downloadSubshape", "scaleY", "number");
            let varbounds = <string>TestInitializer.getValue("downloadSubshape", "bounds", "string");
            let varpassword = <string>TestInitializer.getValue("downloadSubshape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("downloadSubshape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("downloadSubshape", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("downloadSubshape", "fontsFolder", "string");
            return TestInitializer.initialize("downloadSubshape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), true, "downloadSubshape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("downloadSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("downloadSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("downloadSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSubshape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSubshape", "fontsFolder", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "downloadSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSubshape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadSubshape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("downloadSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("downloadSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("downloadSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSubshape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSubshape", "fontsFolder", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "downloadSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSubshape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadSubshape", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("downloadSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("downloadSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("downloadSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSubshape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSubshape", "fontsFolder", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "downloadSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSubshape", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadSubshape", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("downloadSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("downloadSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("downloadSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSubshape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSubshape", "fontsFolder", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "downloadSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSubshape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadSubshape", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("downloadSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("downloadSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("downloadSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSubshape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSubshape", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "downloadSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSubshape", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadSubshape", field, varformat);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("downloadSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("downloadSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("downloadSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSubshape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSubshape", "fontsFolder", "string");
        varoptions = <model.IShapeExportOptions>TestInitializer.invalidizeValue(varoptions, field, "IShapeExportOptions", "downloadSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSubshape", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadSubshape", field, varoptions);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let varname = <string>TestInitializer.getValue("downloadSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("downloadSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("downloadSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSubshape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSubshape", "fontsFolder", "string");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "downloadSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSubshape", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadSubshape", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let varname = <string>TestInitializer.getValue("downloadSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("downloadSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("downloadSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSubshape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSubshape", "fontsFolder", "string");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "downloadSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSubshape", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadSubshape", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let varname = <string>TestInitializer.getValue("downloadSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("downloadSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("downloadSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSubshape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSubshape", "fontsFolder", "string");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "downloadSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSubshape", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadSubshape", field, varbounds);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("downloadSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("downloadSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("downloadSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSubshape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSubshape", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "downloadSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSubshape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadSubshape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("downloadSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("downloadSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("downloadSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSubshape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSubshape", "fontsFolder", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "downloadSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSubshape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadSubshape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("downloadSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("downloadSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("downloadSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSubshape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSubshape", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "downloadSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSubshape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadSubshape", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("downloadSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("downloadSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("downloadSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("downloadSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("downloadSubshape", "format", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("downloadSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("downloadSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("downloadSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("downloadSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("downloadSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("downloadSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("downloadSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("downloadSubshape", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "downloadSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("downloadSubshape", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().downloadSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "downloadSubshape", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for getAnimation", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getAnimation", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getAnimation", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("getAnimation", "shapeIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getAnimation", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getAnimation", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getAnimation", "storage", "string");
            return TestInitializer.initialize("getAnimation", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getAnimation(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), false, "getAnimation");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getAnimation", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getAnimation", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getAnimation", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getAnimation", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getAnimation(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getAnimation", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getAnimation", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getAnimation", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getAnimation", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getAnimation", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getAnimation(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getAnimation", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getAnimation", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getAnimation", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getAnimation", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getAnimation", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getAnimation(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getAnimation", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getAnimation", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getAnimation", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getAnimation", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getAnimation", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getAnimation(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getAnimation", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getAnimation", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getAnimation", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getAnimation", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getAnimation", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getAnimation(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getAnimation", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getAnimation", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getAnimation", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getAnimation", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getAnimation", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getAnimation(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getAnimation", field, varstorage);
            });
        });
    });
});

describe("Tests for getApiInfo", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getApiInfo", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getApiInfo(), false, "getApiInfo");
            });
        });
    });
});

describe("Tests for getBackground", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getBackground", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getBackground", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getBackground", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getBackground", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getBackground", "storage", "string");
            return TestInitializer.initialize("getBackground", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getBackground(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getBackground");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getBackground", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getBackground", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getBackground", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "getBackground", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getBackground", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getBackground", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getBackground", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "getBackground", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getBackground", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getBackground", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getBackground", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "getBackground", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getBackground", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getBackground", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getBackground", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "getBackground", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getBackground", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getBackground", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getBackground", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getBackground(varname, varslideIndex, varpassword, varfolder, varstorage), "getBackground", field, varstorage);
            });
        });
    });
});

describe("Tests for getColorScheme", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getColorScheme", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getColorScheme", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getColorScheme", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getColorScheme", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getColorScheme", "storage", "string");
            return TestInitializer.initialize("getColorScheme", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getColorScheme(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getColorScheme");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getColorScheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getColorScheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getColorScheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getColorScheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getColorScheme", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getColorScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getColorScheme", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getColorScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getColorScheme", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getColorScheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getColorScheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getColorScheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getColorScheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getColorScheme", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getColorScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getColorScheme", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getColorScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getColorScheme", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getColorScheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getColorScheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getColorScheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getColorScheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getColorScheme", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getColorScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getColorScheme", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getColorScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getColorScheme", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getColorScheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getColorScheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getColorScheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getColorScheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getColorScheme", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getColorScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getColorScheme", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getColorScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getColorScheme", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getColorScheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getColorScheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getColorScheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getColorScheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getColorScheme", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getColorScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getColorScheme", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getColorScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getColorScheme", field, varstorage);
            });
        });
    });
});

describe("Tests for getDiscUsage", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varstorageName = <string>TestInitializer.getValue("getDiscUsage", "storageName", "string");
            return TestInitializer.initialize("getDiscUsage", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getDiscUsage(varstorageName), false, "getDiscUsage");
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varstorageName = <string>TestInitializer.getValue("getDiscUsage", "storageName", "string");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "getDiscUsage");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getDiscUsage", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDiscUsage(varstorageName), "getDiscUsage", field, varstorageName);
            });
        });
    });
});

describe("Tests for getDocumentProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getDocumentProperties", "name", "string");
            let varpassword = <string>TestInitializer.getValue("getDocumentProperties", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getDocumentProperties", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getDocumentProperties", "storage", "string");
            return TestInitializer.initialize("getDocumentProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getDocumentProperties(varname, varpassword, varfolder, varstorage), false, "getDocumentProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getDocumentProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getDocumentProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getDocumentProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getDocumentProperties", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getDocumentProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperties(varname, varpassword, varfolder, varstorage), "getDocumentProperties", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getDocumentProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getDocumentProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getDocumentProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getDocumentProperties", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getDocumentProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperties(varname, varpassword, varfolder, varstorage), "getDocumentProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getDocumentProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getDocumentProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getDocumentProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getDocumentProperties", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getDocumentProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperties(varname, varpassword, varfolder, varstorage), "getDocumentProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getDocumentProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getDocumentProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getDocumentProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getDocumentProperties", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getDocumentProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperties(varname, varpassword, varfolder, varstorage), "getDocumentProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for getDocumentProperty", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getDocumentProperty", "name", "string");
            let varpropertyName = <string>TestInitializer.getValue("getDocumentProperty", "propertyName", "string");
            let varpassword = <string>TestInitializer.getValue("getDocumentProperty", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getDocumentProperty", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getDocumentProperty", "storage", "string");
            return TestInitializer.initialize("getDocumentProperty", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), false, "getDocumentProperty");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("getDocumentProperty", "propertyName", "string");
        let varpassword = <string>TestInitializer.getValue("getDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getDocumentProperty", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getDocumentProperty", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "getDocumentProperty", field, varname);
            });
        });
    });

    it("invalid propertyName test", () => {
        const field = "propertyName";
        let varname = <string>TestInitializer.getValue("getDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("getDocumentProperty", "propertyName", "string");
        let varpassword = <string>TestInitializer.getValue("getDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getDocumentProperty", "storage", "string");
        varpropertyName = <string>TestInitializer.invalidizeValue(varpropertyName, field, "string", "getDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getDocumentProperty", field, varpropertyName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "getDocumentProperty", field, varpropertyName);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("getDocumentProperty", "propertyName", "string");
        let varpassword = <string>TestInitializer.getValue("getDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getDocumentProperty", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getDocumentProperty", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "getDocumentProperty", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("getDocumentProperty", "propertyName", "string");
        let varpassword = <string>TestInitializer.getValue("getDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getDocumentProperty", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getDocumentProperty", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "getDocumentProperty", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("getDocumentProperty", "propertyName", "string");
        let varpassword = <string>TestInitializer.getValue("getDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getDocumentProperty", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getDocumentProperty", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getDocumentProperty(varname, varpropertyName, varpassword, varfolder, varstorage), "getDocumentProperty", field, varstorage);
            });
        });
    });
});

describe("Tests for getFileVersions", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("getFileVersions", "path", "string");
            let varstorageName = <string>TestInitializer.getValue("getFileVersions", "storageName", "string");
            return TestInitializer.initialize("getFileVersions", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getFileVersions(varpath, varstorageName), false, "getFileVersions");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("getFileVersions", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("getFileVersions", "storageName", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getFileVersions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFileVersions", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFileVersions(varpath, varstorageName), "getFileVersions", field, varpath);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("getFileVersions", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("getFileVersions", "storageName", "string");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "getFileVersions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFileVersions", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFileVersions(varpath, varstorageName), "getFileVersions", field, varstorageName);
            });
        });
    });
});

describe("Tests for getFilesList", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("getFilesList", "path", "string");
            let varstorageName = <string>TestInitializer.getValue("getFilesList", "storageName", "string");
            return TestInitializer.initialize("getFilesList", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getFilesList(varpath, varstorageName), false, "getFilesList");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("getFilesList", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("getFilesList", "storageName", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getFilesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFilesList", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFilesList(varpath, varstorageName), "getFilesList", field, varpath);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("getFilesList", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("getFilesList", "storageName", "string");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "getFilesList");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFilesList", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFilesList(varpath, varstorageName), "getFilesList", field, varstorageName);
            });
        });
    });
});

describe("Tests for getFontScheme", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getFontScheme", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getFontScheme", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getFontScheme", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getFontScheme", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getFontScheme", "storage", "string");
            return TestInitializer.initialize("getFontScheme", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getFontScheme(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getFontScheme");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getFontScheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getFontScheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getFontScheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getFontScheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getFontScheme", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getFontScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFontScheme", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFontScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getFontScheme", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getFontScheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getFontScheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getFontScheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getFontScheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getFontScheme", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getFontScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFontScheme", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFontScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getFontScheme", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getFontScheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getFontScheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getFontScheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getFontScheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getFontScheme", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getFontScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFontScheme", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFontScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getFontScheme", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getFontScheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getFontScheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getFontScheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getFontScheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getFontScheme", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getFontScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFontScheme", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFontScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getFontScheme", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getFontScheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getFontScheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getFontScheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getFontScheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getFontScheme", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getFontScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFontScheme", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFontScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getFontScheme", field, varstorage);
            });
        });
    });
});

describe("Tests for getFormatScheme", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getFormatScheme", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getFormatScheme", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getFormatScheme", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getFormatScheme", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getFormatScheme", "storage", "string");
            return TestInitializer.initialize("getFormatScheme", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getFormatScheme(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getFormatScheme");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getFormatScheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getFormatScheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getFormatScheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getFormatScheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getFormatScheme", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getFormatScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFormatScheme", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFormatScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getFormatScheme", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getFormatScheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getFormatScheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getFormatScheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getFormatScheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getFormatScheme", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getFormatScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFormatScheme", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFormatScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getFormatScheme", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getFormatScheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getFormatScheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getFormatScheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getFormatScheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getFormatScheme", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getFormatScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFormatScheme", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFormatScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getFormatScheme", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getFormatScheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getFormatScheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getFormatScheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getFormatScheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getFormatScheme", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getFormatScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFormatScheme", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFormatScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getFormatScheme", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getFormatScheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getFormatScheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getFormatScheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getFormatScheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getFormatScheme", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getFormatScheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getFormatScheme", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getFormatScheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getFormatScheme", field, varstorage);
            });
        });
    });
});

describe("Tests for getLayoutSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getLayoutSlide", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getLayoutSlide", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getLayoutSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getLayoutSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getLayoutSlide", "storage", "string");
            return TestInitializer.initialize("getLayoutSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getLayoutSlide(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getLayoutSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getLayoutSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getLayoutSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlide", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getLayoutSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getLayoutSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getLayoutSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlide", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getLayoutSlide", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getLayoutSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getLayoutSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlide", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getLayoutSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getLayoutSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getLayoutSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlide", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getLayoutSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getLayoutSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getLayoutSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlide", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getLayoutSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for getLayoutSlides", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getLayoutSlides", "name", "string");
            let varpassword = <string>TestInitializer.getValue("getLayoutSlides", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getLayoutSlides", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getLayoutSlides", "storage", "string");
            return TestInitializer.initialize("getLayoutSlides", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getLayoutSlides(varname, varpassword, varfolder, varstorage), false, "getLayoutSlides");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getLayoutSlides", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlides", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getLayoutSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlides", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlides(varname, varpassword, varfolder, varstorage), "getLayoutSlides", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getLayoutSlides", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlides", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getLayoutSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlides", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlides(varname, varpassword, varfolder, varstorage), "getLayoutSlides", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getLayoutSlides", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlides", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getLayoutSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlides", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlides(varname, varpassword, varfolder, varstorage), "getLayoutSlides", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getLayoutSlides", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getLayoutSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getLayoutSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getLayoutSlides", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getLayoutSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getLayoutSlides", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getLayoutSlides(varname, varpassword, varfolder, varstorage), "getLayoutSlides", field, varstorage);
            });
        });
    });
});

describe("Tests for getMasterSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getMasterSlide", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getMasterSlide", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getMasterSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getMasterSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getMasterSlide", "storage", "string");
            return TestInitializer.initialize("getMasterSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getMasterSlide(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getMasterSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getMasterSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getMasterSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getMasterSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getMasterSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getMasterSlide", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getMasterSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getMasterSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getMasterSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getMasterSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getMasterSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getMasterSlide", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getMasterSlide", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getMasterSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getMasterSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getMasterSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getMasterSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getMasterSlide", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getMasterSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getMasterSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getMasterSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getMasterSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getMasterSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getMasterSlide", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getMasterSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getMasterSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getMasterSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getMasterSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getMasterSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getMasterSlide", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getMasterSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getMasterSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for getMasterSlides", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getMasterSlides", "name", "string");
            let varpassword = <string>TestInitializer.getValue("getMasterSlides", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getMasterSlides", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getMasterSlides", "storage", "string");
            return TestInitializer.initialize("getMasterSlides", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getMasterSlides(varname, varpassword, varfolder, varstorage), false, "getMasterSlides");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getMasterSlides", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getMasterSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getMasterSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getMasterSlides", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getMasterSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlides", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlides(varname, varpassword, varfolder, varstorage), "getMasterSlides", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getMasterSlides", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getMasterSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getMasterSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getMasterSlides", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getMasterSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlides", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlides(varname, varpassword, varfolder, varstorage), "getMasterSlides", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getMasterSlides", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getMasterSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getMasterSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getMasterSlides", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getMasterSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlides", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlides(varname, varpassword, varfolder, varstorage), "getMasterSlides", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getMasterSlides", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getMasterSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getMasterSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getMasterSlides", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getMasterSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getMasterSlides", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getMasterSlides(varname, varpassword, varfolder, varstorage), "getMasterSlides", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlide", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlide", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getNotesSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getNotesSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getNotesSlide", "storage", "string");
            return TestInitializer.initialize("getNotesSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getNotesSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlide", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlide", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlide", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlide", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlide", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlide", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlideHeaderFooter", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlideHeaderFooter", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "storage", "string");
            return TestInitializer.initialize("getNotesSlideHeaderFooter", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getNotesSlideHeaderFooter");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideHeaderFooter", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideHeaderFooter", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideHeaderFooter", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideHeaderFooter", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideHeaderFooter", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideHeaderFooter", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideHeaderFooter", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideHeaderFooter", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideHeaderFooter", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideHeaderFooter", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideHeaderFooter", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideHeaderFooter", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideHeaderFooter", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideHeaderFooter", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideHeaderFooter", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideHeaderFooter", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlideOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("getNotesSlideOnline", "document");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlideOnline", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getNotesSlideOnline", "password", "string");
            return TestInitializer.initialize("getNotesSlideOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlideOnline(vardocument, varslideIndex, varpassword), false, "getNotesSlideOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("getNotesSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideOnline", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "getNotesSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideOnline(vardocument, varslideIndex, varpassword), "getNotesSlideOnline", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("getNotesSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideOnline", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideOnline", "password", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideOnline", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideOnline(vardocument, varslideIndex, varpassword), "getNotesSlideOnline", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("getNotesSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideOnline", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideOnline(vardocument, varslideIndex, varpassword), "getNotesSlideOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for getNotesSlideParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlideParagraph", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "paragraphIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getNotesSlideParagraph", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getNotesSlideParagraph", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getNotesSlideParagraph", "storage", "string");
            return TestInitializer.initialize("getNotesSlideParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "getNotesSlideParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideParagraph", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideParagraph", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideParagraph", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideParagraph", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideParagraph", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideParagraph", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlideParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideParagraph", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlideParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlideParagraphs", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlideParagraphs", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlideParagraphs", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideParagraphs", "shapeIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getNotesSlideParagraphs", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getNotesSlideParagraphs", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getNotesSlideParagraphs", "storage", "string");
            return TestInitializer.initialize("getNotesSlideParagraphs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), false, "getNotesSlideParagraphs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlideParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideParagraphs", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideParagraphs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideParagraphs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideParagraphs", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideParagraphs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideParagraphs", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideParagraphs", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideParagraphs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideParagraphs", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlideParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideParagraphs", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideParagraphs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideParagraphs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlideParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideParagraphs", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideParagraphs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideParagraphs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlideParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideParagraphs", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlideParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideParagraphs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideParagraphs", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlidePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlidePortion", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "paragraphIndex", "number");
            let varportionIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "portionIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getNotesSlidePortion", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getNotesSlidePortion", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getNotesSlidePortion", "storage", "string");
            return TestInitializer.initialize("getNotesSlidePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), false, "getNotesSlidePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlidePortion", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlidePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlidePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlidePortion", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlidePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlidePortion", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlidePortion", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlidePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlidePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlidePortion", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlidePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlidePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlidePortion", "storage", "string");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "getNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlidePortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlidePortion", field, varportionIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlidePortion", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlidePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlidePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlidePortion", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlidePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlidePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getNotesSlidePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlidePortion", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlidePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getNotesSlidePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlidePortions", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlidePortions", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "paragraphIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getNotesSlidePortions", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getNotesSlidePortions", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getNotesSlidePortions", "storage", "string");
            return TestInitializer.initialize("getNotesSlidePortions", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "getNotesSlidePortions");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlidePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlidePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlidePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlidePortions", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlidePortions", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlidePortions", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlidePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlidePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlidePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlidePortions", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlidePortions", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlidePortions", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlidePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlidePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlidePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlidePortions", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlidePortions", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlidePortions", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlidePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlidePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlidePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlidePortions", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlidePortions", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlidePortions", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlidePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlidePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlidePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlidePortions", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlidePortions", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlidePortions", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlidePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlidePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlidePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlidePortions", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlidePortions", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlidePortions", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlidePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getNotesSlidePortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlidePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlidePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlidePortions", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlidePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlidePortions", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlidePortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getNotesSlidePortions", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlideShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlideShape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShape", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShape", "shapeIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getNotesSlideShape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getNotesSlideShape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getNotesSlideShape", "storage", "string");
            return TestInitializer.initialize("getNotesSlideShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), false, "getNotesSlideShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShape", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShape", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShape", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShape", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShape", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShape", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getNotesSlideShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShape", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getNotesSlideShape", field, varstorage);
            });
        });
    });
});

describe("Tests for getNotesSlideShapes", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getNotesSlideShapes", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapes", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getNotesSlideShapes", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getNotesSlideShapes", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getNotesSlideShapes", "storage", "string");
            return TestInitializer.initialize("getNotesSlideShapes", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getNotesSlideShapes(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getNotesSlideShapes");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapes", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapes", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapes", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideShapes", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapes", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapes", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapes", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideShapes", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapes", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapes", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapes", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideShapes", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapes", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapes", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapes", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideShapes", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getNotesSlideShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getNotesSlideShapes", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getNotesSlideShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getNotesSlideShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getNotesSlideShapes", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getNotesSlideShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getNotesSlideShapes", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getNotesSlideShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getNotesSlideShapes", field, varstorage);
            });
        });
    });
});

describe("Tests for getParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getParagraph", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getParagraph", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("getParagraph", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("getParagraph", "paragraphIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getParagraph", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getParagraph", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getParagraph", "storage", "string");
            return TestInitializer.initialize("getParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "getParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getParagraph", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getParagraph", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getParagraph", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getParagraph", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getParagraph", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getParagraph", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getParagraph", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for getParagraphs", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getParagraphs", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getParagraphs", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("getParagraphs", "shapeIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getParagraphs", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getParagraphs", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getParagraphs", "storage", "string");
            return TestInitializer.initialize("getParagraphs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), false, "getParagraphs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getParagraphs", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getParagraphs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getParagraphs", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getParagraphs", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getParagraphs", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getParagraphs", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getParagraphs", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getParagraphs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getParagraphs", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getParagraphs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getParagraphs", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getParagraphs", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getParagraphs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getParagraphs(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getParagraphs", field, varstorage);
            });
        });
    });
});

describe("Tests for getPlaceholder", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getPlaceholder", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getPlaceholder", "slideIndex", "number");
            let varplaceholderIndex = <number>TestInitializer.getValue("getPlaceholder", "placeholderIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getPlaceholder", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getPlaceholder", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getPlaceholder", "storage", "string");
            return TestInitializer.initialize("getPlaceholder", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getPlaceholder(varname, varslideIndex, varplaceholderIndex, varpassword, varfolder, varstorage), false, "getPlaceholder");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getPlaceholder", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPlaceholder", "slideIndex", "number");
        let varplaceholderIndex = <number>TestInitializer.getValue("getPlaceholder", "placeholderIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPlaceholder", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPlaceholder", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPlaceholder", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getPlaceholder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPlaceholder", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholder(varname, varslideIndex, varplaceholderIndex, varpassword, varfolder, varstorage), "getPlaceholder", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getPlaceholder", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPlaceholder", "slideIndex", "number");
        let varplaceholderIndex = <number>TestInitializer.getValue("getPlaceholder", "placeholderIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPlaceholder", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPlaceholder", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPlaceholder", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getPlaceholder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPlaceholder", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholder(varname, varslideIndex, varplaceholderIndex, varpassword, varfolder, varstorage), "getPlaceholder", field, varslideIndex);
            });
        });
    });

    it("invalid placeholderIndex test", () => {
        const field = "placeholderIndex";
        let varname = <string>TestInitializer.getValue("getPlaceholder", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPlaceholder", "slideIndex", "number");
        let varplaceholderIndex = <number>TestInitializer.getValue("getPlaceholder", "placeholderIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPlaceholder", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPlaceholder", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPlaceholder", "storage", "string");
        varplaceholderIndex = <number>TestInitializer.invalidizeValue(varplaceholderIndex, field, "number", "getPlaceholder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPlaceholder", field, varplaceholderIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholder(varname, varslideIndex, varplaceholderIndex, varpassword, varfolder, varstorage), "getPlaceholder", field, varplaceholderIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getPlaceholder", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPlaceholder", "slideIndex", "number");
        let varplaceholderIndex = <number>TestInitializer.getValue("getPlaceholder", "placeholderIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPlaceholder", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPlaceholder", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPlaceholder", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getPlaceholder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPlaceholder", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholder(varname, varslideIndex, varplaceholderIndex, varpassword, varfolder, varstorage), "getPlaceholder", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getPlaceholder", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPlaceholder", "slideIndex", "number");
        let varplaceholderIndex = <number>TestInitializer.getValue("getPlaceholder", "placeholderIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPlaceholder", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPlaceholder", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPlaceholder", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getPlaceholder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPlaceholder", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholder(varname, varslideIndex, varplaceholderIndex, varpassword, varfolder, varstorage), "getPlaceholder", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getPlaceholder", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPlaceholder", "slideIndex", "number");
        let varplaceholderIndex = <number>TestInitializer.getValue("getPlaceholder", "placeholderIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPlaceholder", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPlaceholder", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPlaceholder", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getPlaceholder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPlaceholder", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholder(varname, varslideIndex, varplaceholderIndex, varpassword, varfolder, varstorage), "getPlaceholder", field, varstorage);
            });
        });
    });
});

describe("Tests for getPlaceholders", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getPlaceholders", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getPlaceholders", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getPlaceholders", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getPlaceholders", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getPlaceholders", "storage", "string");
            return TestInitializer.initialize("getPlaceholders", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getPlaceholders(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getPlaceholders");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getPlaceholders", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPlaceholders", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPlaceholders", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPlaceholders", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPlaceholders", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getPlaceholders");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPlaceholders", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholders(varname, varslideIndex, varpassword, varfolder, varstorage), "getPlaceholders", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getPlaceholders", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPlaceholders", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPlaceholders", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPlaceholders", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPlaceholders", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getPlaceholders");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPlaceholders", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholders(varname, varslideIndex, varpassword, varfolder, varstorage), "getPlaceholders", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getPlaceholders", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPlaceholders", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPlaceholders", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPlaceholders", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPlaceholders", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getPlaceholders");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPlaceholders", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholders(varname, varslideIndex, varpassword, varfolder, varstorage), "getPlaceholders", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getPlaceholders", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPlaceholders", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPlaceholders", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPlaceholders", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPlaceholders", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getPlaceholders");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPlaceholders", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholders(varname, varslideIndex, varpassword, varfolder, varstorage), "getPlaceholders", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getPlaceholders", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPlaceholders", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPlaceholders", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPlaceholders", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPlaceholders", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getPlaceholders");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPlaceholders", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPlaceholders(varname, varslideIndex, varpassword, varfolder, varstorage), "getPlaceholders", field, varstorage);
            });
        });
    });
});

describe("Tests for getPortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getPortion", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getPortion", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("getPortion", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("getPortion", "paragraphIndex", "number");
            let varportionIndex = <number>TestInitializer.getValue("getPortion", "portionIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getPortion", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getPortion", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getPortion", "storage", "string");
            return TestInitializer.initialize("getPortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), false, "getPortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getPortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getPortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPortion", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getPortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getPortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getPortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPortion", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getPortion", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getPortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getPortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPortion", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getPortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getPortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getPortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPortion", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getPortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("getPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getPortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getPortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPortion", "storage", "string");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "getPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getPortion", field, varportionIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getPortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getPortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPortion", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getPortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getPortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getPortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPortion", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getPortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getPortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getPortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getPortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getPortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPortion", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getPortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getPortion", field, varstorage);
            });
        });
    });
});

describe("Tests for getPortions", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getPortions", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getPortions", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("getPortions", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("getPortions", "paragraphIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getPortions", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getPortions", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getPortions", "storage", "string");
            return TestInitializer.initialize("getPortions", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "getPortions");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getPortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getPortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getPortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPortions", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPortions", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getPortions", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getPortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getPortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getPortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPortions", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPortions", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getPortions", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getPortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getPortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getPortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPortions", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPortions", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getPortions", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getPortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getPortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getPortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPortions", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPortions", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getPortions", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getPortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getPortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getPortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPortions", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPortions", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getPortions", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getPortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getPortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getPortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPortions", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPortions", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getPortions", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getPortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getPortions", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getPortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getPortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getPortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPortions", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getPortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPortions", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPortions(varname, varslideIndex, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getPortions", field, varstorage);
            });
        });
    });
});

describe("Tests for getPresentation", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getPresentation", "name", "string");
            let varpassword = <string>TestInitializer.getValue("getPresentation", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getPresentation", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getPresentation", "storage", "string");
            return TestInitializer.initialize("getPresentation", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getPresentation(varname, varpassword, varfolder, varstorage), false, "getPresentation");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getPresentation", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPresentation", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPresentation", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentation(varname, varpassword, varfolder, varstorage), "getPresentation", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getPresentation", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPresentation", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPresentation", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentation(varname, varpassword, varfolder, varstorage), "getPresentation", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getPresentation", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPresentation", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPresentation", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentation(varname, varpassword, varfolder, varstorage), "getPresentation", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getPresentation", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getPresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPresentation", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getPresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPresentation", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentation(varname, varpassword, varfolder, varstorage), "getPresentation", field, varstorage);
            });
        });
    });
});

describe("Tests for getPresentationImages", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getPresentationImages", "name", "string");
            let varpassword = <string>TestInitializer.getValue("getPresentationImages", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getPresentationImages", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getPresentationImages", "storage", "string");
            return TestInitializer.initialize("getPresentationImages", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getPresentationImages(varname, varpassword, varfolder, varstorage), false, "getPresentationImages");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getPresentationImages", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getPresentationImages", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPresentationImages", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPresentationImages", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getPresentationImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPresentationImages", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationImages(varname, varpassword, varfolder, varstorage), "getPresentationImages", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getPresentationImages", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getPresentationImages", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPresentationImages", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPresentationImages", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getPresentationImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPresentationImages", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationImages(varname, varpassword, varfolder, varstorage), "getPresentationImages", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getPresentationImages", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getPresentationImages", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPresentationImages", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPresentationImages", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getPresentationImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPresentationImages", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationImages(varname, varpassword, varfolder, varstorage), "getPresentationImages", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getPresentationImages", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getPresentationImages", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPresentationImages", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPresentationImages", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getPresentationImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPresentationImages", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationImages(varname, varpassword, varfolder, varstorage), "getPresentationImages", field, varstorage);
            });
        });
    });
});

describe("Tests for getPresentationTextItems", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getPresentationTextItems", "name", "string");
            let varwithEmpty = <boolean>TestInitializer.getValue("getPresentationTextItems", "withEmpty", "boolean");
            let varpassword = <string>TestInitializer.getValue("getPresentationTextItems", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getPresentationTextItems", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getPresentationTextItems", "storage", "string");
            return TestInitializer.initialize("getPresentationTextItems", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getPresentationTextItems(varname, varwithEmpty, varpassword, varfolder, varstorage), false, "getPresentationTextItems");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getPresentationTextItems", "name", "string");
        let varwithEmpty = <boolean>TestInitializer.getValue("getPresentationTextItems", "withEmpty", "boolean");
        let varpassword = <string>TestInitializer.getValue("getPresentationTextItems", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPresentationTextItems", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPresentationTextItems", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getPresentationTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPresentationTextItems", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationTextItems(varname, varwithEmpty, varpassword, varfolder, varstorage), "getPresentationTextItems", field, varname);
            });
        });
    });

    it("invalid withEmpty test", () => {
        const field = "withEmpty";
        let varname = <string>TestInitializer.getValue("getPresentationTextItems", "name", "string");
        let varwithEmpty = <boolean>TestInitializer.getValue("getPresentationTextItems", "withEmpty", "boolean");
        let varpassword = <string>TestInitializer.getValue("getPresentationTextItems", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPresentationTextItems", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPresentationTextItems", "storage", "string");
        varwithEmpty = <boolean>TestInitializer.invalidizeValue(varwithEmpty, field, "boolean", "getPresentationTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPresentationTextItems", field, varwithEmpty).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationTextItems(varname, varwithEmpty, varpassword, varfolder, varstorage), "getPresentationTextItems", field, varwithEmpty);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getPresentationTextItems", "name", "string");
        let varwithEmpty = <boolean>TestInitializer.getValue("getPresentationTextItems", "withEmpty", "boolean");
        let varpassword = <string>TestInitializer.getValue("getPresentationTextItems", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPresentationTextItems", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPresentationTextItems", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getPresentationTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPresentationTextItems", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationTextItems(varname, varwithEmpty, varpassword, varfolder, varstorage), "getPresentationTextItems", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getPresentationTextItems", "name", "string");
        let varwithEmpty = <boolean>TestInitializer.getValue("getPresentationTextItems", "withEmpty", "boolean");
        let varpassword = <string>TestInitializer.getValue("getPresentationTextItems", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPresentationTextItems", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPresentationTextItems", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getPresentationTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPresentationTextItems", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationTextItems(varname, varwithEmpty, varpassword, varfolder, varstorage), "getPresentationTextItems", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getPresentationTextItems", "name", "string");
        let varwithEmpty = <boolean>TestInitializer.getValue("getPresentationTextItems", "withEmpty", "boolean");
        let varpassword = <string>TestInitializer.getValue("getPresentationTextItems", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getPresentationTextItems", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getPresentationTextItems", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getPresentationTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getPresentationTextItems", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getPresentationTextItems(varname, varwithEmpty, varpassword, varfolder, varstorage), "getPresentationTextItems", field, varstorage);
            });
        });
    });
});

describe("Tests for getProtectionProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getProtectionProperties", "name", "string");
            let varpassword = <string>TestInitializer.getValue("getProtectionProperties", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getProtectionProperties", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getProtectionProperties", "storage", "string");
            return TestInitializer.initialize("getProtectionProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getProtectionProperties(varname, varpassword, varfolder, varstorage), false, "getProtectionProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getProtectionProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getProtectionProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getProtectionProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getProtectionProperties", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getProtectionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getProtectionProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getProtectionProperties(varname, varpassword, varfolder, varstorage), "getProtectionProperties", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getProtectionProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getProtectionProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getProtectionProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getProtectionProperties", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getProtectionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getProtectionProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getProtectionProperties(varname, varpassword, varfolder, varstorage), "getProtectionProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getProtectionProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getProtectionProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getProtectionProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getProtectionProperties", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getProtectionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getProtectionProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getProtectionProperties(varname, varpassword, varfolder, varstorage), "getProtectionProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getProtectionProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getProtectionProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getProtectionProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getProtectionProperties", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getProtectionProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getProtectionProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getProtectionProperties(varname, varpassword, varfolder, varstorage), "getProtectionProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for getSections", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSections", "name", "string");
            let varpassword = <string>TestInitializer.getValue("getSections", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getSections", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getSections", "storage", "string");
            return TestInitializer.initialize("getSections", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSections(varname, varpassword, varfolder, varstorage), false, "getSections");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSections", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getSections", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSections", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSections", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSections", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSections(varname, varpassword, varfolder, varstorage), "getSections", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSections", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getSections", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSections", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSections", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSections", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSections(varname, varpassword, varfolder, varstorage), "getSections", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSections", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getSections", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSections", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSections", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSections", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSections(varname, varpassword, varfolder, varstorage), "getSections", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSections", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getSections", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSections", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSections", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSections", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSections(varname, varpassword, varfolder, varstorage), "getSections", field, varstorage);
            });
        });
    });
});

describe("Tests for getShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getShape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getShape", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("getShape", "shapeIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getShape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getShape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getShape", "storage", "string");
            return TestInitializer.initialize("getShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), false, "getShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getShape", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getShape", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getShape", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getShape", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getShape", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getShape", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("getShape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getShape", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShape(varname, varslideIndex, varshapeIndex, varpassword, varfolder, varstorage), "getShape", field, varstorage);
            });
        });
    });
});

describe("Tests for getShapes", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getShapes", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getShapes", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getShapes", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getShapes", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getShapes", "storage", "string");
            return TestInitializer.initialize("getShapes", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getShapes(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getShapes");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getShapes", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getShapes", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getShapes", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getShapes", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getShapes", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getShapes", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getShapes", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getShapes", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getShapes", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getShapes", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getShapes", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getShapes", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getShapes", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getShapes", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getShapes", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getShapes", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getShapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getShapes", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getShapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getShapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getShapes", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getShapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getShapes", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getShapes(varname, varslideIndex, varpassword, varfolder, varstorage), "getShapes", field, varstorage);
            });
        });
    });
});

describe("Tests for getSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlide", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getSlide", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getSlide", "storage", "string");
            return TestInitializer.initialize("getSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSlide(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlide", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlide", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlide", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlide", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlide", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlide", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlide", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlide(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for getSlideComments", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlideComments", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getSlideComments", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getSlideComments", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getSlideComments", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getSlideComments", "storage", "string");
            return TestInitializer.initialize("getSlideComments", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSlideComments(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getSlideComments");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlideComments", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideComments", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlideComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideComments", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideComments", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideComments(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideComments", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlideComments", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideComments", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlideComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideComments", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideComments", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideComments(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideComments", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlideComments", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideComments", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlideComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideComments", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideComments", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideComments(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideComments", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlideComments", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideComments", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlideComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideComments", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideComments", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideComments(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideComments", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlideComments", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideComments", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlideComments", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideComments", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideComments", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlideComments");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideComments", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideComments(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideComments", field, varstorage);
            });
        });
    });
});

describe("Tests for getSlideHeaderFooter", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlideHeaderFooter", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getSlideHeaderFooter", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getSlideHeaderFooter", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getSlideHeaderFooter", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getSlideHeaderFooter", "storage", "string");
            return TestInitializer.initialize("getSlideHeaderFooter", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getSlideHeaderFooter");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideHeaderFooter", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideHeaderFooter", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideHeaderFooter", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideHeaderFooter", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideHeaderFooter", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideHeaderFooter", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideHeaderFooter", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideHeaderFooter", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideHeaderFooter", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideHeaderFooter", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideHeaderFooter", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideHeaderFooter", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideHeaderFooter", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideHeaderFooter", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideHeaderFooter", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideHeaderFooter", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideHeaderFooter", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideHeaderFooter", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideHeaderFooter", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideHeaderFooter(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideHeaderFooter", field, varstorage);
            });
        });
    });
});

describe("Tests for getSlideImages", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlideImages", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getSlideImages", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getSlideImages", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getSlideImages", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getSlideImages", "storage", "string");
            return TestInitializer.initialize("getSlideImages", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSlideImages(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getSlideImages");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlideImages", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideImages", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlideImages", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideImages", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideImages", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlideImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideImages", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideImages(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideImages", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlideImages", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideImages", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlideImages", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideImages", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideImages", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlideImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideImages", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideImages(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideImages", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlideImages", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideImages", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlideImages", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideImages", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideImages", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlideImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideImages", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideImages(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideImages", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlideImages", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideImages", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlideImages", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideImages", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideImages", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlideImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideImages", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideImages(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideImages", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlideImages", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideImages", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSlideImages", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideImages", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideImages", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlideImages");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideImages", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideImages(varname, varslideIndex, varpassword, varfolder, varstorage), "getSlideImages", field, varstorage);
            });
        });
    });
});

describe("Tests for getSlideProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlideProperties", "name", "string");
            let varpassword = <string>TestInitializer.getValue("getSlideProperties", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getSlideProperties", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getSlideProperties", "storage", "string");
            return TestInitializer.initialize("getSlideProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSlideProperties(varname, varpassword, varfolder, varstorage), false, "getSlideProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlideProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getSlideProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideProperties", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideProperties(varname, varpassword, varfolder, varstorage), "getSlideProperties", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlideProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getSlideProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideProperties", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideProperties(varname, varpassword, varfolder, varstorage), "getSlideProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlideProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getSlideProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideProperties", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideProperties(varname, varpassword, varfolder, varstorage), "getSlideProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlideProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getSlideProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideProperties", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideProperties(varname, varpassword, varfolder, varstorage), "getSlideProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for getSlideTextItems", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlideTextItems", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getSlideTextItems", "slideIndex", "number");
            let varwithEmpty = <boolean>TestInitializer.getValue("getSlideTextItems", "withEmpty", "boolean");
            let varpassword = <string>TestInitializer.getValue("getSlideTextItems", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getSlideTextItems", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getSlideTextItems", "storage", "string");
            return TestInitializer.initialize("getSlideTextItems", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSlideTextItems(varname, varslideIndex, varwithEmpty, varpassword, varfolder, varstorage), false, "getSlideTextItems");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlideTextItems", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideTextItems", "slideIndex", "number");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlideTextItems", "withEmpty", "boolean");
        let varpassword = <string>TestInitializer.getValue("getSlideTextItems", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideTextItems", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideTextItems", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlideTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideTextItems", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideTextItems(varname, varslideIndex, varwithEmpty, varpassword, varfolder, varstorage), "getSlideTextItems", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSlideTextItems", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideTextItems", "slideIndex", "number");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlideTextItems", "withEmpty", "boolean");
        let varpassword = <string>TestInitializer.getValue("getSlideTextItems", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideTextItems", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideTextItems", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSlideTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideTextItems", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideTextItems(varname, varslideIndex, varwithEmpty, varpassword, varfolder, varstorage), "getSlideTextItems", field, varslideIndex);
            });
        });
    });

    it("invalid withEmpty test", () => {
        const field = "withEmpty";
        let varname = <string>TestInitializer.getValue("getSlideTextItems", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideTextItems", "slideIndex", "number");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlideTextItems", "withEmpty", "boolean");
        let varpassword = <string>TestInitializer.getValue("getSlideTextItems", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideTextItems", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideTextItems", "storage", "string");
        varwithEmpty = <boolean>TestInitializer.invalidizeValue(varwithEmpty, field, "boolean", "getSlideTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideTextItems", field, varwithEmpty).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideTextItems(varname, varslideIndex, varwithEmpty, varpassword, varfolder, varstorage), "getSlideTextItems", field, varwithEmpty);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlideTextItems", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideTextItems", "slideIndex", "number");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlideTextItems", "withEmpty", "boolean");
        let varpassword = <string>TestInitializer.getValue("getSlideTextItems", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideTextItems", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideTextItems", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlideTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideTextItems", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideTextItems(varname, varslideIndex, varwithEmpty, varpassword, varfolder, varstorage), "getSlideTextItems", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlideTextItems", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideTextItems", "slideIndex", "number");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlideTextItems", "withEmpty", "boolean");
        let varpassword = <string>TestInitializer.getValue("getSlideTextItems", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideTextItems", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideTextItems", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlideTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideTextItems", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideTextItems(varname, varslideIndex, varwithEmpty, varpassword, varfolder, varstorage), "getSlideTextItems", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlideTextItems", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSlideTextItems", "slideIndex", "number");
        let varwithEmpty = <boolean>TestInitializer.getValue("getSlideTextItems", "withEmpty", "boolean");
        let varpassword = <string>TestInitializer.getValue("getSlideTextItems", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlideTextItems", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlideTextItems", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlideTextItems");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlideTextItems", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlideTextItems(varname, varslideIndex, varwithEmpty, varpassword, varfolder, varstorage), "getSlideTextItems", field, varstorage);
            });
        });
    });
});

describe("Tests for getSlides", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSlides", "name", "string");
            let varpassword = <string>TestInitializer.getValue("getSlides", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getSlides", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getSlides", "storage", "string");
            return TestInitializer.initialize("getSlides", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSlides(varname, varpassword, varfolder, varstorage), false, "getSlides");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSlides", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlides", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlides", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlides(varname, varpassword, varfolder, varstorage), "getSlides", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSlides", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlides", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlides", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlides(varname, varpassword, varfolder, varstorage), "getSlides", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSlides", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlides", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlides", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlides(varname, varpassword, varfolder, varstorage), "getSlides", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSlides", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSlides", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSlides", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSlides(varname, varpassword, varfolder, varstorage), "getSlides", field, varstorage);
            });
        });
    });
});

describe("Tests for getSubshape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSubshape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getSubshape", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("getSubshape", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("getSubshape", "shapeIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getSubshape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getSubshape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getSubshape", "storage", "string");
            return TestInitializer.initialize("getSubshape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), false, "getSubshape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshape", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSubshape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshape", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSubshape", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("getSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshape", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshape", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSubshape", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshape", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSubshape", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshape", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSubshape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshape", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSubshape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshape", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshape", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshape(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSubshape", field, varstorage);
            });
        });
    });
});

describe("Tests for getSubshapeParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSubshapeParagraph", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("getSubshapeParagraph", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "paragraphIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getSubshapeParagraph", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getSubshapeParagraph", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getSubshapeParagraph", "storage", "string");
            return TestInitializer.initialize("getSubshapeParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "getSubshapeParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraph", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraph", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraph", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraph", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraph", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraph", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraph", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraph", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraph", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapeParagraph", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraph", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapeParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for getSubshapeParagraphs", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSubshapeParagraphs", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("getSubshapeParagraphs", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "shapeIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphs", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphs", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphs", "storage", "string");
            return TestInitializer.initialize("getSubshapeParagraphs", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), false, "getSubshapeParagraphs");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphs", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphs", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphs", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphs", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphs", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphs", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphs", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphs", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphs", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphs", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphs", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphs", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphs", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphs", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphs", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphs", field, varshapeIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphs", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphs", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphs", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphs", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphs", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphs", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphs", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphs", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSubshapeParagraphs", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapeParagraphs", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapeParagraphs", "shapeIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapeParagraphs", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapeParagraphs", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapeParagraphs", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSubshapeParagraphs");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapeParagraphs", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapeParagraphs(varname, varslideIndex, varpath, varshapeIndex, varpassword, varfolder, varstorage), "getSubshapeParagraphs", field, varstorage);
            });
        });
    });
});

describe("Tests for getSubshapePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSubshapePortion", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getSubshapePortion", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("getSubshapePortion", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortion", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortion", "paragraphIndex", "number");
            let varportionIndex = <number>TestInitializer.getValue("getSubshapePortion", "portionIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getSubshapePortion", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getSubshapePortion", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getSubshapePortion", "storage", "string");
            return TestInitializer.initialize("getSubshapePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), false, "getSubshapePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortion", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortion", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapePortion", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("getSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortion", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortion", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapePortion", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortion", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortion", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("getSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortion", "storage", "string");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "getSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapePortion", field, varportionIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortion", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortion", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("getSubshapePortion", "portionIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortion", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, varpassword, varfolder, varstorage), "getSubshapePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for getSubshapePortions", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSubshapePortions", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getSubshapePortions", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("getSubshapePortions", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortions", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortions", "paragraphIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getSubshapePortions", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getSubshapePortions", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getSubshapePortions", "storage", "string");
            return TestInitializer.initialize("getSubshapePortions", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), false, "getSubshapePortions");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortions", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortions", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapePortions", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortions", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortions", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapePortions", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("getSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortions", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortions", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapePortions", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("getSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortions", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "getSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortions", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapePortions", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("getSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortions", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "getSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortions", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapePortions", field, varparagraphIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortions", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortions", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapePortions", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortions", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortions", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapePortions", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSubshapePortions", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapePortions", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapePortions", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("getSubshapePortions", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("getSubshapePortions", "paragraphIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getSubshapePortions", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapePortions", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapePortions", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSubshapePortions");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapePortions", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapePortions(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varpassword, varfolder, varstorage), "getSubshapePortions", field, varstorage);
            });
        });
    });
});

describe("Tests for getSubshapes", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getSubshapes", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getSubshapes", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("getSubshapes", "path", "string");
            let varpassword = <string>TestInitializer.getValue("getSubshapes", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getSubshapes", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getSubshapes", "storage", "string");
            return TestInitializer.initialize("getSubshapes", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getSubshapes(varname, varslideIndex, varpath, varpassword, varfolder, varstorage), false, "getSubshapes");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getSubshapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapes", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapes", "path", "string");
        let varpassword = <string>TestInitializer.getValue("getSubshapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapes", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapes", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapes(varname, varslideIndex, varpath, varpassword, varfolder, varstorage), "getSubshapes", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getSubshapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapes", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapes", "path", "string");
        let varpassword = <string>TestInitializer.getValue("getSubshapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapes", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapes", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapes(varname, varslideIndex, varpath, varpassword, varfolder, varstorage), "getSubshapes", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("getSubshapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapes", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapes", "path", "string");
        let varpassword = <string>TestInitializer.getValue("getSubshapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapes", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "getSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapes", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapes(varname, varslideIndex, varpath, varpassword, varfolder, varstorage), "getSubshapes", field, varpath);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getSubshapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapes", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapes", "path", "string");
        let varpassword = <string>TestInitializer.getValue("getSubshapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapes", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapes", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapes(varname, varslideIndex, varpath, varpassword, varfolder, varstorage), "getSubshapes", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getSubshapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapes", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapes", "path", "string");
        let varpassword = <string>TestInitializer.getValue("getSubshapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapes", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapes", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapes(varname, varslideIndex, varpath, varpassword, varfolder, varstorage), "getSubshapes", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getSubshapes", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getSubshapes", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("getSubshapes", "path", "string");
        let varpassword = <string>TestInitializer.getValue("getSubshapes", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getSubshapes", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getSubshapes", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getSubshapes");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getSubshapes", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getSubshapes(varname, varslideIndex, varpath, varpassword, varfolder, varstorage), "getSubshapes", field, varstorage);
            });
        });
    });
});

describe("Tests for getTheme", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getTheme", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("getTheme", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("getTheme", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getTheme", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getTheme", "storage", "string");
            return TestInitializer.initialize("getTheme", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getTheme(varname, varslideIndex, varpassword, varfolder, varstorage), false, "getTheme");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getTheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getTheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getTheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getTheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getTheme", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getTheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getTheme", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getTheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getTheme", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("getTheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getTheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getTheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getTheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getTheme", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "getTheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getTheme", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getTheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getTheme", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getTheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getTheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getTheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getTheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getTheme", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getTheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getTheme", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getTheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getTheme", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getTheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getTheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getTheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getTheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getTheme", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getTheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getTheme", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getTheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getTheme", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getTheme", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("getTheme", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("getTheme", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getTheme", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getTheme", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getTheme");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getTheme", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getTheme(varname, varslideIndex, varpassword, varfolder, varstorage), "getTheme", field, varstorage);
            });
        });
    });
});

describe("Tests for getViewProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("getViewProperties", "name", "string");
            let varpassword = <string>TestInitializer.getValue("getViewProperties", "password", "string");
            let varfolder = <string>TestInitializer.getValue("getViewProperties", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("getViewProperties", "storage", "string");
            return TestInitializer.initialize("getViewProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().getViewProperties(varname, varpassword, varfolder, varstorage), false, "getViewProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("getViewProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getViewProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getViewProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getViewProperties", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "getViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getViewProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getViewProperties(varname, varpassword, varfolder, varstorage), "getViewProperties", field, varname);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("getViewProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getViewProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getViewProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getViewProperties", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "getViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getViewProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getViewProperties(varname, varpassword, varfolder, varstorage), "getViewProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("getViewProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getViewProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getViewProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getViewProperties", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "getViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getViewProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getViewProperties(varname, varpassword, varfolder, varstorage), "getViewProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("getViewProperties", "name", "string");
        let varpassword = <string>TestInitializer.getValue("getViewProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("getViewProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("getViewProperties", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "getViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("getViewProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().getViewProperties(varname, varpassword, varfolder, varstorage), "getViewProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for importFromHtml", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("importFromHtml", "name", "string");
            let varhtml = <string>TestInitializer.getValue("importFromHtml", "html", "string");
            let varpassword = <string>TestInitializer.getValue("importFromHtml", "password", "string");
            let varfolder = <string>TestInitializer.getValue("importFromHtml", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("importFromHtml", "storage", "string");
            return TestInitializer.initialize("importFromHtml", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().importFromHtml(varname, varhtml, varpassword, varfolder, varstorage), false, "importFromHtml");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("importFromHtml", "name", "string");
        let varhtml = <string>TestInitializer.getValue("importFromHtml", "html", "string");
        let varpassword = <string>TestInitializer.getValue("importFromHtml", "password", "string");
        let varfolder = <string>TestInitializer.getValue("importFromHtml", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("importFromHtml", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "importFromHtml");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("importFromHtml", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromHtml(varname, varhtml, varpassword, varfolder, varstorage), "importFromHtml", field, varname);
            });
        });
    });

    it("invalid html test", () => {
        const field = "html";
        let varname = <string>TestInitializer.getValue("importFromHtml", "name", "string");
        let varhtml = <string>TestInitializer.getValue("importFromHtml", "html", "string");
        let varpassword = <string>TestInitializer.getValue("importFromHtml", "password", "string");
        let varfolder = <string>TestInitializer.getValue("importFromHtml", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("importFromHtml", "storage", "string");
        varhtml = <string>TestInitializer.invalidizeValue(varhtml, field, "string", "importFromHtml");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("importFromHtml", field, varhtml).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromHtml(varname, varhtml, varpassword, varfolder, varstorage), "importFromHtml", field, varhtml);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("importFromHtml", "name", "string");
        let varhtml = <string>TestInitializer.getValue("importFromHtml", "html", "string");
        let varpassword = <string>TestInitializer.getValue("importFromHtml", "password", "string");
        let varfolder = <string>TestInitializer.getValue("importFromHtml", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("importFromHtml", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "importFromHtml");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("importFromHtml", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromHtml(varname, varhtml, varpassword, varfolder, varstorage), "importFromHtml", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("importFromHtml", "name", "string");
        let varhtml = <string>TestInitializer.getValue("importFromHtml", "html", "string");
        let varpassword = <string>TestInitializer.getValue("importFromHtml", "password", "string");
        let varfolder = <string>TestInitializer.getValue("importFromHtml", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("importFromHtml", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "importFromHtml");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("importFromHtml", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromHtml(varname, varhtml, varpassword, varfolder, varstorage), "importFromHtml", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("importFromHtml", "name", "string");
        let varhtml = <string>TestInitializer.getValue("importFromHtml", "html", "string");
        let varpassword = <string>TestInitializer.getValue("importFromHtml", "password", "string");
        let varfolder = <string>TestInitializer.getValue("importFromHtml", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("importFromHtml", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "importFromHtml");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("importFromHtml", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromHtml(varname, varhtml, varpassword, varfolder, varstorage), "importFromHtml", field, varstorage);
            });
        });
    });
});

describe("Tests for importFromPdf", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("importFromPdf", "name", "string");
            let varpdf = <Buffer>TestInitializer.getStreamValue("importFromPdf", "pdf");
            let varpassword = <string>TestInitializer.getValue("importFromPdf", "password", "string");
            let varfolder = <string>TestInitializer.getValue("importFromPdf", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("importFromPdf", "storage", "string");
            return TestInitializer.initialize("importFromPdf", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().importFromPdf(varname, varpdf, varpassword, varfolder, varstorage), false, "importFromPdf");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("importFromPdf", "name", "string");
        let varpdf = <Buffer>TestInitializer.getStreamValue("importFromPdf", "pdf");
        let varpassword = <string>TestInitializer.getValue("importFromPdf", "password", "string");
        let varfolder = <string>TestInitializer.getValue("importFromPdf", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("importFromPdf", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "importFromPdf");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("importFromPdf", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromPdf(varname, varpdf, varpassword, varfolder, varstorage), "importFromPdf", field, varname);
            });
        });
    });

    it("invalid pdf test", () => {
        const field = "pdf";
        let varname = <string>TestInitializer.getValue("importFromPdf", "name", "string");
        let varpdf = <Buffer>TestInitializer.getStreamValue("importFromPdf", "pdf");
        let varpassword = <string>TestInitializer.getValue("importFromPdf", "password", "string");
        let varfolder = <string>TestInitializer.getValue("importFromPdf", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("importFromPdf", "storage", "string");
        varpdf = <Buffer>TestInitializer.invalidizeValue(varpdf, field, "Buffer", "importFromPdf");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("importFromPdf", field, varpdf).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromPdf(varname, varpdf, varpassword, varfolder, varstorage), "importFromPdf", field, varpdf);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("importFromPdf", "name", "string");
        let varpdf = <Buffer>TestInitializer.getStreamValue("importFromPdf", "pdf");
        let varpassword = <string>TestInitializer.getValue("importFromPdf", "password", "string");
        let varfolder = <string>TestInitializer.getValue("importFromPdf", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("importFromPdf", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "importFromPdf");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("importFromPdf", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromPdf(varname, varpdf, varpassword, varfolder, varstorage), "importFromPdf", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("importFromPdf", "name", "string");
        let varpdf = <Buffer>TestInitializer.getStreamValue("importFromPdf", "pdf");
        let varpassword = <string>TestInitializer.getValue("importFromPdf", "password", "string");
        let varfolder = <string>TestInitializer.getValue("importFromPdf", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("importFromPdf", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "importFromPdf");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("importFromPdf", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromPdf(varname, varpdf, varpassword, varfolder, varstorage), "importFromPdf", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("importFromPdf", "name", "string");
        let varpdf = <Buffer>TestInitializer.getStreamValue("importFromPdf", "pdf");
        let varpassword = <string>TestInitializer.getValue("importFromPdf", "password", "string");
        let varfolder = <string>TestInitializer.getValue("importFromPdf", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("importFromPdf", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "importFromPdf");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("importFromPdf", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().importFromPdf(varname, varpdf, varpassword, varfolder, varstorage), "importFromPdf", field, varstorage);
            });
        });
    });
});

describe("Tests for merge", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("merge", "name", "string");
            let varrequest = <model.PresentationsMergeRequest>TestInitializer.getValue("merge", "request", "PresentationsMergeRequest");
            let varpassword = <string>TestInitializer.getValue("merge", "password", "string");
            let varfolder = <string>TestInitializer.getValue("merge", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("merge", "storage", "string");
            return TestInitializer.initialize("merge", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().merge(varname, varrequest, varpassword, varfolder, varstorage), false, "merge");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("merge", "name", "string");
        let varrequest = <model.PresentationsMergeRequest>TestInitializer.getValue("merge", "request", "PresentationsMergeRequest");
        let varpassword = <string>TestInitializer.getValue("merge", "password", "string");
        let varfolder = <string>TestInitializer.getValue("merge", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("merge", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "merge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("merge", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().merge(varname, varrequest, varpassword, varfolder, varstorage), "merge", field, varname);
            });
        });
    });

    it("invalid request test", () => {
        const field = "request";
        let varname = <string>TestInitializer.getValue("merge", "name", "string");
        let varrequest = <model.PresentationsMergeRequest>TestInitializer.getValue("merge", "request", "PresentationsMergeRequest");
        let varpassword = <string>TestInitializer.getValue("merge", "password", "string");
        let varfolder = <string>TestInitializer.getValue("merge", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("merge", "storage", "string");
        varrequest = <model.PresentationsMergeRequest>TestInitializer.invalidizeValue(varrequest, field, "PresentationsMergeRequest", "merge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("merge", field, varrequest).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().merge(varname, varrequest, varpassword, varfolder, varstorage), "merge", field, varrequest);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("merge", "name", "string");
        let varrequest = <model.PresentationsMergeRequest>TestInitializer.getValue("merge", "request", "PresentationsMergeRequest");
        let varpassword = <string>TestInitializer.getValue("merge", "password", "string");
        let varfolder = <string>TestInitializer.getValue("merge", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("merge", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "merge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("merge", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().merge(varname, varrequest, varpassword, varfolder, varstorage), "merge", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("merge", "name", "string");
        let varrequest = <model.PresentationsMergeRequest>TestInitializer.getValue("merge", "request", "PresentationsMergeRequest");
        let varpassword = <string>TestInitializer.getValue("merge", "password", "string");
        let varfolder = <string>TestInitializer.getValue("merge", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("merge", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "merge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("merge", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().merge(varname, varrequest, varpassword, varfolder, varstorage), "merge", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("merge", "name", "string");
        let varrequest = <model.PresentationsMergeRequest>TestInitializer.getValue("merge", "request", "PresentationsMergeRequest");
        let varpassword = <string>TestInitializer.getValue("merge", "password", "string");
        let varfolder = <string>TestInitializer.getValue("merge", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("merge", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "merge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("merge", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().merge(varname, varrequest, varpassword, varfolder, varstorage), "merge", field, varstorage);
            });
        });
    });
});

describe("Tests for mergeAndSaveOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varoutPath = <string>TestInitializer.getValue("mergeAndSaveOnline", "outPath", "string");
            let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("mergeAndSaveOnline", "files");
            let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("mergeAndSaveOnline", "request", "OrderedMergeRequest");
            let varstorage = <string>TestInitializer.getValue("mergeAndSaveOnline", "storage", "string");
            return TestInitializer.initialize("mergeAndSaveOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().mergeAndSaveOnline(varoutPath, varfiles, varrequest, varstorage), false, "mergeAndSaveOnline");
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let varoutPath = <string>TestInitializer.getValue("mergeAndSaveOnline", "outPath", "string");
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("mergeAndSaveOnline", "files");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("mergeAndSaveOnline", "request", "OrderedMergeRequest");
        let varstorage = <string>TestInitializer.getValue("mergeAndSaveOnline", "storage", "string");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "mergeAndSaveOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("mergeAndSaveOnline", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().mergeAndSaveOnline(varoutPath, varfiles, varrequest, varstorage), "mergeAndSaveOnline", field, varoutPath);
            });
        });
    });

    it("invalid files test", () => {
        const field = "files";
        let varoutPath = <string>TestInitializer.getValue("mergeAndSaveOnline", "outPath", "string");
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("mergeAndSaveOnline", "files");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("mergeAndSaveOnline", "request", "OrderedMergeRequest");
        let varstorage = <string>TestInitializer.getValue("mergeAndSaveOnline", "storage", "string");
        varfiles = <Array<Buffer>>TestInitializer.invalidizeValue(varfiles, field, "Array&lt;Buffer&gt;", "mergeAndSaveOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("mergeAndSaveOnline", field, varfiles).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().mergeAndSaveOnline(varoutPath, varfiles, varrequest, varstorage), "mergeAndSaveOnline", field, varfiles);
            });
        });
    });

    it("invalid request test", () => {
        const field = "request";
        let varoutPath = <string>TestInitializer.getValue("mergeAndSaveOnline", "outPath", "string");
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("mergeAndSaveOnline", "files");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("mergeAndSaveOnline", "request", "OrderedMergeRequest");
        let varstorage = <string>TestInitializer.getValue("mergeAndSaveOnline", "storage", "string");
        varrequest = <model.OrderedMergeRequest>TestInitializer.invalidizeValue(varrequest, field, "OrderedMergeRequest", "mergeAndSaveOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("mergeAndSaveOnline", field, varrequest).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().mergeAndSaveOnline(varoutPath, varfiles, varrequest, varstorage), "mergeAndSaveOnline", field, varrequest);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varoutPath = <string>TestInitializer.getValue("mergeAndSaveOnline", "outPath", "string");
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("mergeAndSaveOnline", "files");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("mergeAndSaveOnline", "request", "OrderedMergeRequest");
        let varstorage = <string>TestInitializer.getValue("mergeAndSaveOnline", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "mergeAndSaveOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("mergeAndSaveOnline", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().mergeAndSaveOnline(varoutPath, varfiles, varrequest, varstorage), "mergeAndSaveOnline", field, varstorage);
            });
        });
    });
});

describe("Tests for mergeOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("mergeOnline", "files");
            let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("mergeOnline", "request", "OrderedMergeRequest");
            let varstorage = <string>TestInitializer.getValue("mergeOnline", "storage", "string");
            return TestInitializer.initialize("mergeOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().mergeOnline(varfiles, varrequest, varstorage), true, "mergeOnline");
            });
        });
    });

    it("invalid files test", () => {
        const field = "files";
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("mergeOnline", "files");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("mergeOnline", "request", "OrderedMergeRequest");
        let varstorage = <string>TestInitializer.getValue("mergeOnline", "storage", "string");
        varfiles = <Array<Buffer>>TestInitializer.invalidizeValue(varfiles, field, "Array&lt;Buffer&gt;", "mergeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("mergeOnline", field, varfiles).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().mergeOnline(varfiles, varrequest, varstorage), "mergeOnline", field, varfiles);
            });
        });
    });

    it("invalid request test", () => {
        const field = "request";
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("mergeOnline", "files");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("mergeOnline", "request", "OrderedMergeRequest");
        let varstorage = <string>TestInitializer.getValue("mergeOnline", "storage", "string");
        varrequest = <model.OrderedMergeRequest>TestInitializer.invalidizeValue(varrequest, field, "OrderedMergeRequest", "mergeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("mergeOnline", field, varrequest).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().mergeOnline(varfiles, varrequest, varstorage), "mergeOnline", field, varrequest);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("mergeOnline", "files");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("mergeOnline", "request", "OrderedMergeRequest");
        let varstorage = <string>TestInitializer.getValue("mergeOnline", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "mergeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("mergeOnline", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().mergeOnline(varfiles, varrequest, varstorage), "mergeOnline", field, varstorage);
            });
        });
    });
});

describe("Tests for moveFile", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varsrcPath = <string>TestInitializer.getValue("moveFile", "srcPath", "string");
            let vardestPath = <string>TestInitializer.getValue("moveFile", "destPath", "string");
            let varsrcStorageName = <string>TestInitializer.getValue("moveFile", "srcStorageName", "string");
            let vardestStorageName = <string>TestInitializer.getValue("moveFile", "destStorageName", "string");
            let varversionId = <string>TestInitializer.getValue("moveFile", "versionId", "string");
            return TestInitializer.initialize("moveFile", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().moveFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), false, "moveFile");
            });
        });
    });

    it("invalid srcPath test", () => {
        const field = "srcPath";
        let varsrcPath = <string>TestInitializer.getValue("moveFile", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("moveFile", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFile", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("moveFile", "destStorageName", "string");
        let varversionId = <string>TestInitializer.getValue("moveFile", "versionId", "string");
        varsrcPath = <string>TestInitializer.invalidizeValue(varsrcPath, field, "string", "moveFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFile", field, varsrcPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "moveFile", field, varsrcPath);
            });
        });
    });

    it("invalid destPath test", () => {
        const field = "destPath";
        let varsrcPath = <string>TestInitializer.getValue("moveFile", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("moveFile", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFile", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("moveFile", "destStorageName", "string");
        let varversionId = <string>TestInitializer.getValue("moveFile", "versionId", "string");
        vardestPath = <string>TestInitializer.invalidizeValue(vardestPath, field, "string", "moveFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFile", field, vardestPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "moveFile", field, vardestPath);
            });
        });
    });

    it("invalid srcStorageName test", () => {
        const field = "srcStorageName";
        let varsrcPath = <string>TestInitializer.getValue("moveFile", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("moveFile", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFile", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("moveFile", "destStorageName", "string");
        let varversionId = <string>TestInitializer.getValue("moveFile", "versionId", "string");
        varsrcStorageName = <string>TestInitializer.invalidizeValue(varsrcStorageName, field, "string", "moveFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFile", field, varsrcStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "moveFile", field, varsrcStorageName);
            });
        });
    });

    it("invalid destStorageName test", () => {
        const field = "destStorageName";
        let varsrcPath = <string>TestInitializer.getValue("moveFile", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("moveFile", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFile", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("moveFile", "destStorageName", "string");
        let varversionId = <string>TestInitializer.getValue("moveFile", "versionId", "string");
        vardestStorageName = <string>TestInitializer.invalidizeValue(vardestStorageName, field, "string", "moveFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFile", field, vardestStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "moveFile", field, vardestStorageName);
            });
        });
    });

    it("invalid versionId test", () => {
        const field = "versionId";
        let varsrcPath = <string>TestInitializer.getValue("moveFile", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("moveFile", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFile", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("moveFile", "destStorageName", "string");
        let varversionId = <string>TestInitializer.getValue("moveFile", "versionId", "string");
        varversionId = <string>TestInitializer.invalidizeValue(varversionId, field, "string", "moveFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFile", field, varversionId).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFile(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName, varversionId), "moveFile", field, varversionId);
            });
        });
    });
});

describe("Tests for moveFolder", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varsrcPath = <string>TestInitializer.getValue("moveFolder", "srcPath", "string");
            let vardestPath = <string>TestInitializer.getValue("moveFolder", "destPath", "string");
            let varsrcStorageName = <string>TestInitializer.getValue("moveFolder", "srcStorageName", "string");
            let vardestStorageName = <string>TestInitializer.getValue("moveFolder", "destStorageName", "string");
            return TestInitializer.initialize("moveFolder", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().moveFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), false, "moveFolder");
            });
        });
    });

    it("invalid srcPath test", () => {
        const field = "srcPath";
        let varsrcPath = <string>TestInitializer.getValue("moveFolder", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("moveFolder", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFolder", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("moveFolder", "destStorageName", "string");
        varsrcPath = <string>TestInitializer.invalidizeValue(varsrcPath, field, "string", "moveFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFolder", field, varsrcPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "moveFolder", field, varsrcPath);
            });
        });
    });

    it("invalid destPath test", () => {
        const field = "destPath";
        let varsrcPath = <string>TestInitializer.getValue("moveFolder", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("moveFolder", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFolder", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("moveFolder", "destStorageName", "string");
        vardestPath = <string>TestInitializer.invalidizeValue(vardestPath, field, "string", "moveFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFolder", field, vardestPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "moveFolder", field, vardestPath);
            });
        });
    });

    it("invalid srcStorageName test", () => {
        const field = "srcStorageName";
        let varsrcPath = <string>TestInitializer.getValue("moveFolder", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("moveFolder", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFolder", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("moveFolder", "destStorageName", "string");
        varsrcStorageName = <string>TestInitializer.invalidizeValue(varsrcStorageName, field, "string", "moveFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFolder", field, varsrcStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "moveFolder", field, varsrcStorageName);
            });
        });
    });

    it("invalid destStorageName test", () => {
        const field = "destStorageName";
        let varsrcPath = <string>TestInitializer.getValue("moveFolder", "srcPath", "string");
        let vardestPath = <string>TestInitializer.getValue("moveFolder", "destPath", "string");
        let varsrcStorageName = <string>TestInitializer.getValue("moveFolder", "srcStorageName", "string");
        let vardestStorageName = <string>TestInitializer.getValue("moveFolder", "destStorageName", "string");
        vardestStorageName = <string>TestInitializer.invalidizeValue(vardestStorageName, field, "string", "moveFolder");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveFolder", field, vardestStorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveFolder(varsrcPath, vardestPath, varsrcStorageName, vardestStorageName), "moveFolder", field, vardestStorageName);
            });
        });
    });
});

describe("Tests for moveSection", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("moveSection", "name", "string");
            let varsectionIndex = <number>TestInitializer.getValue("moveSection", "sectionIndex", "number");
            let varnewPosition = <number>TestInitializer.getValue("moveSection", "newPosition", "number");
            let varpassword = <string>TestInitializer.getValue("moveSection", "password", "string");
            let varfolder = <string>TestInitializer.getValue("moveSection", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("moveSection", "storage", "string");
            return TestInitializer.initialize("moveSection", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().moveSection(varname, varsectionIndex, varnewPosition, varpassword, varfolder, varstorage), false, "moveSection");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("moveSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("moveSection", "sectionIndex", "number");
        let varnewPosition = <number>TestInitializer.getValue("moveSection", "newPosition", "number");
        let varpassword = <string>TestInitializer.getValue("moveSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("moveSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("moveSection", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "moveSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveSection", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSection(varname, varsectionIndex, varnewPosition, varpassword, varfolder, varstorage), "moveSection", field, varname);
            });
        });
    });

    it("invalid sectionIndex test", () => {
        const field = "sectionIndex";
        let varname = <string>TestInitializer.getValue("moveSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("moveSection", "sectionIndex", "number");
        let varnewPosition = <number>TestInitializer.getValue("moveSection", "newPosition", "number");
        let varpassword = <string>TestInitializer.getValue("moveSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("moveSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("moveSection", "storage", "string");
        varsectionIndex = <number>TestInitializer.invalidizeValue(varsectionIndex, field, "number", "moveSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveSection", field, varsectionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSection(varname, varsectionIndex, varnewPosition, varpassword, varfolder, varstorage), "moveSection", field, varsectionIndex);
            });
        });
    });

    it("invalid newPosition test", () => {
        const field = "newPosition";
        let varname = <string>TestInitializer.getValue("moveSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("moveSection", "sectionIndex", "number");
        let varnewPosition = <number>TestInitializer.getValue("moveSection", "newPosition", "number");
        let varpassword = <string>TestInitializer.getValue("moveSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("moveSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("moveSection", "storage", "string");
        varnewPosition = <number>TestInitializer.invalidizeValue(varnewPosition, field, "number", "moveSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveSection", field, varnewPosition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSection(varname, varsectionIndex, varnewPosition, varpassword, varfolder, varstorage), "moveSection", field, varnewPosition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("moveSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("moveSection", "sectionIndex", "number");
        let varnewPosition = <number>TestInitializer.getValue("moveSection", "newPosition", "number");
        let varpassword = <string>TestInitializer.getValue("moveSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("moveSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("moveSection", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "moveSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveSection", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSection(varname, varsectionIndex, varnewPosition, varpassword, varfolder, varstorage), "moveSection", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("moveSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("moveSection", "sectionIndex", "number");
        let varnewPosition = <number>TestInitializer.getValue("moveSection", "newPosition", "number");
        let varpassword = <string>TestInitializer.getValue("moveSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("moveSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("moveSection", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "moveSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveSection", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSection(varname, varsectionIndex, varnewPosition, varpassword, varfolder, varstorage), "moveSection", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("moveSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("moveSection", "sectionIndex", "number");
        let varnewPosition = <number>TestInitializer.getValue("moveSection", "newPosition", "number");
        let varpassword = <string>TestInitializer.getValue("moveSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("moveSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("moveSection", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "moveSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveSection", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSection(varname, varsectionIndex, varnewPosition, varpassword, varfolder, varstorage), "moveSection", field, varstorage);
            });
        });
    });
});

describe("Tests for moveSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("moveSlide", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("moveSlide", "slideIndex", "number");
            let varnewPosition = <number>TestInitializer.getValue("moveSlide", "newPosition", "number");
            let varpassword = <string>TestInitializer.getValue("moveSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("moveSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("moveSlide", "storage", "string");
            return TestInitializer.initialize("moveSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().moveSlide(varname, varslideIndex, varnewPosition, varpassword, varfolder, varstorage), false, "moveSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("moveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("moveSlide", "slideIndex", "number");
        let varnewPosition = <number>TestInitializer.getValue("moveSlide", "newPosition", "number");
        let varpassword = <string>TestInitializer.getValue("moveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("moveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("moveSlide", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "moveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSlide(varname, varslideIndex, varnewPosition, varpassword, varfolder, varstorage), "moveSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("moveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("moveSlide", "slideIndex", "number");
        let varnewPosition = <number>TestInitializer.getValue("moveSlide", "newPosition", "number");
        let varpassword = <string>TestInitializer.getValue("moveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("moveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("moveSlide", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "moveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSlide(varname, varslideIndex, varnewPosition, varpassword, varfolder, varstorage), "moveSlide", field, varslideIndex);
            });
        });
    });

    it("invalid newPosition test", () => {
        const field = "newPosition";
        let varname = <string>TestInitializer.getValue("moveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("moveSlide", "slideIndex", "number");
        let varnewPosition = <number>TestInitializer.getValue("moveSlide", "newPosition", "number");
        let varpassword = <string>TestInitializer.getValue("moveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("moveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("moveSlide", "storage", "string");
        varnewPosition = <number>TestInitializer.invalidizeValue(varnewPosition, field, "number", "moveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveSlide", field, varnewPosition).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSlide(varname, varslideIndex, varnewPosition, varpassword, varfolder, varstorage), "moveSlide", field, varnewPosition);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("moveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("moveSlide", "slideIndex", "number");
        let varnewPosition = <number>TestInitializer.getValue("moveSlide", "newPosition", "number");
        let varpassword = <string>TestInitializer.getValue("moveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("moveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("moveSlide", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "moveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSlide(varname, varslideIndex, varnewPosition, varpassword, varfolder, varstorage), "moveSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("moveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("moveSlide", "slideIndex", "number");
        let varnewPosition = <number>TestInitializer.getValue("moveSlide", "newPosition", "number");
        let varpassword = <string>TestInitializer.getValue("moveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("moveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("moveSlide", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "moveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSlide(varname, varslideIndex, varnewPosition, varpassword, varfolder, varstorage), "moveSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("moveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("moveSlide", "slideIndex", "number");
        let varnewPosition = <number>TestInitializer.getValue("moveSlide", "newPosition", "number");
        let varpassword = <string>TestInitializer.getValue("moveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("moveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("moveSlide", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "moveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("moveSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().moveSlide(varname, varslideIndex, varnewPosition, varpassword, varfolder, varstorage), "moveSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for notesSlideExists", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("notesSlideExists", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("notesSlideExists", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("notesSlideExists", "password", "string");
            let varfolder = <string>TestInitializer.getValue("notesSlideExists", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("notesSlideExists", "storage", "string");
            return TestInitializer.initialize("notesSlideExists", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().notesSlideExists(varname, varslideIndex, varpassword, varfolder, varstorage), false, "notesSlideExists");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("notesSlideExists", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("notesSlideExists", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("notesSlideExists", "password", "string");
        let varfolder = <string>TestInitializer.getValue("notesSlideExists", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("notesSlideExists", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "notesSlideExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("notesSlideExists", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExists(varname, varslideIndex, varpassword, varfolder, varstorage), "notesSlideExists", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("notesSlideExists", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("notesSlideExists", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("notesSlideExists", "password", "string");
        let varfolder = <string>TestInitializer.getValue("notesSlideExists", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("notesSlideExists", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "notesSlideExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("notesSlideExists", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExists(varname, varslideIndex, varpassword, varfolder, varstorage), "notesSlideExists", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("notesSlideExists", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("notesSlideExists", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("notesSlideExists", "password", "string");
        let varfolder = <string>TestInitializer.getValue("notesSlideExists", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("notesSlideExists", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "notesSlideExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("notesSlideExists", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExists(varname, varslideIndex, varpassword, varfolder, varstorage), "notesSlideExists", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("notesSlideExists", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("notesSlideExists", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("notesSlideExists", "password", "string");
        let varfolder = <string>TestInitializer.getValue("notesSlideExists", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("notesSlideExists", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "notesSlideExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("notesSlideExists", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExists(varname, varslideIndex, varpassword, varfolder, varstorage), "notesSlideExists", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("notesSlideExists", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("notesSlideExists", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("notesSlideExists", "password", "string");
        let varfolder = <string>TestInitializer.getValue("notesSlideExists", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("notesSlideExists", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "notesSlideExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("notesSlideExists", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExists(varname, varslideIndex, varpassword, varfolder, varstorage), "notesSlideExists", field, varstorage);
            });
        });
    });
});

describe("Tests for notesSlideExistsOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("notesSlideExistsOnline", "document");
            let varslideIndex = <number>TestInitializer.getValue("notesSlideExistsOnline", "slideIndex", "number");
            let varpassword = <string>TestInitializer.getValue("notesSlideExistsOnline", "password", "string");
            return TestInitializer.initialize("notesSlideExistsOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().notesSlideExistsOnline(vardocument, varslideIndex, varpassword), false, "notesSlideExistsOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("notesSlideExistsOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("notesSlideExistsOnline", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("notesSlideExistsOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "notesSlideExistsOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("notesSlideExistsOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExistsOnline(vardocument, varslideIndex, varpassword), "notesSlideExistsOnline", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("notesSlideExistsOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("notesSlideExistsOnline", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("notesSlideExistsOnline", "password", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "notesSlideExistsOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("notesSlideExistsOnline", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExistsOnline(vardocument, varslideIndex, varpassword), "notesSlideExistsOnline", field, varslideIndex);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("notesSlideExistsOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("notesSlideExistsOnline", "slideIndex", "number");
        let varpassword = <string>TestInitializer.getValue("notesSlideExistsOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "notesSlideExistsOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("notesSlideExistsOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().notesSlideExistsOnline(vardocument, varslideIndex, varpassword), "notesSlideExistsOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for objectExists", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("objectExists", "path", "string");
            let varstorageName = <string>TestInitializer.getValue("objectExists", "storageName", "string");
            let varversionId = <string>TestInitializer.getValue("objectExists", "versionId", "string");
            return TestInitializer.initialize("objectExists", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().objectExists(varpath, varstorageName, varversionId), false, "objectExists");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("objectExists", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("objectExists", "storageName", "string");
        let varversionId = <string>TestInitializer.getValue("objectExists", "versionId", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "objectExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("objectExists", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().objectExists(varpath, varstorageName, varversionId), "objectExists", field, varpath);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("objectExists", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("objectExists", "storageName", "string");
        let varversionId = <string>TestInitializer.getValue("objectExists", "versionId", "string");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "objectExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("objectExists", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().objectExists(varpath, varstorageName, varversionId), "objectExists", field, varstorageName);
            });
        });
    });

    it("invalid versionId test", () => {
        const field = "versionId";
        let varpath = <string>TestInitializer.getValue("objectExists", "path", "string");
        let varstorageName = <string>TestInitializer.getValue("objectExists", "storageName", "string");
        let varversionId = <string>TestInitializer.getValue("objectExists", "versionId", "string");
        varversionId = <string>TestInitializer.invalidizeValue(varversionId, field, "string", "objectExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("objectExists", field, varversionId).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().objectExists(varpath, varstorageName, varversionId), "objectExists", field, varversionId);
            });
        });
    });
});

describe("Tests for orderedMerge", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("orderedMerge", "name", "string");
            let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("orderedMerge", "request", "OrderedMergeRequest");
            let varpassword = <string>TestInitializer.getValue("orderedMerge", "password", "string");
            let varfolder = <string>TestInitializer.getValue("orderedMerge", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("orderedMerge", "storage", "string");
            return TestInitializer.initialize("orderedMerge", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().orderedMerge(varname, varrequest, varpassword, varfolder, varstorage), false, "orderedMerge");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("orderedMerge", "name", "string");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("orderedMerge", "request", "OrderedMergeRequest");
        let varpassword = <string>TestInitializer.getValue("orderedMerge", "password", "string");
        let varfolder = <string>TestInitializer.getValue("orderedMerge", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("orderedMerge", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "orderedMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("orderedMerge", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().orderedMerge(varname, varrequest, varpassword, varfolder, varstorage), "orderedMerge", field, varname);
            });
        });
    });

    it("invalid request test", () => {
        const field = "request";
        let varname = <string>TestInitializer.getValue("orderedMerge", "name", "string");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("orderedMerge", "request", "OrderedMergeRequest");
        let varpassword = <string>TestInitializer.getValue("orderedMerge", "password", "string");
        let varfolder = <string>TestInitializer.getValue("orderedMerge", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("orderedMerge", "storage", "string");
        varrequest = <model.OrderedMergeRequest>TestInitializer.invalidizeValue(varrequest, field, "OrderedMergeRequest", "orderedMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("orderedMerge", field, varrequest).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().orderedMerge(varname, varrequest, varpassword, varfolder, varstorage), "orderedMerge", field, varrequest);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("orderedMerge", "name", "string");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("orderedMerge", "request", "OrderedMergeRequest");
        let varpassword = <string>TestInitializer.getValue("orderedMerge", "password", "string");
        let varfolder = <string>TestInitializer.getValue("orderedMerge", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("orderedMerge", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "orderedMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("orderedMerge", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().orderedMerge(varname, varrequest, varpassword, varfolder, varstorage), "orderedMerge", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("orderedMerge", "name", "string");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("orderedMerge", "request", "OrderedMergeRequest");
        let varpassword = <string>TestInitializer.getValue("orderedMerge", "password", "string");
        let varfolder = <string>TestInitializer.getValue("orderedMerge", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("orderedMerge", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "orderedMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("orderedMerge", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().orderedMerge(varname, varrequest, varpassword, varfolder, varstorage), "orderedMerge", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("orderedMerge", "name", "string");
        let varrequest = <model.OrderedMergeRequest>TestInitializer.getValue("orderedMerge", "request", "OrderedMergeRequest");
        let varpassword = <string>TestInitializer.getValue("orderedMerge", "password", "string");
        let varfolder = <string>TestInitializer.getValue("orderedMerge", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("orderedMerge", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "orderedMerge");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("orderedMerge", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().orderedMerge(varname, varrequest, varpassword, varfolder, varstorage), "orderedMerge", field, varstorage);
            });
        });
    });
});

describe("Tests for pipeline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpipeline = <model.Pipeline>TestInitializer.getValue("pipeline", "pipeline", "Pipeline");
            let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("pipeline", "files");
            return TestInitializer.initialize("pipeline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().pipeline(varpipeline, varfiles), true, "pipeline");
            });
        });
    });

    it("invalid pipeline test", () => {
        const field = "pipeline";
        let varpipeline = <model.Pipeline>TestInitializer.getValue("pipeline", "pipeline", "Pipeline");
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("pipeline", "files");
        varpipeline = <model.Pipeline>TestInitializer.invalidizeValue(varpipeline, field, "Pipeline", "pipeline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("pipeline", field, varpipeline).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().pipeline(varpipeline, varfiles), "pipeline", field, varpipeline);
            });
        });
    });

    it("invalid files test", () => {
        const field = "files";
        let varpipeline = <model.Pipeline>TestInitializer.getValue("pipeline", "pipeline", "Pipeline");
        let varfiles = <Array<Buffer>>TestInitializer.getBinArrayValue("pipeline", "files");
        varfiles = <Array<Buffer>>TestInitializer.invalidizeValue(varfiles, field, "Array&lt;Buffer&gt;", "pipeline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("pipeline", field, varfiles).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().pipeline(varpipeline, varfiles), "pipeline", field, varfiles);
            });
        });
    });
});

describe("Tests for reorderSlides", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("reorderSlides", "name", "string");
            let varoldPositions = <Array<number>>TestInitializer.getValue("reorderSlides", "oldPositions", "Array&lt;number&gt;");
            let varnewPositions = <Array<number>>TestInitializer.getValue("reorderSlides", "newPositions", "Array&lt;number&gt;");
            let varpassword = <string>TestInitializer.getValue("reorderSlides", "password", "string");
            let varfolder = <string>TestInitializer.getValue("reorderSlides", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("reorderSlides", "storage", "string");
            return TestInitializer.initialize("reorderSlides", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().reorderSlides(varname, varoldPositions, varnewPositions, varpassword, varfolder, varstorage), false, "reorderSlides");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("reorderSlides", "name", "string");
        let varoldPositions = <Array<number>>TestInitializer.getValue("reorderSlides", "oldPositions", "Array&lt;number&gt;");
        let varnewPositions = <Array<number>>TestInitializer.getValue("reorderSlides", "newPositions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("reorderSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("reorderSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("reorderSlides", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "reorderSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("reorderSlides", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().reorderSlides(varname, varoldPositions, varnewPositions, varpassword, varfolder, varstorage), "reorderSlides", field, varname);
            });
        });
    });

    it("invalid oldPositions test", () => {
        const field = "oldPositions";
        let varname = <string>TestInitializer.getValue("reorderSlides", "name", "string");
        let varoldPositions = <Array<number>>TestInitializer.getValue("reorderSlides", "oldPositions", "Array&lt;number&gt;");
        let varnewPositions = <Array<number>>TestInitializer.getValue("reorderSlides", "newPositions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("reorderSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("reorderSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("reorderSlides", "storage", "string");
        varoldPositions = <Array<number>>TestInitializer.invalidizeValue(varoldPositions, field, "Array&lt;number&gt;", "reorderSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("reorderSlides", field, varoldPositions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().reorderSlides(varname, varoldPositions, varnewPositions, varpassword, varfolder, varstorage), "reorderSlides", field, varoldPositions);
            });
        });
    });

    it("invalid newPositions test", () => {
        const field = "newPositions";
        let varname = <string>TestInitializer.getValue("reorderSlides", "name", "string");
        let varoldPositions = <Array<number>>TestInitializer.getValue("reorderSlides", "oldPositions", "Array&lt;number&gt;");
        let varnewPositions = <Array<number>>TestInitializer.getValue("reorderSlides", "newPositions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("reorderSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("reorderSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("reorderSlides", "storage", "string");
        varnewPositions = <Array<number>>TestInitializer.invalidizeValue(varnewPositions, field, "Array&lt;number&gt;", "reorderSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("reorderSlides", field, varnewPositions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().reorderSlides(varname, varoldPositions, varnewPositions, varpassword, varfolder, varstorage), "reorderSlides", field, varnewPositions);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("reorderSlides", "name", "string");
        let varoldPositions = <Array<number>>TestInitializer.getValue("reorderSlides", "oldPositions", "Array&lt;number&gt;");
        let varnewPositions = <Array<number>>TestInitializer.getValue("reorderSlides", "newPositions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("reorderSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("reorderSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("reorderSlides", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "reorderSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("reorderSlides", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().reorderSlides(varname, varoldPositions, varnewPositions, varpassword, varfolder, varstorage), "reorderSlides", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("reorderSlides", "name", "string");
        let varoldPositions = <Array<number>>TestInitializer.getValue("reorderSlides", "oldPositions", "Array&lt;number&gt;");
        let varnewPositions = <Array<number>>TestInitializer.getValue("reorderSlides", "newPositions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("reorderSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("reorderSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("reorderSlides", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "reorderSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("reorderSlides", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().reorderSlides(varname, varoldPositions, varnewPositions, varpassword, varfolder, varstorage), "reorderSlides", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("reorderSlides", "name", "string");
        let varoldPositions = <Array<number>>TestInitializer.getValue("reorderSlides", "oldPositions", "Array&lt;number&gt;");
        let varnewPositions = <Array<number>>TestInitializer.getValue("reorderSlides", "newPositions", "Array&lt;number&gt;");
        let varpassword = <string>TestInitializer.getValue("reorderSlides", "password", "string");
        let varfolder = <string>TestInitializer.getValue("reorderSlides", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("reorderSlides", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "reorderSlides");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("reorderSlides", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().reorderSlides(varname, varoldPositions, varnewPositions, varpassword, varfolder, varstorage), "reorderSlides", field, varstorage);
            });
        });
    });
});

describe("Tests for replacePresentationText", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("replacePresentationText", "name", "string");
            let varoldValue = <string>TestInitializer.getValue("replacePresentationText", "oldValue", "string");
            let varnewValue = <string>TestInitializer.getValue("replacePresentationText", "newValue", "string");
            let varignoreCase = <boolean>TestInitializer.getValue("replacePresentationText", "ignoreCase", "boolean");
            let varpassword = <string>TestInitializer.getValue("replacePresentationText", "password", "string");
            let varfolder = <string>TestInitializer.getValue("replacePresentationText", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("replacePresentationText", "storage", "string");
            return TestInitializer.initialize("replacePresentationText", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), false, "replacePresentationText");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("replacePresentationText", "name", "string");
        let varoldValue = <string>TestInitializer.getValue("replacePresentationText", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replacePresentationText", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replacePresentationText", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replacePresentationText", "password", "string");
        let varfolder = <string>TestInitializer.getValue("replacePresentationText", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("replacePresentationText", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "replacePresentationText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replacePresentationText", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "replacePresentationText", field, varname);
            });
        });
    });

    it("invalid oldValue test", () => {
        const field = "oldValue";
        let varname = <string>TestInitializer.getValue("replacePresentationText", "name", "string");
        let varoldValue = <string>TestInitializer.getValue("replacePresentationText", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replacePresentationText", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replacePresentationText", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replacePresentationText", "password", "string");
        let varfolder = <string>TestInitializer.getValue("replacePresentationText", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("replacePresentationText", "storage", "string");
        varoldValue = <string>TestInitializer.invalidizeValue(varoldValue, field, "string", "replacePresentationText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replacePresentationText", field, varoldValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "replacePresentationText", field, varoldValue);
            });
        });
    });

    it("invalid newValue test", () => {
        const field = "newValue";
        let varname = <string>TestInitializer.getValue("replacePresentationText", "name", "string");
        let varoldValue = <string>TestInitializer.getValue("replacePresentationText", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replacePresentationText", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replacePresentationText", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replacePresentationText", "password", "string");
        let varfolder = <string>TestInitializer.getValue("replacePresentationText", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("replacePresentationText", "storage", "string");
        varnewValue = <string>TestInitializer.invalidizeValue(varnewValue, field, "string", "replacePresentationText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replacePresentationText", field, varnewValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "replacePresentationText", field, varnewValue);
            });
        });
    });

    it("invalid ignoreCase test", () => {
        const field = "ignoreCase";
        let varname = <string>TestInitializer.getValue("replacePresentationText", "name", "string");
        let varoldValue = <string>TestInitializer.getValue("replacePresentationText", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replacePresentationText", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replacePresentationText", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replacePresentationText", "password", "string");
        let varfolder = <string>TestInitializer.getValue("replacePresentationText", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("replacePresentationText", "storage", "string");
        varignoreCase = <boolean>TestInitializer.invalidizeValue(varignoreCase, field, "boolean", "replacePresentationText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replacePresentationText", field, varignoreCase).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "replacePresentationText", field, varignoreCase);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("replacePresentationText", "name", "string");
        let varoldValue = <string>TestInitializer.getValue("replacePresentationText", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replacePresentationText", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replacePresentationText", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replacePresentationText", "password", "string");
        let varfolder = <string>TestInitializer.getValue("replacePresentationText", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("replacePresentationText", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "replacePresentationText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replacePresentationText", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "replacePresentationText", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("replacePresentationText", "name", "string");
        let varoldValue = <string>TestInitializer.getValue("replacePresentationText", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replacePresentationText", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replacePresentationText", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replacePresentationText", "password", "string");
        let varfolder = <string>TestInitializer.getValue("replacePresentationText", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("replacePresentationText", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "replacePresentationText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replacePresentationText", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "replacePresentationText", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("replacePresentationText", "name", "string");
        let varoldValue = <string>TestInitializer.getValue("replacePresentationText", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replacePresentationText", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replacePresentationText", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replacePresentationText", "password", "string");
        let varfolder = <string>TestInitializer.getValue("replacePresentationText", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("replacePresentationText", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "replacePresentationText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replacePresentationText", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationText(varname, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "replacePresentationText", field, varstorage);
            });
        });
    });
});

describe("Tests for replacePresentationTextOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("replacePresentationTextOnline", "document");
            let varoldValue = <string>TestInitializer.getValue("replacePresentationTextOnline", "oldValue", "string");
            let varnewValue = <string>TestInitializer.getValue("replacePresentationTextOnline", "newValue", "string");
            let varignoreCase = <boolean>TestInitializer.getValue("replacePresentationTextOnline", "ignoreCase", "boolean");
            let varpassword = <string>TestInitializer.getValue("replacePresentationTextOnline", "password", "string");
            return TestInitializer.initialize("replacePresentationTextOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().replacePresentationTextOnline(vardocument, varoldValue, varnewValue, varignoreCase, varpassword), true, "replacePresentationTextOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("replacePresentationTextOnline", "document");
        let varoldValue = <string>TestInitializer.getValue("replacePresentationTextOnline", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replacePresentationTextOnline", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replacePresentationTextOnline", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replacePresentationTextOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "replacePresentationTextOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replacePresentationTextOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationTextOnline(vardocument, varoldValue, varnewValue, varignoreCase, varpassword), "replacePresentationTextOnline", field, vardocument);
            });
        });
    });

    it("invalid oldValue test", () => {
        const field = "oldValue";
        let vardocument = <Buffer>TestInitializer.getStreamValue("replacePresentationTextOnline", "document");
        let varoldValue = <string>TestInitializer.getValue("replacePresentationTextOnline", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replacePresentationTextOnline", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replacePresentationTextOnline", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replacePresentationTextOnline", "password", "string");
        varoldValue = <string>TestInitializer.invalidizeValue(varoldValue, field, "string", "replacePresentationTextOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replacePresentationTextOnline", field, varoldValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationTextOnline(vardocument, varoldValue, varnewValue, varignoreCase, varpassword), "replacePresentationTextOnline", field, varoldValue);
            });
        });
    });

    it("invalid newValue test", () => {
        const field = "newValue";
        let vardocument = <Buffer>TestInitializer.getStreamValue("replacePresentationTextOnline", "document");
        let varoldValue = <string>TestInitializer.getValue("replacePresentationTextOnline", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replacePresentationTextOnline", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replacePresentationTextOnline", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replacePresentationTextOnline", "password", "string");
        varnewValue = <string>TestInitializer.invalidizeValue(varnewValue, field, "string", "replacePresentationTextOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replacePresentationTextOnline", field, varnewValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationTextOnline(vardocument, varoldValue, varnewValue, varignoreCase, varpassword), "replacePresentationTextOnline", field, varnewValue);
            });
        });
    });

    it("invalid ignoreCase test", () => {
        const field = "ignoreCase";
        let vardocument = <Buffer>TestInitializer.getStreamValue("replacePresentationTextOnline", "document");
        let varoldValue = <string>TestInitializer.getValue("replacePresentationTextOnline", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replacePresentationTextOnline", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replacePresentationTextOnline", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replacePresentationTextOnline", "password", "string");
        varignoreCase = <boolean>TestInitializer.invalidizeValue(varignoreCase, field, "boolean", "replacePresentationTextOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replacePresentationTextOnline", field, varignoreCase).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationTextOnline(vardocument, varoldValue, varnewValue, varignoreCase, varpassword), "replacePresentationTextOnline", field, varignoreCase);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("replacePresentationTextOnline", "document");
        let varoldValue = <string>TestInitializer.getValue("replacePresentationTextOnline", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replacePresentationTextOnline", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replacePresentationTextOnline", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replacePresentationTextOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "replacePresentationTextOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replacePresentationTextOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replacePresentationTextOnline(vardocument, varoldValue, varnewValue, varignoreCase, varpassword), "replacePresentationTextOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for replaceSlideText", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("replaceSlideText", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("replaceSlideText", "slideIndex", "number");
            let varoldValue = <string>TestInitializer.getValue("replaceSlideText", "oldValue", "string");
            let varnewValue = <string>TestInitializer.getValue("replaceSlideText", "newValue", "string");
            let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideText", "ignoreCase", "boolean");
            let varpassword = <string>TestInitializer.getValue("replaceSlideText", "password", "string");
            let varfolder = <string>TestInitializer.getValue("replaceSlideText", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("replaceSlideText", "storage", "string");
            return TestInitializer.initialize("replaceSlideText", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), false, "replaceSlideText");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("replaceSlideText", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("replaceSlideText", "slideIndex", "number");
        let varoldValue = <string>TestInitializer.getValue("replaceSlideText", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replaceSlideText", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideText", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replaceSlideText", "password", "string");
        let varfolder = <string>TestInitializer.getValue("replaceSlideText", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("replaceSlideText", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "replaceSlideText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replaceSlideText", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "replaceSlideText", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("replaceSlideText", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("replaceSlideText", "slideIndex", "number");
        let varoldValue = <string>TestInitializer.getValue("replaceSlideText", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replaceSlideText", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideText", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replaceSlideText", "password", "string");
        let varfolder = <string>TestInitializer.getValue("replaceSlideText", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("replaceSlideText", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "replaceSlideText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replaceSlideText", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "replaceSlideText", field, varslideIndex);
            });
        });
    });

    it("invalid oldValue test", () => {
        const field = "oldValue";
        let varname = <string>TestInitializer.getValue("replaceSlideText", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("replaceSlideText", "slideIndex", "number");
        let varoldValue = <string>TestInitializer.getValue("replaceSlideText", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replaceSlideText", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideText", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replaceSlideText", "password", "string");
        let varfolder = <string>TestInitializer.getValue("replaceSlideText", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("replaceSlideText", "storage", "string");
        varoldValue = <string>TestInitializer.invalidizeValue(varoldValue, field, "string", "replaceSlideText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replaceSlideText", field, varoldValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "replaceSlideText", field, varoldValue);
            });
        });
    });

    it("invalid newValue test", () => {
        const field = "newValue";
        let varname = <string>TestInitializer.getValue("replaceSlideText", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("replaceSlideText", "slideIndex", "number");
        let varoldValue = <string>TestInitializer.getValue("replaceSlideText", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replaceSlideText", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideText", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replaceSlideText", "password", "string");
        let varfolder = <string>TestInitializer.getValue("replaceSlideText", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("replaceSlideText", "storage", "string");
        varnewValue = <string>TestInitializer.invalidizeValue(varnewValue, field, "string", "replaceSlideText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replaceSlideText", field, varnewValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "replaceSlideText", field, varnewValue);
            });
        });
    });

    it("invalid ignoreCase test", () => {
        const field = "ignoreCase";
        let varname = <string>TestInitializer.getValue("replaceSlideText", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("replaceSlideText", "slideIndex", "number");
        let varoldValue = <string>TestInitializer.getValue("replaceSlideText", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replaceSlideText", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideText", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replaceSlideText", "password", "string");
        let varfolder = <string>TestInitializer.getValue("replaceSlideText", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("replaceSlideText", "storage", "string");
        varignoreCase = <boolean>TestInitializer.invalidizeValue(varignoreCase, field, "boolean", "replaceSlideText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replaceSlideText", field, varignoreCase).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "replaceSlideText", field, varignoreCase);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("replaceSlideText", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("replaceSlideText", "slideIndex", "number");
        let varoldValue = <string>TestInitializer.getValue("replaceSlideText", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replaceSlideText", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideText", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replaceSlideText", "password", "string");
        let varfolder = <string>TestInitializer.getValue("replaceSlideText", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("replaceSlideText", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "replaceSlideText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replaceSlideText", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "replaceSlideText", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("replaceSlideText", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("replaceSlideText", "slideIndex", "number");
        let varoldValue = <string>TestInitializer.getValue("replaceSlideText", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replaceSlideText", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideText", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replaceSlideText", "password", "string");
        let varfolder = <string>TestInitializer.getValue("replaceSlideText", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("replaceSlideText", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "replaceSlideText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replaceSlideText", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "replaceSlideText", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("replaceSlideText", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("replaceSlideText", "slideIndex", "number");
        let varoldValue = <string>TestInitializer.getValue("replaceSlideText", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replaceSlideText", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideText", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replaceSlideText", "password", "string");
        let varfolder = <string>TestInitializer.getValue("replaceSlideText", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("replaceSlideText", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "replaceSlideText");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replaceSlideText", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideText(varname, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword, varfolder, varstorage), "replaceSlideText", field, varstorage);
            });
        });
    });
});

describe("Tests for replaceSlideTextOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("replaceSlideTextOnline", "document");
            let varslideIndex = <number>TestInitializer.getValue("replaceSlideTextOnline", "slideIndex", "number");
            let varoldValue = <string>TestInitializer.getValue("replaceSlideTextOnline", "oldValue", "string");
            let varnewValue = <string>TestInitializer.getValue("replaceSlideTextOnline", "newValue", "string");
            let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideTextOnline", "ignoreCase", "boolean");
            let varpassword = <string>TestInitializer.getValue("replaceSlideTextOnline", "password", "string");
            return TestInitializer.initialize("replaceSlideTextOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().replaceSlideTextOnline(vardocument, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword), true, "replaceSlideTextOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("replaceSlideTextOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("replaceSlideTextOnline", "slideIndex", "number");
        let varoldValue = <string>TestInitializer.getValue("replaceSlideTextOnline", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replaceSlideTextOnline", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideTextOnline", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replaceSlideTextOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "replaceSlideTextOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replaceSlideTextOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideTextOnline(vardocument, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword), "replaceSlideTextOnline", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("replaceSlideTextOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("replaceSlideTextOnline", "slideIndex", "number");
        let varoldValue = <string>TestInitializer.getValue("replaceSlideTextOnline", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replaceSlideTextOnline", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideTextOnline", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replaceSlideTextOnline", "password", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "replaceSlideTextOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replaceSlideTextOnline", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideTextOnline(vardocument, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword), "replaceSlideTextOnline", field, varslideIndex);
            });
        });
    });

    it("invalid oldValue test", () => {
        const field = "oldValue";
        let vardocument = <Buffer>TestInitializer.getStreamValue("replaceSlideTextOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("replaceSlideTextOnline", "slideIndex", "number");
        let varoldValue = <string>TestInitializer.getValue("replaceSlideTextOnline", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replaceSlideTextOnline", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideTextOnline", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replaceSlideTextOnline", "password", "string");
        varoldValue = <string>TestInitializer.invalidizeValue(varoldValue, field, "string", "replaceSlideTextOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replaceSlideTextOnline", field, varoldValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideTextOnline(vardocument, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword), "replaceSlideTextOnline", field, varoldValue);
            });
        });
    });

    it("invalid newValue test", () => {
        const field = "newValue";
        let vardocument = <Buffer>TestInitializer.getStreamValue("replaceSlideTextOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("replaceSlideTextOnline", "slideIndex", "number");
        let varoldValue = <string>TestInitializer.getValue("replaceSlideTextOnline", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replaceSlideTextOnline", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideTextOnline", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replaceSlideTextOnline", "password", "string");
        varnewValue = <string>TestInitializer.invalidizeValue(varnewValue, field, "string", "replaceSlideTextOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replaceSlideTextOnline", field, varnewValue).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideTextOnline(vardocument, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword), "replaceSlideTextOnline", field, varnewValue);
            });
        });
    });

    it("invalid ignoreCase test", () => {
        const field = "ignoreCase";
        let vardocument = <Buffer>TestInitializer.getStreamValue("replaceSlideTextOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("replaceSlideTextOnline", "slideIndex", "number");
        let varoldValue = <string>TestInitializer.getValue("replaceSlideTextOnline", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replaceSlideTextOnline", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideTextOnline", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replaceSlideTextOnline", "password", "string");
        varignoreCase = <boolean>TestInitializer.invalidizeValue(varignoreCase, field, "boolean", "replaceSlideTextOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replaceSlideTextOnline", field, varignoreCase).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideTextOnline(vardocument, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword), "replaceSlideTextOnline", field, varignoreCase);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("replaceSlideTextOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("replaceSlideTextOnline", "slideIndex", "number");
        let varoldValue = <string>TestInitializer.getValue("replaceSlideTextOnline", "oldValue", "string");
        let varnewValue = <string>TestInitializer.getValue("replaceSlideTextOnline", "newValue", "string");
        let varignoreCase = <boolean>TestInitializer.getValue("replaceSlideTextOnline", "ignoreCase", "boolean");
        let varpassword = <string>TestInitializer.getValue("replaceSlideTextOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "replaceSlideTextOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("replaceSlideTextOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().replaceSlideTextOnline(vardocument, varslideIndex, varoldValue, varnewValue, varignoreCase, varpassword), "replaceSlideTextOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for saveNotesSlideShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("saveNotesSlideShape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "shapeIndex", "number");
            let varformat = <string>TestInitializer.getValue("saveNotesSlideShape", "format", "string");
            let varoutPath = <string>TestInitializer.getValue("saveNotesSlideShape", "outPath", "string");
            let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveNotesSlideShape", "options", "IShapeExportOptions");
            let varscaleX = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleX", "number");
            let varscaleY = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleY", "number");
            let varbounds = <string>TestInitializer.getValue("saveNotesSlideShape", "bounds", "string");
            let varpassword = <string>TestInitializer.getValue("saveNotesSlideShape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("saveNotesSlideShape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("saveNotesSlideShape", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("saveNotesSlideShape", "fontsFolder", "string");
            return TestInitializer.initialize("saveNotesSlideShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), false, "saveNotesSlideShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("saveNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveNotesSlideShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveNotesSlideShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveNotesSlideShape", "fontsFolder", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "saveNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveNotesSlideShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveNotesSlideShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("saveNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveNotesSlideShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveNotesSlideShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveNotesSlideShape", "fontsFolder", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "saveNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveNotesSlideShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveNotesSlideShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("saveNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveNotesSlideShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveNotesSlideShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveNotesSlideShape", "fontsFolder", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "saveNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveNotesSlideShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveNotesSlideShape", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("saveNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveNotesSlideShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveNotesSlideShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveNotesSlideShape", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "saveNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveNotesSlideShape", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveNotesSlideShape", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let varname = <string>TestInitializer.getValue("saveNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveNotesSlideShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveNotesSlideShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveNotesSlideShape", "fontsFolder", "string");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "saveNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveNotesSlideShape", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveNotesSlideShape", field, varoutPath);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("saveNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveNotesSlideShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveNotesSlideShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveNotesSlideShape", "fontsFolder", "string");
        varoptions = <model.IShapeExportOptions>TestInitializer.invalidizeValue(varoptions, field, "IShapeExportOptions", "saveNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveNotesSlideShape", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveNotesSlideShape", field, varoptions);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let varname = <string>TestInitializer.getValue("saveNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveNotesSlideShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveNotesSlideShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveNotesSlideShape", "fontsFolder", "string");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "saveNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveNotesSlideShape", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveNotesSlideShape", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let varname = <string>TestInitializer.getValue("saveNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveNotesSlideShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveNotesSlideShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveNotesSlideShape", "fontsFolder", "string");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "saveNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveNotesSlideShape", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveNotesSlideShape", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let varname = <string>TestInitializer.getValue("saveNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveNotesSlideShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveNotesSlideShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveNotesSlideShape", "fontsFolder", "string");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "saveNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveNotesSlideShape", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveNotesSlideShape", field, varbounds);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("saveNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveNotesSlideShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveNotesSlideShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveNotesSlideShape", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "saveNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveNotesSlideShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveNotesSlideShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("saveNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveNotesSlideShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveNotesSlideShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveNotesSlideShape", "fontsFolder", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "saveNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveNotesSlideShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveNotesSlideShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("saveNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveNotesSlideShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveNotesSlideShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveNotesSlideShape", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "saveNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveNotesSlideShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveNotesSlideShape", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("saveNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveNotesSlideShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveNotesSlideShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveNotesSlideShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveNotesSlideShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveNotesSlideShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveNotesSlideShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveNotesSlideShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveNotesSlideShape", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "saveNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveNotesSlideShape", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveNotesSlideShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveNotesSlideShape", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for savePresentation", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("savePresentation", "name", "string");
            let varformat = <string>TestInitializer.getValue("savePresentation", "format", "string");
            let varoutPath = <string>TestInitializer.getValue("savePresentation", "outPath", "string");
            let varoptions = <model.ExportOptions>TestInitializer.getValue("savePresentation", "options", "ExportOptions");
            let varpassword = <string>TestInitializer.getValue("savePresentation", "password", "string");
            let varfolder = <string>TestInitializer.getValue("savePresentation", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("savePresentation", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("savePresentation", "fontsFolder", "string");
            return TestInitializer.initialize("savePresentation", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), false, "savePresentation");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("savePresentation", "name", "string");
        let varformat = <string>TestInitializer.getValue("savePresentation", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("savePresentation", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("savePresentation", "options", "ExportOptions");
        let varpassword = <string>TestInitializer.getValue("savePresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("savePresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("savePresentation", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("savePresentation", "fontsFolder", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "savePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("savePresentation", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "savePresentation", field, varname);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("savePresentation", "name", "string");
        let varformat = <string>TestInitializer.getValue("savePresentation", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("savePresentation", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("savePresentation", "options", "ExportOptions");
        let varpassword = <string>TestInitializer.getValue("savePresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("savePresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("savePresentation", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("savePresentation", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "savePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("savePresentation", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "savePresentation", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let varname = <string>TestInitializer.getValue("savePresentation", "name", "string");
        let varformat = <string>TestInitializer.getValue("savePresentation", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("savePresentation", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("savePresentation", "options", "ExportOptions");
        let varpassword = <string>TestInitializer.getValue("savePresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("savePresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("savePresentation", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("savePresentation", "fontsFolder", "string");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "savePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("savePresentation", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "savePresentation", field, varoutPath);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("savePresentation", "name", "string");
        let varformat = <string>TestInitializer.getValue("savePresentation", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("savePresentation", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("savePresentation", "options", "ExportOptions");
        let varpassword = <string>TestInitializer.getValue("savePresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("savePresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("savePresentation", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("savePresentation", "fontsFolder", "string");
        varoptions = <model.ExportOptions>TestInitializer.invalidizeValue(varoptions, field, "ExportOptions", "savePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("savePresentation", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "savePresentation", field, varoptions);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("savePresentation", "name", "string");
        let varformat = <string>TestInitializer.getValue("savePresentation", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("savePresentation", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("savePresentation", "options", "ExportOptions");
        let varpassword = <string>TestInitializer.getValue("savePresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("savePresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("savePresentation", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("savePresentation", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "savePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("savePresentation", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "savePresentation", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("savePresentation", "name", "string");
        let varformat = <string>TestInitializer.getValue("savePresentation", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("savePresentation", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("savePresentation", "options", "ExportOptions");
        let varpassword = <string>TestInitializer.getValue("savePresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("savePresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("savePresentation", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("savePresentation", "fontsFolder", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "savePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("savePresentation", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "savePresentation", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("savePresentation", "name", "string");
        let varformat = <string>TestInitializer.getValue("savePresentation", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("savePresentation", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("savePresentation", "options", "ExportOptions");
        let varpassword = <string>TestInitializer.getValue("savePresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("savePresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("savePresentation", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("savePresentation", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "savePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("savePresentation", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "savePresentation", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("savePresentation", "name", "string");
        let varformat = <string>TestInitializer.getValue("savePresentation", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("savePresentation", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("savePresentation", "options", "ExportOptions");
        let varpassword = <string>TestInitializer.getValue("savePresentation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("savePresentation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("savePresentation", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("savePresentation", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "savePresentation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("savePresentation", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().savePresentation(varname, varformat, varoutPath, varoptions, varpassword, varfolder, varstorage, varfontsFolder), "savePresentation", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for saveShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("saveShape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("saveShape", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("saveShape", "shapeIndex", "number");
            let varformat = <string>TestInitializer.getValue("saveShape", "format", "string");
            let varoutPath = <string>TestInitializer.getValue("saveShape", "outPath", "string");
            let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveShape", "options", "IShapeExportOptions");
            let varscaleX = <number>TestInitializer.getValue("saveShape", "scaleX", "number");
            let varscaleY = <number>TestInitializer.getValue("saveShape", "scaleY", "number");
            let varbounds = <string>TestInitializer.getValue("saveShape", "bounds", "string");
            let varpassword = <string>TestInitializer.getValue("saveShape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("saveShape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("saveShape", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("saveShape", "fontsFolder", "string");
            return TestInitializer.initialize("saveShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), false, "saveShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("saveShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShape", "fontsFolder", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "saveShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("saveShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShape", "fontsFolder", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "saveShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("saveShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShape", "fontsFolder", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "saveShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveShape", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("saveShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShape", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "saveShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShape", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveShape", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let varname = <string>TestInitializer.getValue("saveShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShape", "fontsFolder", "string");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "saveShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShape", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveShape", field, varoutPath);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("saveShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShape", "fontsFolder", "string");
        varoptions = <model.IShapeExportOptions>TestInitializer.invalidizeValue(varoptions, field, "IShapeExportOptions", "saveShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShape", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveShape", field, varoptions);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let varname = <string>TestInitializer.getValue("saveShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShape", "fontsFolder", "string");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "saveShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShape", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveShape", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let varname = <string>TestInitializer.getValue("saveShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShape", "fontsFolder", "string");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "saveShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShape", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveShape", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let varname = <string>TestInitializer.getValue("saveShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShape", "fontsFolder", "string");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "saveShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShape", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveShape", field, varbounds);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("saveShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShape", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "saveShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("saveShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShape", "fontsFolder", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "saveShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("saveShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShape", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "saveShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveShape", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("saveShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveShape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveShape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveShape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShape", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "saveShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShape", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShape(varname, varslideIndex, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveShape", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for saveShapeOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("saveShapeOnline", "document");
            let varslideIndex = <number>TestInitializer.getValue("saveShapeOnline", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("saveShapeOnline", "shapeIndex", "number");
            let varformat = <string>TestInitializer.getValue("saveShapeOnline", "format", "string");
            let varoutPath = <string>TestInitializer.getValue("saveShapeOnline", "outPath", "string");
            let varscaleX = <number>TestInitializer.getValue("saveShapeOnline", "scaleX", "number");
            let varscaleY = <number>TestInitializer.getValue("saveShapeOnline", "scaleY", "number");
            let varbounds = <string>TestInitializer.getValue("saveShapeOnline", "bounds", "string");
            let varpassword = <string>TestInitializer.getValue("saveShapeOnline", "password", "string");
            let varstorage = <string>TestInitializer.getValue("saveShapeOnline", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("saveShapeOnline", "fontsFolder", "string");
            return TestInitializer.initialize("saveShapeOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), false, "saveShapeOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShapeOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShapeOnline", "outPath", "string");
        let varscaleX = <number>TestInitializer.getValue("saveShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShapeOnline", "fontsFolder", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "saveShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShapeOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "saveShapeOnline", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShapeOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShapeOnline", "outPath", "string");
        let varscaleX = <number>TestInitializer.getValue("saveShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShapeOnline", "fontsFolder", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "saveShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShapeOnline", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "saveShapeOnline", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShapeOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShapeOnline", "outPath", "string");
        let varscaleX = <number>TestInitializer.getValue("saveShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShapeOnline", "fontsFolder", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "saveShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShapeOnline", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "saveShapeOnline", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShapeOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShapeOnline", "outPath", "string");
        let varscaleX = <number>TestInitializer.getValue("saveShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShapeOnline", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "saveShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShapeOnline", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "saveShapeOnline", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShapeOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShapeOnline", "outPath", "string");
        let varscaleX = <number>TestInitializer.getValue("saveShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShapeOnline", "fontsFolder", "string");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "saveShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShapeOnline", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "saveShapeOnline", field, varoutPath);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShapeOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShapeOnline", "outPath", "string");
        let varscaleX = <number>TestInitializer.getValue("saveShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShapeOnline", "fontsFolder", "string");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "saveShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShapeOnline", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "saveShapeOnline", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShapeOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShapeOnline", "outPath", "string");
        let varscaleX = <number>TestInitializer.getValue("saveShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShapeOnline", "fontsFolder", "string");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "saveShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShapeOnline", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "saveShapeOnline", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShapeOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShapeOnline", "outPath", "string");
        let varscaleX = <number>TestInitializer.getValue("saveShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShapeOnline", "fontsFolder", "string");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "saveShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShapeOnline", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "saveShapeOnline", field, varbounds);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShapeOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShapeOnline", "outPath", "string");
        let varscaleX = <number>TestInitializer.getValue("saveShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShapeOnline", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "saveShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShapeOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "saveShapeOnline", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShapeOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShapeOnline", "outPath", "string");
        let varscaleX = <number>TestInitializer.getValue("saveShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShapeOnline", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "saveShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShapeOnline", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "saveShapeOnline", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveShapeOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveShapeOnline", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("saveShapeOnline", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveShapeOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveShapeOnline", "outPath", "string");
        let varscaleX = <number>TestInitializer.getValue("saveShapeOnline", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveShapeOnline", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveShapeOnline", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveShapeOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveShapeOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveShapeOnline", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "saveShapeOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveShapeOnline", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveShapeOnline(vardocument, varslideIndex, varshapeIndex, varformat, varoutPath, varscaleX, varscaleY, varbounds, varpassword, varstorage, varfontsFolder), "saveShapeOnline", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for saveSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("saveSlide", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("saveSlide", "slideIndex", "number");
            let varformat = <string>TestInitializer.getValue("saveSlide", "format", "string");
            let varoutPath = <string>TestInitializer.getValue("saveSlide", "outPath", "string");
            let varoptions = <model.ExportOptions>TestInitializer.getValue("saveSlide", "options", "ExportOptions");
            let varwidth = <number>TestInitializer.getValue("saveSlide", "width", "number");
            let varheight = <number>TestInitializer.getValue("saveSlide", "height", "number");
            let varpassword = <string>TestInitializer.getValue("saveSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("saveSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("saveSlide", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("saveSlide", "fontsFolder", "string");
            return TestInitializer.initialize("saveSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), false, "saveSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("saveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlide", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlide", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("saveSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("saveSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlide", "fontsFolder", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "saveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "saveSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("saveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlide", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlide", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("saveSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("saveSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlide", "fontsFolder", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "saveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "saveSlide", field, varslideIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("saveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlide", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlide", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("saveSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("saveSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlide", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "saveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlide", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "saveSlide", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let varname = <string>TestInitializer.getValue("saveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlide", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlide", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("saveSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("saveSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlide", "fontsFolder", "string");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "saveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlide", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "saveSlide", field, varoutPath);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("saveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlide", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlide", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("saveSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("saveSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlide", "fontsFolder", "string");
        varoptions = <model.ExportOptions>TestInitializer.invalidizeValue(varoptions, field, "ExportOptions", "saveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlide", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "saveSlide", field, varoptions);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let varname = <string>TestInitializer.getValue("saveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlide", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlide", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("saveSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("saveSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlide", "fontsFolder", "string");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "saveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlide", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "saveSlide", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let varname = <string>TestInitializer.getValue("saveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlide", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlide", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("saveSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("saveSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlide", "fontsFolder", "string");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "saveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlide", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "saveSlide", field, varheight);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("saveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlide", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlide", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("saveSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("saveSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlide", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "saveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "saveSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("saveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlide", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlide", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("saveSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("saveSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlide", "fontsFolder", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "saveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "saveSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("saveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlide", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlide", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("saveSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("saveSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlide", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "saveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "saveSlide", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("saveSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSlide", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlide", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlide", "outPath", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("saveSlide", "options", "ExportOptions");
        let varwidth = <number>TestInitializer.getValue("saveSlide", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlide", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlide", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlide", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "saveSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlide", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlide(varname, varslideIndex, varformat, varoutPath, varoptions, varwidth, varheight, varpassword, varfolder, varstorage, varfontsFolder), "saveSlide", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for saveSlideOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("saveSlideOnline", "document");
            let varslideIndex = <number>TestInitializer.getValue("saveSlideOnline", "slideIndex", "number");
            let varformat = <string>TestInitializer.getValue("saveSlideOnline", "format", "string");
            let varoutPath = <string>TestInitializer.getValue("saveSlideOnline", "outPath", "string");
            let varwidth = <number>TestInitializer.getValue("saveSlideOnline", "width", "number");
            let varheight = <number>TestInitializer.getValue("saveSlideOnline", "height", "number");
            let varpassword = <string>TestInitializer.getValue("saveSlideOnline", "password", "string");
            let varstorage = <string>TestInitializer.getValue("saveSlideOnline", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("saveSlideOnline", "fontsFolder", "string");
            return TestInitializer.initialize("saveSlideOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), false, "saveSlideOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlideOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlideOnline", "outPath", "string");
        let varwidth = <number>TestInitializer.getValue("saveSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlideOnline", "fontsFolder", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "saveSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlideOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "saveSlideOnline", field, vardocument);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlideOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlideOnline", "outPath", "string");
        let varwidth = <number>TestInitializer.getValue("saveSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlideOnline", "fontsFolder", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "saveSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlideOnline", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "saveSlideOnline", field, varslideIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlideOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlideOnline", "outPath", "string");
        let varwidth = <number>TestInitializer.getValue("saveSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlideOnline", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "saveSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlideOnline", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "saveSlideOnline", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlideOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlideOnline", "outPath", "string");
        let varwidth = <number>TestInitializer.getValue("saveSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlideOnline", "fontsFolder", "string");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "saveSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlideOnline", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "saveSlideOnline", field, varoutPath);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlideOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlideOnline", "outPath", "string");
        let varwidth = <number>TestInitializer.getValue("saveSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlideOnline", "fontsFolder", "string");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "saveSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlideOnline", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "saveSlideOnline", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlideOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlideOnline", "outPath", "string");
        let varwidth = <number>TestInitializer.getValue("saveSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlideOnline", "fontsFolder", "string");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "saveSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlideOnline", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "saveSlideOnline", field, varheight);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlideOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlideOnline", "outPath", "string");
        let varwidth = <number>TestInitializer.getValue("saveSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlideOnline", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "saveSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlideOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "saveSlideOnline", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlideOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlideOnline", "outPath", "string");
        let varwidth = <number>TestInitializer.getValue("saveSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlideOnline", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "saveSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlideOnline", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "saveSlideOnline", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("saveSlideOnline", "document");
        let varslideIndex = <number>TestInitializer.getValue("saveSlideOnline", "slideIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSlideOnline", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSlideOnline", "outPath", "string");
        let varwidth = <number>TestInitializer.getValue("saveSlideOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("saveSlideOnline", "height", "number");
        let varpassword = <string>TestInitializer.getValue("saveSlideOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("saveSlideOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSlideOnline", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "saveSlideOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSlideOnline", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSlideOnline(vardocument, varslideIndex, varformat, varoutPath, varwidth, varheight, varpassword, varstorage, varfontsFolder), "saveSlideOnline", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for saveSubshape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("saveSubshape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("saveSubshape", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("saveSubshape", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("saveSubshape", "shapeIndex", "number");
            let varformat = <string>TestInitializer.getValue("saveSubshape", "format", "string");
            let varoutPath = <string>TestInitializer.getValue("saveSubshape", "outPath", "string");
            let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveSubshape", "options", "IShapeExportOptions");
            let varscaleX = <number>TestInitializer.getValue("saveSubshape", "scaleX", "number");
            let varscaleY = <number>TestInitializer.getValue("saveSubshape", "scaleY", "number");
            let varbounds = <string>TestInitializer.getValue("saveSubshape", "bounds", "string");
            let varpassword = <string>TestInitializer.getValue("saveSubshape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("saveSubshape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("saveSubshape", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("saveSubshape", "fontsFolder", "string");
            return TestInitializer.initialize("saveSubshape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), false, "saveSubshape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("saveSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("saveSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("saveSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSubshape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSubshape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSubshape", "fontsFolder", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "saveSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSubshape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveSubshape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("saveSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("saveSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("saveSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSubshape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSubshape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSubshape", "fontsFolder", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "saveSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSubshape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveSubshape", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("saveSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("saveSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("saveSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSubshape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSubshape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSubshape", "fontsFolder", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "saveSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSubshape", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveSubshape", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("saveSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("saveSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("saveSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSubshape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSubshape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSubshape", "fontsFolder", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "saveSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSubshape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveSubshape", field, varshapeIndex);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("saveSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("saveSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("saveSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSubshape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSubshape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSubshape", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "saveSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSubshape", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveSubshape", field, varformat);
            });
        });
    });

    it("invalid outPath test", () => {
        const field = "outPath";
        let varname = <string>TestInitializer.getValue("saveSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("saveSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("saveSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSubshape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSubshape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSubshape", "fontsFolder", "string");
        varoutPath = <string>TestInitializer.invalidizeValue(varoutPath, field, "string", "saveSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSubshape", field, varoutPath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveSubshape", field, varoutPath);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("saveSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("saveSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("saveSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSubshape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSubshape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSubshape", "fontsFolder", "string");
        varoptions = <model.IShapeExportOptions>TestInitializer.invalidizeValue(varoptions, field, "IShapeExportOptions", "saveSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSubshape", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveSubshape", field, varoptions);
            });
        });
    });

    it("invalid scaleX test", () => {
        const field = "scaleX";
        let varname = <string>TestInitializer.getValue("saveSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("saveSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("saveSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSubshape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSubshape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSubshape", "fontsFolder", "string");
        varscaleX = <number>TestInitializer.invalidizeValue(varscaleX, field, "number", "saveSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSubshape", field, varscaleX).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveSubshape", field, varscaleX);
            });
        });
    });

    it("invalid scaleY test", () => {
        const field = "scaleY";
        let varname = <string>TestInitializer.getValue("saveSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("saveSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("saveSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSubshape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSubshape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSubshape", "fontsFolder", "string");
        varscaleY = <number>TestInitializer.invalidizeValue(varscaleY, field, "number", "saveSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSubshape", field, varscaleY).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveSubshape", field, varscaleY);
            });
        });
    });

    it("invalid bounds test", () => {
        const field = "bounds";
        let varname = <string>TestInitializer.getValue("saveSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("saveSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("saveSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSubshape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSubshape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSubshape", "fontsFolder", "string");
        varbounds = <string>TestInitializer.invalidizeValue(varbounds, field, "string", "saveSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSubshape", field, varbounds).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveSubshape", field, varbounds);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("saveSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("saveSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("saveSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSubshape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSubshape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSubshape", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "saveSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSubshape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveSubshape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("saveSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("saveSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("saveSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSubshape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSubshape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSubshape", "fontsFolder", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "saveSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSubshape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveSubshape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("saveSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("saveSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("saveSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSubshape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSubshape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSubshape", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "saveSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSubshape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveSubshape", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("saveSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("saveSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("saveSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("saveSubshape", "shapeIndex", "number");
        let varformat = <string>TestInitializer.getValue("saveSubshape", "format", "string");
        let varoutPath = <string>TestInitializer.getValue("saveSubshape", "outPath", "string");
        let varoptions = <model.IShapeExportOptions>TestInitializer.getValue("saveSubshape", "options", "IShapeExportOptions");
        let varscaleX = <number>TestInitializer.getValue("saveSubshape", "scaleX", "number");
        let varscaleY = <number>TestInitializer.getValue("saveSubshape", "scaleY", "number");
        let varbounds = <string>TestInitializer.getValue("saveSubshape", "bounds", "string");
        let varpassword = <string>TestInitializer.getValue("saveSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("saveSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("saveSubshape", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("saveSubshape", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "saveSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("saveSubshape", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().saveSubshape(varname, varslideIndex, varpath, varshapeIndex, varformat, varoutPath, varoptions, varscaleX, varscaleY, varbounds, varpassword, varfolder, varstorage, varfontsFolder), "saveSubshape", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for setAnimation", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("setAnimation", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("setAnimation", "slideIndex", "number");
            let varanimation = <model.SlideAnimation>TestInitializer.getValue("setAnimation", "animation", "SlideAnimation");
            let varpassword = <string>TestInitializer.getValue("setAnimation", "password", "string");
            let varfolder = <string>TestInitializer.getValue("setAnimation", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("setAnimation", "storage", "string");
            return TestInitializer.initialize("setAnimation", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setAnimation(varname, varslideIndex, varanimation, varpassword, varfolder, varstorage), false, "setAnimation");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("setAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setAnimation", "slideIndex", "number");
        let varanimation = <model.SlideAnimation>TestInitializer.getValue("setAnimation", "animation", "SlideAnimation");
        let varpassword = <string>TestInitializer.getValue("setAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setAnimation", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "setAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setAnimation", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setAnimation(varname, varslideIndex, varanimation, varpassword, varfolder, varstorage), "setAnimation", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("setAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setAnimation", "slideIndex", "number");
        let varanimation = <model.SlideAnimation>TestInitializer.getValue("setAnimation", "animation", "SlideAnimation");
        let varpassword = <string>TestInitializer.getValue("setAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setAnimation", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "setAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setAnimation", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setAnimation(varname, varslideIndex, varanimation, varpassword, varfolder, varstorage), "setAnimation", field, varslideIndex);
            });
        });
    });

    it("invalid animation test", () => {
        const field = "animation";
        let varname = <string>TestInitializer.getValue("setAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setAnimation", "slideIndex", "number");
        let varanimation = <model.SlideAnimation>TestInitializer.getValue("setAnimation", "animation", "SlideAnimation");
        let varpassword = <string>TestInitializer.getValue("setAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setAnimation", "storage", "string");
        varanimation = <model.SlideAnimation>TestInitializer.invalidizeValue(varanimation, field, "SlideAnimation", "setAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setAnimation", field, varanimation).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setAnimation(varname, varslideIndex, varanimation, varpassword, varfolder, varstorage), "setAnimation", field, varanimation);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("setAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setAnimation", "slideIndex", "number");
        let varanimation = <model.SlideAnimation>TestInitializer.getValue("setAnimation", "animation", "SlideAnimation");
        let varpassword = <string>TestInitializer.getValue("setAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setAnimation", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "setAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setAnimation", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setAnimation(varname, varslideIndex, varanimation, varpassword, varfolder, varstorage), "setAnimation", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("setAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setAnimation", "slideIndex", "number");
        let varanimation = <model.SlideAnimation>TestInitializer.getValue("setAnimation", "animation", "SlideAnimation");
        let varpassword = <string>TestInitializer.getValue("setAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setAnimation", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "setAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setAnimation", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setAnimation(varname, varslideIndex, varanimation, varpassword, varfolder, varstorage), "setAnimation", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("setAnimation", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setAnimation", "slideIndex", "number");
        let varanimation = <model.SlideAnimation>TestInitializer.getValue("setAnimation", "animation", "SlideAnimation");
        let varpassword = <string>TestInitializer.getValue("setAnimation", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setAnimation", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setAnimation", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "setAnimation");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setAnimation", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setAnimation(varname, varslideIndex, varanimation, varpassword, varfolder, varstorage), "setAnimation", field, varstorage);
            });
        });
    });
});

describe("Tests for setBackground", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("setBackground", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("setBackground", "slideIndex", "number");
            let varbackground = <model.SlideBackground>TestInitializer.getValue("setBackground", "background", "SlideBackground");
            let varpassword = <string>TestInitializer.getValue("setBackground", "password", "string");
            let varfolder = <string>TestInitializer.getValue("setBackground", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("setBackground", "storage", "string");
            return TestInitializer.initialize("setBackground", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setBackground(varname, varslideIndex, varbackground, varpassword, varfolder, varstorage), false, "setBackground");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("setBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setBackground", "slideIndex", "number");
        let varbackground = <model.SlideBackground>TestInitializer.getValue("setBackground", "background", "SlideBackground");
        let varpassword = <string>TestInitializer.getValue("setBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setBackground", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "setBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setBackground", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackground(varname, varslideIndex, varbackground, varpassword, varfolder, varstorage), "setBackground", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("setBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setBackground", "slideIndex", "number");
        let varbackground = <model.SlideBackground>TestInitializer.getValue("setBackground", "background", "SlideBackground");
        let varpassword = <string>TestInitializer.getValue("setBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setBackground", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "setBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setBackground", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackground(varname, varslideIndex, varbackground, varpassword, varfolder, varstorage), "setBackground", field, varslideIndex);
            });
        });
    });

    it("invalid background test", () => {
        const field = "background";
        let varname = <string>TestInitializer.getValue("setBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setBackground", "slideIndex", "number");
        let varbackground = <model.SlideBackground>TestInitializer.getValue("setBackground", "background", "SlideBackground");
        let varpassword = <string>TestInitializer.getValue("setBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setBackground", "storage", "string");
        varbackground = <model.SlideBackground>TestInitializer.invalidizeValue(varbackground, field, "SlideBackground", "setBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setBackground", field, varbackground).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackground(varname, varslideIndex, varbackground, varpassword, varfolder, varstorage), "setBackground", field, varbackground);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("setBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setBackground", "slideIndex", "number");
        let varbackground = <model.SlideBackground>TestInitializer.getValue("setBackground", "background", "SlideBackground");
        let varpassword = <string>TestInitializer.getValue("setBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setBackground", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "setBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setBackground", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackground(varname, varslideIndex, varbackground, varpassword, varfolder, varstorage), "setBackground", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("setBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setBackground", "slideIndex", "number");
        let varbackground = <model.SlideBackground>TestInitializer.getValue("setBackground", "background", "SlideBackground");
        let varpassword = <string>TestInitializer.getValue("setBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setBackground", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "setBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setBackground", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackground(varname, varslideIndex, varbackground, varpassword, varfolder, varstorage), "setBackground", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("setBackground", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setBackground", "slideIndex", "number");
        let varbackground = <model.SlideBackground>TestInitializer.getValue("setBackground", "background", "SlideBackground");
        let varpassword = <string>TestInitializer.getValue("setBackground", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setBackground", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setBackground", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "setBackground");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setBackground", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackground(varname, varslideIndex, varbackground, varpassword, varfolder, varstorage), "setBackground", field, varstorage);
            });
        });
    });
});

describe("Tests for setBackgroundColor", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("setBackgroundColor", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("setBackgroundColor", "slideIndex", "number");
            let varcolor = <string>TestInitializer.getValue("setBackgroundColor", "color", "string");
            let varpassword = <string>TestInitializer.getValue("setBackgroundColor", "password", "string");
            let varfolder = <string>TestInitializer.getValue("setBackgroundColor", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("setBackgroundColor", "storage", "string");
            return TestInitializer.initialize("setBackgroundColor", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setBackgroundColor(varname, varslideIndex, varcolor, varpassword, varfolder, varstorage), false, "setBackgroundColor");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("setBackgroundColor", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setBackgroundColor", "slideIndex", "number");
        let varcolor = <string>TestInitializer.getValue("setBackgroundColor", "color", "string");
        let varpassword = <string>TestInitializer.getValue("setBackgroundColor", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setBackgroundColor", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setBackgroundColor", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "setBackgroundColor");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setBackgroundColor", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackgroundColor(varname, varslideIndex, varcolor, varpassword, varfolder, varstorage), "setBackgroundColor", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("setBackgroundColor", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setBackgroundColor", "slideIndex", "number");
        let varcolor = <string>TestInitializer.getValue("setBackgroundColor", "color", "string");
        let varpassword = <string>TestInitializer.getValue("setBackgroundColor", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setBackgroundColor", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setBackgroundColor", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "setBackgroundColor");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setBackgroundColor", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackgroundColor(varname, varslideIndex, varcolor, varpassword, varfolder, varstorage), "setBackgroundColor", field, varslideIndex);
            });
        });
    });

    it("invalid color test", () => {
        const field = "color";
        let varname = <string>TestInitializer.getValue("setBackgroundColor", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setBackgroundColor", "slideIndex", "number");
        let varcolor = <string>TestInitializer.getValue("setBackgroundColor", "color", "string");
        let varpassword = <string>TestInitializer.getValue("setBackgroundColor", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setBackgroundColor", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setBackgroundColor", "storage", "string");
        varcolor = <string>TestInitializer.invalidizeValue(varcolor, field, "string", "setBackgroundColor");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setBackgroundColor", field, varcolor).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackgroundColor(varname, varslideIndex, varcolor, varpassword, varfolder, varstorage), "setBackgroundColor", field, varcolor);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("setBackgroundColor", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setBackgroundColor", "slideIndex", "number");
        let varcolor = <string>TestInitializer.getValue("setBackgroundColor", "color", "string");
        let varpassword = <string>TestInitializer.getValue("setBackgroundColor", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setBackgroundColor", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setBackgroundColor", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "setBackgroundColor");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setBackgroundColor", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackgroundColor(varname, varslideIndex, varcolor, varpassword, varfolder, varstorage), "setBackgroundColor", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("setBackgroundColor", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setBackgroundColor", "slideIndex", "number");
        let varcolor = <string>TestInitializer.getValue("setBackgroundColor", "color", "string");
        let varpassword = <string>TestInitializer.getValue("setBackgroundColor", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setBackgroundColor", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setBackgroundColor", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "setBackgroundColor");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setBackgroundColor", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackgroundColor(varname, varslideIndex, varcolor, varpassword, varfolder, varstorage), "setBackgroundColor", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("setBackgroundColor", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setBackgroundColor", "slideIndex", "number");
        let varcolor = <string>TestInitializer.getValue("setBackgroundColor", "color", "string");
        let varpassword = <string>TestInitializer.getValue("setBackgroundColor", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setBackgroundColor", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setBackgroundColor", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "setBackgroundColor");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setBackgroundColor", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setBackgroundColor(varname, varslideIndex, varcolor, varpassword, varfolder, varstorage), "setBackgroundColor", field, varstorage);
            });
        });
    });
});

describe("Tests for setDocumentProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("setDocumentProperties", "name", "string");
            let varproperties = <model.DocumentProperties>TestInitializer.getValue("setDocumentProperties", "properties", "DocumentProperties");
            let varpassword = <string>TestInitializer.getValue("setDocumentProperties", "password", "string");
            let varfolder = <string>TestInitializer.getValue("setDocumentProperties", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("setDocumentProperties", "storage", "string");
            return TestInitializer.initialize("setDocumentProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setDocumentProperties(varname, varproperties, varpassword, varfolder, varstorage), false, "setDocumentProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("setDocumentProperties", "name", "string");
        let varproperties = <model.DocumentProperties>TestInitializer.getValue("setDocumentProperties", "properties", "DocumentProperties");
        let varpassword = <string>TestInitializer.getValue("setDocumentProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setDocumentProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setDocumentProperties", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "setDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setDocumentProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperties(varname, varproperties, varpassword, varfolder, varstorage), "setDocumentProperties", field, varname);
            });
        });
    });

    it("invalid properties test", () => {
        const field = "properties";
        let varname = <string>TestInitializer.getValue("setDocumentProperties", "name", "string");
        let varproperties = <model.DocumentProperties>TestInitializer.getValue("setDocumentProperties", "properties", "DocumentProperties");
        let varpassword = <string>TestInitializer.getValue("setDocumentProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setDocumentProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setDocumentProperties", "storage", "string");
        varproperties = <model.DocumentProperties>TestInitializer.invalidizeValue(varproperties, field, "DocumentProperties", "setDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setDocumentProperties", field, varproperties).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperties(varname, varproperties, varpassword, varfolder, varstorage), "setDocumentProperties", field, varproperties);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("setDocumentProperties", "name", "string");
        let varproperties = <model.DocumentProperties>TestInitializer.getValue("setDocumentProperties", "properties", "DocumentProperties");
        let varpassword = <string>TestInitializer.getValue("setDocumentProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setDocumentProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setDocumentProperties", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "setDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setDocumentProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperties(varname, varproperties, varpassword, varfolder, varstorage), "setDocumentProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("setDocumentProperties", "name", "string");
        let varproperties = <model.DocumentProperties>TestInitializer.getValue("setDocumentProperties", "properties", "DocumentProperties");
        let varpassword = <string>TestInitializer.getValue("setDocumentProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setDocumentProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setDocumentProperties", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "setDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setDocumentProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperties(varname, varproperties, varpassword, varfolder, varstorage), "setDocumentProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("setDocumentProperties", "name", "string");
        let varproperties = <model.DocumentProperties>TestInitializer.getValue("setDocumentProperties", "properties", "DocumentProperties");
        let varpassword = <string>TestInitializer.getValue("setDocumentProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setDocumentProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setDocumentProperties", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "setDocumentProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setDocumentProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperties(varname, varproperties, varpassword, varfolder, varstorage), "setDocumentProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for setDocumentProperty", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("setDocumentProperty", "name", "string");
            let varpropertyName = <string>TestInitializer.getValue("setDocumentProperty", "propertyName", "string");
            let varproperty = <model.DocumentProperty>TestInitializer.getValue("setDocumentProperty", "property", "DocumentProperty");
            let varpassword = <string>TestInitializer.getValue("setDocumentProperty", "password", "string");
            let varfolder = <string>TestInitializer.getValue("setDocumentProperty", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("setDocumentProperty", "storage", "string");
            return TestInitializer.initialize("setDocumentProperty", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setDocumentProperty(varname, varpropertyName, varproperty, varpassword, varfolder, varstorage), false, "setDocumentProperty");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("setDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("setDocumentProperty", "propertyName", "string");
        let varproperty = <model.DocumentProperty>TestInitializer.getValue("setDocumentProperty", "property", "DocumentProperty");
        let varpassword = <string>TestInitializer.getValue("setDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setDocumentProperty", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "setDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setDocumentProperty", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperty(varname, varpropertyName, varproperty, varpassword, varfolder, varstorage), "setDocumentProperty", field, varname);
            });
        });
    });

    it("invalid propertyName test", () => {
        const field = "propertyName";
        let varname = <string>TestInitializer.getValue("setDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("setDocumentProperty", "propertyName", "string");
        let varproperty = <model.DocumentProperty>TestInitializer.getValue("setDocumentProperty", "property", "DocumentProperty");
        let varpassword = <string>TestInitializer.getValue("setDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setDocumentProperty", "storage", "string");
        varpropertyName = <string>TestInitializer.invalidizeValue(varpropertyName, field, "string", "setDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setDocumentProperty", field, varpropertyName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperty(varname, varpropertyName, varproperty, varpassword, varfolder, varstorage), "setDocumentProperty", field, varpropertyName);
            });
        });
    });

    it("invalid property test", () => {
        const field = "property";
        let varname = <string>TestInitializer.getValue("setDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("setDocumentProperty", "propertyName", "string");
        let varproperty = <model.DocumentProperty>TestInitializer.getValue("setDocumentProperty", "property", "DocumentProperty");
        let varpassword = <string>TestInitializer.getValue("setDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setDocumentProperty", "storage", "string");
        varproperty = <model.DocumentProperty>TestInitializer.invalidizeValue(varproperty, field, "DocumentProperty", "setDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setDocumentProperty", field, varproperty).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperty(varname, varpropertyName, varproperty, varpassword, varfolder, varstorage), "setDocumentProperty", field, varproperty);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("setDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("setDocumentProperty", "propertyName", "string");
        let varproperty = <model.DocumentProperty>TestInitializer.getValue("setDocumentProperty", "property", "DocumentProperty");
        let varpassword = <string>TestInitializer.getValue("setDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setDocumentProperty", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "setDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setDocumentProperty", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperty(varname, varpropertyName, varproperty, varpassword, varfolder, varstorage), "setDocumentProperty", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("setDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("setDocumentProperty", "propertyName", "string");
        let varproperty = <model.DocumentProperty>TestInitializer.getValue("setDocumentProperty", "property", "DocumentProperty");
        let varpassword = <string>TestInitializer.getValue("setDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setDocumentProperty", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "setDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setDocumentProperty", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperty(varname, varpropertyName, varproperty, varpassword, varfolder, varstorage), "setDocumentProperty", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("setDocumentProperty", "name", "string");
        let varpropertyName = <string>TestInitializer.getValue("setDocumentProperty", "propertyName", "string");
        let varproperty = <model.DocumentProperty>TestInitializer.getValue("setDocumentProperty", "property", "DocumentProperty");
        let varpassword = <string>TestInitializer.getValue("setDocumentProperty", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setDocumentProperty", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setDocumentProperty", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "setDocumentProperty");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setDocumentProperty", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setDocumentProperty(varname, varpropertyName, varproperty, varpassword, varfolder, varstorage), "setDocumentProperty", field, varstorage);
            });
        });
    });
});

describe("Tests for setNotesSlideHeaderFooter", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("setNotesSlideHeaderFooter", "slideIndex", "number");
            let vardto = <model.NotesSlideHeaderFooter>TestInitializer.getValue("setNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter");
            let varpassword = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "password", "string");
            let varfolder = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "storage", "string");
            return TestInitializer.initialize("setNotesSlideHeaderFooter", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setNotesSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), false, "setNotesSlideHeaderFooter");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setNotesSlideHeaderFooter", "slideIndex", "number");
        let vardto = <model.NotesSlideHeaderFooter>TestInitializer.getValue("setNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "setNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setNotesSlideHeaderFooter", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setNotesSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "setNotesSlideHeaderFooter", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setNotesSlideHeaderFooter", "slideIndex", "number");
        let vardto = <model.NotesSlideHeaderFooter>TestInitializer.getValue("setNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "setNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setNotesSlideHeaderFooter", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setNotesSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "setNotesSlideHeaderFooter", field, varslideIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setNotesSlideHeaderFooter", "slideIndex", "number");
        let vardto = <model.NotesSlideHeaderFooter>TestInitializer.getValue("setNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "storage", "string");
        vardto = <model.NotesSlideHeaderFooter>TestInitializer.invalidizeValue(vardto, field, "NotesSlideHeaderFooter", "setNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setNotesSlideHeaderFooter", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setNotesSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "setNotesSlideHeaderFooter", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setNotesSlideHeaderFooter", "slideIndex", "number");
        let vardto = <model.NotesSlideHeaderFooter>TestInitializer.getValue("setNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "setNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setNotesSlideHeaderFooter", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setNotesSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "setNotesSlideHeaderFooter", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setNotesSlideHeaderFooter", "slideIndex", "number");
        let vardto = <model.NotesSlideHeaderFooter>TestInitializer.getValue("setNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "setNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setNotesSlideHeaderFooter", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setNotesSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "setNotesSlideHeaderFooter", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setNotesSlideHeaderFooter", "slideIndex", "number");
        let vardto = <model.NotesSlideHeaderFooter>TestInitializer.getValue("setNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setNotesSlideHeaderFooter", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "setNotesSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setNotesSlideHeaderFooter", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setNotesSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "setNotesSlideHeaderFooter", field, varstorage);
            });
        });
    });
});

describe("Tests for setPresentationHeaderFooter", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("setPresentationHeaderFooter", "name", "string");
            let vardto = <model.HeaderFooter>TestInitializer.getValue("setPresentationHeaderFooter", "dto", "HeaderFooter");
            let varpassword = <string>TestInitializer.getValue("setPresentationHeaderFooter", "password", "string");
            let varfolder = <string>TestInitializer.getValue("setPresentationHeaderFooter", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("setPresentationHeaderFooter", "storage", "string");
            return TestInitializer.initialize("setPresentationHeaderFooter", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setPresentationHeaderFooter(varname, vardto, varpassword, varfolder, varstorage), false, "setPresentationHeaderFooter");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("setPresentationHeaderFooter", "name", "string");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("setPresentationHeaderFooter", "dto", "HeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setPresentationHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setPresentationHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setPresentationHeaderFooter", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "setPresentationHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setPresentationHeaderFooter", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setPresentationHeaderFooter(varname, vardto, varpassword, varfolder, varstorage), "setPresentationHeaderFooter", field, varname);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("setPresentationHeaderFooter", "name", "string");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("setPresentationHeaderFooter", "dto", "HeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setPresentationHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setPresentationHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setPresentationHeaderFooter", "storage", "string");
        vardto = <model.HeaderFooter>TestInitializer.invalidizeValue(vardto, field, "HeaderFooter", "setPresentationHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setPresentationHeaderFooter", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setPresentationHeaderFooter(varname, vardto, varpassword, varfolder, varstorage), "setPresentationHeaderFooter", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("setPresentationHeaderFooter", "name", "string");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("setPresentationHeaderFooter", "dto", "HeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setPresentationHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setPresentationHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setPresentationHeaderFooter", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "setPresentationHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setPresentationHeaderFooter", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setPresentationHeaderFooter(varname, vardto, varpassword, varfolder, varstorage), "setPresentationHeaderFooter", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("setPresentationHeaderFooter", "name", "string");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("setPresentationHeaderFooter", "dto", "HeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setPresentationHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setPresentationHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setPresentationHeaderFooter", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "setPresentationHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setPresentationHeaderFooter", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setPresentationHeaderFooter(varname, vardto, varpassword, varfolder, varstorage), "setPresentationHeaderFooter", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("setPresentationHeaderFooter", "name", "string");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("setPresentationHeaderFooter", "dto", "HeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setPresentationHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setPresentationHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setPresentationHeaderFooter", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "setPresentationHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setPresentationHeaderFooter", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setPresentationHeaderFooter(varname, vardto, varpassword, varfolder, varstorage), "setPresentationHeaderFooter", field, varstorage);
            });
        });
    });
});

describe("Tests for setProtection", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("setProtection", "name", "string");
            let vardto = <model.ProtectionProperties>TestInitializer.getValue("setProtection", "dto", "ProtectionProperties");
            let varpassword = <string>TestInitializer.getValue("setProtection", "password", "string");
            let varfolder = <string>TestInitializer.getValue("setProtection", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("setProtection", "storage", "string");
            return TestInitializer.initialize("setProtection", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setProtection(varname, vardto, varpassword, varfolder, varstorage), false, "setProtection");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("setProtection", "name", "string");
        let vardto = <model.ProtectionProperties>TestInitializer.getValue("setProtection", "dto", "ProtectionProperties");
        let varpassword = <string>TestInitializer.getValue("setProtection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setProtection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setProtection", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "setProtection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setProtection", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setProtection(varname, vardto, varpassword, varfolder, varstorage), "setProtection", field, varname);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("setProtection", "name", "string");
        let vardto = <model.ProtectionProperties>TestInitializer.getValue("setProtection", "dto", "ProtectionProperties");
        let varpassword = <string>TestInitializer.getValue("setProtection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setProtection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setProtection", "storage", "string");
        vardto = <model.ProtectionProperties>TestInitializer.invalidizeValue(vardto, field, "ProtectionProperties", "setProtection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setProtection", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setProtection(varname, vardto, varpassword, varfolder, varstorage), "setProtection", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("setProtection", "name", "string");
        let vardto = <model.ProtectionProperties>TestInitializer.getValue("setProtection", "dto", "ProtectionProperties");
        let varpassword = <string>TestInitializer.getValue("setProtection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setProtection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setProtection", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "setProtection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setProtection", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setProtection(varname, vardto, varpassword, varfolder, varstorage), "setProtection", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("setProtection", "name", "string");
        let vardto = <model.ProtectionProperties>TestInitializer.getValue("setProtection", "dto", "ProtectionProperties");
        let varpassword = <string>TestInitializer.getValue("setProtection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setProtection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setProtection", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "setProtection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setProtection", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setProtection(varname, vardto, varpassword, varfolder, varstorage), "setProtection", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("setProtection", "name", "string");
        let vardto = <model.ProtectionProperties>TestInitializer.getValue("setProtection", "dto", "ProtectionProperties");
        let varpassword = <string>TestInitializer.getValue("setProtection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setProtection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setProtection", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "setProtection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setProtection", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setProtection(varname, vardto, varpassword, varfolder, varstorage), "setProtection", field, varstorage);
            });
        });
    });
});

describe("Tests for setProtectionOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("setProtectionOnline", "document");
            let vardto = <model.ProtectionProperties>TestInitializer.getValue("setProtectionOnline", "dto", "ProtectionProperties");
            let varpassword = <string>TestInitializer.getValue("setProtectionOnline", "password", "string");
            return TestInitializer.initialize("setProtectionOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setProtectionOnline(vardocument, vardto, varpassword), true, "setProtectionOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("setProtectionOnline", "document");
        let vardto = <model.ProtectionProperties>TestInitializer.getValue("setProtectionOnline", "dto", "ProtectionProperties");
        let varpassword = <string>TestInitializer.getValue("setProtectionOnline", "password", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "setProtectionOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setProtectionOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setProtectionOnline(vardocument, vardto, varpassword), "setProtectionOnline", field, vardocument);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let vardocument = <Buffer>TestInitializer.getStreamValue("setProtectionOnline", "document");
        let vardto = <model.ProtectionProperties>TestInitializer.getValue("setProtectionOnline", "dto", "ProtectionProperties");
        let varpassword = <string>TestInitializer.getValue("setProtectionOnline", "password", "string");
        vardto = <model.ProtectionProperties>TestInitializer.invalidizeValue(vardto, field, "ProtectionProperties", "setProtectionOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setProtectionOnline", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setProtectionOnline(vardocument, vardto, varpassword), "setProtectionOnline", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("setProtectionOnline", "document");
        let vardto = <model.ProtectionProperties>TestInitializer.getValue("setProtectionOnline", "dto", "ProtectionProperties");
        let varpassword = <string>TestInitializer.getValue("setProtectionOnline", "password", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "setProtectionOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setProtectionOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setProtectionOnline(vardocument, vardto, varpassword), "setProtectionOnline", field, varpassword);
            });
        });
    });
});

describe("Tests for setSections", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("setSections", "name", "string");
            let varsections = <model.Sections>TestInitializer.getValue("setSections", "sections", "Sections");
            let varpassword = <string>TestInitializer.getValue("setSections", "password", "string");
            let varfolder = <string>TestInitializer.getValue("setSections", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("setSections", "storage", "string");
            return TestInitializer.initialize("setSections", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setSections(varname, varsections, varpassword, varfolder, varstorage), false, "setSections");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("setSections", "name", "string");
        let varsections = <model.Sections>TestInitializer.getValue("setSections", "sections", "Sections");
        let varpassword = <string>TestInitializer.getValue("setSections", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSections", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSections", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "setSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSections", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSections(varname, varsections, varpassword, varfolder, varstorage), "setSections", field, varname);
            });
        });
    });

    it("invalid sections test", () => {
        const field = "sections";
        let varname = <string>TestInitializer.getValue("setSections", "name", "string");
        let varsections = <model.Sections>TestInitializer.getValue("setSections", "sections", "Sections");
        let varpassword = <string>TestInitializer.getValue("setSections", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSections", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSections", "storage", "string");
        varsections = <model.Sections>TestInitializer.invalidizeValue(varsections, field, "Sections", "setSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSections", field, varsections).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSections(varname, varsections, varpassword, varfolder, varstorage), "setSections", field, varsections);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("setSections", "name", "string");
        let varsections = <model.Sections>TestInitializer.getValue("setSections", "sections", "Sections");
        let varpassword = <string>TestInitializer.getValue("setSections", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSections", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSections", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "setSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSections", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSections(varname, varsections, varpassword, varfolder, varstorage), "setSections", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("setSections", "name", "string");
        let varsections = <model.Sections>TestInitializer.getValue("setSections", "sections", "Sections");
        let varpassword = <string>TestInitializer.getValue("setSections", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSections", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSections", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "setSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSections", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSections(varname, varsections, varpassword, varfolder, varstorage), "setSections", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("setSections", "name", "string");
        let varsections = <model.Sections>TestInitializer.getValue("setSections", "sections", "Sections");
        let varpassword = <string>TestInitializer.getValue("setSections", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSections", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSections", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "setSections");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSections", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSections(varname, varsections, varpassword, varfolder, varstorage), "setSections", field, varstorage);
            });
        });
    });
});

describe("Tests for setSlideHeaderFooter", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("setSlideHeaderFooter", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("setSlideHeaderFooter", "slideIndex", "number");
            let vardto = <model.HeaderFooter>TestInitializer.getValue("setSlideHeaderFooter", "dto", "HeaderFooter");
            let varpassword = <string>TestInitializer.getValue("setSlideHeaderFooter", "password", "string");
            let varfolder = <string>TestInitializer.getValue("setSlideHeaderFooter", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("setSlideHeaderFooter", "storage", "string");
            return TestInitializer.initialize("setSlideHeaderFooter", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), false, "setSlideHeaderFooter");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("setSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setSlideHeaderFooter", "slideIndex", "number");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("setSlideHeaderFooter", "dto", "HeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSlideHeaderFooter", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "setSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSlideHeaderFooter", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "setSlideHeaderFooter", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("setSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setSlideHeaderFooter", "slideIndex", "number");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("setSlideHeaderFooter", "dto", "HeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSlideHeaderFooter", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "setSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSlideHeaderFooter", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "setSlideHeaderFooter", field, varslideIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("setSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setSlideHeaderFooter", "slideIndex", "number");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("setSlideHeaderFooter", "dto", "HeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSlideHeaderFooter", "storage", "string");
        vardto = <model.HeaderFooter>TestInitializer.invalidizeValue(vardto, field, "HeaderFooter", "setSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSlideHeaderFooter", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "setSlideHeaderFooter", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("setSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setSlideHeaderFooter", "slideIndex", "number");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("setSlideHeaderFooter", "dto", "HeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSlideHeaderFooter", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "setSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSlideHeaderFooter", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "setSlideHeaderFooter", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("setSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setSlideHeaderFooter", "slideIndex", "number");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("setSlideHeaderFooter", "dto", "HeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSlideHeaderFooter", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "setSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSlideHeaderFooter", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "setSlideHeaderFooter", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("setSlideHeaderFooter", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("setSlideHeaderFooter", "slideIndex", "number");
        let vardto = <model.HeaderFooter>TestInitializer.getValue("setSlideHeaderFooter", "dto", "HeaderFooter");
        let varpassword = <string>TestInitializer.getValue("setSlideHeaderFooter", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSlideHeaderFooter", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSlideHeaderFooter", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "setSlideHeaderFooter");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSlideHeaderFooter", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideHeaderFooter(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "setSlideHeaderFooter", field, varstorage);
            });
        });
    });
});

describe("Tests for setSlideProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("setSlideProperties", "name", "string");
            let vardto = <model.SlideProperties>TestInitializer.getValue("setSlideProperties", "dto", "SlideProperties");
            let varpassword = <string>TestInitializer.getValue("setSlideProperties", "password", "string");
            let varfolder = <string>TestInitializer.getValue("setSlideProperties", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("setSlideProperties", "storage", "string");
            return TestInitializer.initialize("setSlideProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setSlideProperties(varname, vardto, varpassword, varfolder, varstorage), false, "setSlideProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("setSlideProperties", "name", "string");
        let vardto = <model.SlideProperties>TestInitializer.getValue("setSlideProperties", "dto", "SlideProperties");
        let varpassword = <string>TestInitializer.getValue("setSlideProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSlideProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSlideProperties", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "setSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSlideProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideProperties(varname, vardto, varpassword, varfolder, varstorage), "setSlideProperties", field, varname);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("setSlideProperties", "name", "string");
        let vardto = <model.SlideProperties>TestInitializer.getValue("setSlideProperties", "dto", "SlideProperties");
        let varpassword = <string>TestInitializer.getValue("setSlideProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSlideProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSlideProperties", "storage", "string");
        vardto = <model.SlideProperties>TestInitializer.invalidizeValue(vardto, field, "SlideProperties", "setSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSlideProperties", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideProperties(varname, vardto, varpassword, varfolder, varstorage), "setSlideProperties", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("setSlideProperties", "name", "string");
        let vardto = <model.SlideProperties>TestInitializer.getValue("setSlideProperties", "dto", "SlideProperties");
        let varpassword = <string>TestInitializer.getValue("setSlideProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSlideProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSlideProperties", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "setSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSlideProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideProperties(varname, vardto, varpassword, varfolder, varstorage), "setSlideProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("setSlideProperties", "name", "string");
        let vardto = <model.SlideProperties>TestInitializer.getValue("setSlideProperties", "dto", "SlideProperties");
        let varpassword = <string>TestInitializer.getValue("setSlideProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSlideProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSlideProperties", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "setSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSlideProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideProperties(varname, vardto, varpassword, varfolder, varstorage), "setSlideProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("setSlideProperties", "name", "string");
        let vardto = <model.SlideProperties>TestInitializer.getValue("setSlideProperties", "dto", "SlideProperties");
        let varpassword = <string>TestInitializer.getValue("setSlideProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setSlideProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setSlideProperties", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "setSlideProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setSlideProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setSlideProperties(varname, vardto, varpassword, varfolder, varstorage), "setSlideProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for setViewProperties", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("setViewProperties", "name", "string");
            let vardto = <model.ViewProperties>TestInitializer.getValue("setViewProperties", "dto", "ViewProperties");
            let varpassword = <string>TestInitializer.getValue("setViewProperties", "password", "string");
            let varfolder = <string>TestInitializer.getValue("setViewProperties", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("setViewProperties", "storage", "string");
            return TestInitializer.initialize("setViewProperties", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().setViewProperties(varname, vardto, varpassword, varfolder, varstorage), false, "setViewProperties");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("setViewProperties", "name", "string");
        let vardto = <model.ViewProperties>TestInitializer.getValue("setViewProperties", "dto", "ViewProperties");
        let varpassword = <string>TestInitializer.getValue("setViewProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setViewProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setViewProperties", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "setViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setViewProperties", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setViewProperties(varname, vardto, varpassword, varfolder, varstorage), "setViewProperties", field, varname);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("setViewProperties", "name", "string");
        let vardto = <model.ViewProperties>TestInitializer.getValue("setViewProperties", "dto", "ViewProperties");
        let varpassword = <string>TestInitializer.getValue("setViewProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setViewProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setViewProperties", "storage", "string");
        vardto = <model.ViewProperties>TestInitializer.invalidizeValue(vardto, field, "ViewProperties", "setViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setViewProperties", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setViewProperties(varname, vardto, varpassword, varfolder, varstorage), "setViewProperties", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("setViewProperties", "name", "string");
        let vardto = <model.ViewProperties>TestInitializer.getValue("setViewProperties", "dto", "ViewProperties");
        let varpassword = <string>TestInitializer.getValue("setViewProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setViewProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setViewProperties", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "setViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setViewProperties", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setViewProperties(varname, vardto, varpassword, varfolder, varstorage), "setViewProperties", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("setViewProperties", "name", "string");
        let vardto = <model.ViewProperties>TestInitializer.getValue("setViewProperties", "dto", "ViewProperties");
        let varpassword = <string>TestInitializer.getValue("setViewProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setViewProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setViewProperties", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "setViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setViewProperties", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setViewProperties(varname, vardto, varpassword, varfolder, varstorage), "setViewProperties", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("setViewProperties", "name", "string");
        let vardto = <model.ViewProperties>TestInitializer.getValue("setViewProperties", "dto", "ViewProperties");
        let varpassword = <string>TestInitializer.getValue("setViewProperties", "password", "string");
        let varfolder = <string>TestInitializer.getValue("setViewProperties", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("setViewProperties", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "setViewProperties");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("setViewProperties", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().setViewProperties(varname, vardto, varpassword, varfolder, varstorage), "setViewProperties", field, varstorage);
            });
        });
    });
});

describe("Tests for split", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("split", "name", "string");
            let varoptions = <model.ExportOptions>TestInitializer.getValue("split", "options", "ExportOptions");
            let varformat = <string>TestInitializer.getValue("split", "format", "string");
            let varwidth = <number>TestInitializer.getValue("split", "width", "number");
            let varheight = <number>TestInitializer.getValue("split", "height", "number");
            let varfrom = <number>TestInitializer.getValue("split", "from", "number");
            let varto = <number>TestInitializer.getValue("split", "to", "number");
            let vardestFolder = <string>TestInitializer.getValue("split", "destFolder", "string");
            let varpassword = <string>TestInitializer.getValue("split", "password", "string");
            let varfolder = <string>TestInitializer.getValue("split", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("split", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("split", "fontsFolder", "string");
            return TestInitializer.initialize("split", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), false, "split");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("split", "name", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("split", "options", "ExportOptions");
        let varformat = <string>TestInitializer.getValue("split", "format", "string");
        let varwidth = <number>TestInitializer.getValue("split", "width", "number");
        let varheight = <number>TestInitializer.getValue("split", "height", "number");
        let varfrom = <number>TestInitializer.getValue("split", "from", "number");
        let varto = <number>TestInitializer.getValue("split", "to", "number");
        let vardestFolder = <string>TestInitializer.getValue("split", "destFolder", "string");
        let varpassword = <string>TestInitializer.getValue("split", "password", "string");
        let varfolder = <string>TestInitializer.getValue("split", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("split", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("split", "fontsFolder", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "split");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("split", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "split", field, varname);
            });
        });
    });

    it("invalid options test", () => {
        const field = "options";
        let varname = <string>TestInitializer.getValue("split", "name", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("split", "options", "ExportOptions");
        let varformat = <string>TestInitializer.getValue("split", "format", "string");
        let varwidth = <number>TestInitializer.getValue("split", "width", "number");
        let varheight = <number>TestInitializer.getValue("split", "height", "number");
        let varfrom = <number>TestInitializer.getValue("split", "from", "number");
        let varto = <number>TestInitializer.getValue("split", "to", "number");
        let vardestFolder = <string>TestInitializer.getValue("split", "destFolder", "string");
        let varpassword = <string>TestInitializer.getValue("split", "password", "string");
        let varfolder = <string>TestInitializer.getValue("split", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("split", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("split", "fontsFolder", "string");
        varoptions = <model.ExportOptions>TestInitializer.invalidizeValue(varoptions, field, "ExportOptions", "split");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("split", field, varoptions).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "split", field, varoptions);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let varname = <string>TestInitializer.getValue("split", "name", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("split", "options", "ExportOptions");
        let varformat = <string>TestInitializer.getValue("split", "format", "string");
        let varwidth = <number>TestInitializer.getValue("split", "width", "number");
        let varheight = <number>TestInitializer.getValue("split", "height", "number");
        let varfrom = <number>TestInitializer.getValue("split", "from", "number");
        let varto = <number>TestInitializer.getValue("split", "to", "number");
        let vardestFolder = <string>TestInitializer.getValue("split", "destFolder", "string");
        let varpassword = <string>TestInitializer.getValue("split", "password", "string");
        let varfolder = <string>TestInitializer.getValue("split", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("split", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("split", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "split");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("split", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "split", field, varformat);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let varname = <string>TestInitializer.getValue("split", "name", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("split", "options", "ExportOptions");
        let varformat = <string>TestInitializer.getValue("split", "format", "string");
        let varwidth = <number>TestInitializer.getValue("split", "width", "number");
        let varheight = <number>TestInitializer.getValue("split", "height", "number");
        let varfrom = <number>TestInitializer.getValue("split", "from", "number");
        let varto = <number>TestInitializer.getValue("split", "to", "number");
        let vardestFolder = <string>TestInitializer.getValue("split", "destFolder", "string");
        let varpassword = <string>TestInitializer.getValue("split", "password", "string");
        let varfolder = <string>TestInitializer.getValue("split", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("split", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("split", "fontsFolder", "string");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "split");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("split", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "split", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let varname = <string>TestInitializer.getValue("split", "name", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("split", "options", "ExportOptions");
        let varformat = <string>TestInitializer.getValue("split", "format", "string");
        let varwidth = <number>TestInitializer.getValue("split", "width", "number");
        let varheight = <number>TestInitializer.getValue("split", "height", "number");
        let varfrom = <number>TestInitializer.getValue("split", "from", "number");
        let varto = <number>TestInitializer.getValue("split", "to", "number");
        let vardestFolder = <string>TestInitializer.getValue("split", "destFolder", "string");
        let varpassword = <string>TestInitializer.getValue("split", "password", "string");
        let varfolder = <string>TestInitializer.getValue("split", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("split", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("split", "fontsFolder", "string");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "split");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("split", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "split", field, varheight);
            });
        });
    });

    it("invalid from test", () => {
        const field = "from";
        let varname = <string>TestInitializer.getValue("split", "name", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("split", "options", "ExportOptions");
        let varformat = <string>TestInitializer.getValue("split", "format", "string");
        let varwidth = <number>TestInitializer.getValue("split", "width", "number");
        let varheight = <number>TestInitializer.getValue("split", "height", "number");
        let varfrom = <number>TestInitializer.getValue("split", "from", "number");
        let varto = <number>TestInitializer.getValue("split", "to", "number");
        let vardestFolder = <string>TestInitializer.getValue("split", "destFolder", "string");
        let varpassword = <string>TestInitializer.getValue("split", "password", "string");
        let varfolder = <string>TestInitializer.getValue("split", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("split", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("split", "fontsFolder", "string");
        varfrom = <number>TestInitializer.invalidizeValue(varfrom, field, "number", "split");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("split", field, varfrom).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "split", field, varfrom);
            });
        });
    });

    it("invalid to test", () => {
        const field = "to";
        let varname = <string>TestInitializer.getValue("split", "name", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("split", "options", "ExportOptions");
        let varformat = <string>TestInitializer.getValue("split", "format", "string");
        let varwidth = <number>TestInitializer.getValue("split", "width", "number");
        let varheight = <number>TestInitializer.getValue("split", "height", "number");
        let varfrom = <number>TestInitializer.getValue("split", "from", "number");
        let varto = <number>TestInitializer.getValue("split", "to", "number");
        let vardestFolder = <string>TestInitializer.getValue("split", "destFolder", "string");
        let varpassword = <string>TestInitializer.getValue("split", "password", "string");
        let varfolder = <string>TestInitializer.getValue("split", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("split", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("split", "fontsFolder", "string");
        varto = <number>TestInitializer.invalidizeValue(varto, field, "number", "split");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("split", field, varto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "split", field, varto);
            });
        });
    });

    it("invalid destFolder test", () => {
        const field = "destFolder";
        let varname = <string>TestInitializer.getValue("split", "name", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("split", "options", "ExportOptions");
        let varformat = <string>TestInitializer.getValue("split", "format", "string");
        let varwidth = <number>TestInitializer.getValue("split", "width", "number");
        let varheight = <number>TestInitializer.getValue("split", "height", "number");
        let varfrom = <number>TestInitializer.getValue("split", "from", "number");
        let varto = <number>TestInitializer.getValue("split", "to", "number");
        let vardestFolder = <string>TestInitializer.getValue("split", "destFolder", "string");
        let varpassword = <string>TestInitializer.getValue("split", "password", "string");
        let varfolder = <string>TestInitializer.getValue("split", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("split", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("split", "fontsFolder", "string");
        vardestFolder = <string>TestInitializer.invalidizeValue(vardestFolder, field, "string", "split");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("split", field, vardestFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "split", field, vardestFolder);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("split", "name", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("split", "options", "ExportOptions");
        let varformat = <string>TestInitializer.getValue("split", "format", "string");
        let varwidth = <number>TestInitializer.getValue("split", "width", "number");
        let varheight = <number>TestInitializer.getValue("split", "height", "number");
        let varfrom = <number>TestInitializer.getValue("split", "from", "number");
        let varto = <number>TestInitializer.getValue("split", "to", "number");
        let vardestFolder = <string>TestInitializer.getValue("split", "destFolder", "string");
        let varpassword = <string>TestInitializer.getValue("split", "password", "string");
        let varfolder = <string>TestInitializer.getValue("split", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("split", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("split", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "split");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("split", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "split", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("split", "name", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("split", "options", "ExportOptions");
        let varformat = <string>TestInitializer.getValue("split", "format", "string");
        let varwidth = <number>TestInitializer.getValue("split", "width", "number");
        let varheight = <number>TestInitializer.getValue("split", "height", "number");
        let varfrom = <number>TestInitializer.getValue("split", "from", "number");
        let varto = <number>TestInitializer.getValue("split", "to", "number");
        let vardestFolder = <string>TestInitializer.getValue("split", "destFolder", "string");
        let varpassword = <string>TestInitializer.getValue("split", "password", "string");
        let varfolder = <string>TestInitializer.getValue("split", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("split", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("split", "fontsFolder", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "split");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("split", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "split", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("split", "name", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("split", "options", "ExportOptions");
        let varformat = <string>TestInitializer.getValue("split", "format", "string");
        let varwidth = <number>TestInitializer.getValue("split", "width", "number");
        let varheight = <number>TestInitializer.getValue("split", "height", "number");
        let varfrom = <number>TestInitializer.getValue("split", "from", "number");
        let varto = <number>TestInitializer.getValue("split", "to", "number");
        let vardestFolder = <string>TestInitializer.getValue("split", "destFolder", "string");
        let varpassword = <string>TestInitializer.getValue("split", "password", "string");
        let varfolder = <string>TestInitializer.getValue("split", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("split", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("split", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "split");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("split", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "split", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let varname = <string>TestInitializer.getValue("split", "name", "string");
        let varoptions = <model.ExportOptions>TestInitializer.getValue("split", "options", "ExportOptions");
        let varformat = <string>TestInitializer.getValue("split", "format", "string");
        let varwidth = <number>TestInitializer.getValue("split", "width", "number");
        let varheight = <number>TestInitializer.getValue("split", "height", "number");
        let varfrom = <number>TestInitializer.getValue("split", "from", "number");
        let varto = <number>TestInitializer.getValue("split", "to", "number");
        let vardestFolder = <string>TestInitializer.getValue("split", "destFolder", "string");
        let varpassword = <string>TestInitializer.getValue("split", "password", "string");
        let varfolder = <string>TestInitializer.getValue("split", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("split", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("split", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "split");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("split", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().split(varname, varoptions, varformat, varwidth, varheight, varfrom, varto, vardestFolder, varpassword, varfolder, varstorage, varfontsFolder), "split", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for splitAndSaveOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("splitAndSaveOnline", "document");
            let varformat = <string>TestInitializer.getValue("splitAndSaveOnline", "format", "string");
            let vardestFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "destFolder", "string");
            let varwidth = <number>TestInitializer.getValue("splitAndSaveOnline", "width", "number");
            let varheight = <number>TestInitializer.getValue("splitAndSaveOnline", "height", "number");
            let varfrom = <number>TestInitializer.getValue("splitAndSaveOnline", "from", "number");
            let varto = <number>TestInitializer.getValue("splitAndSaveOnline", "to", "number");
            let varpassword = <string>TestInitializer.getValue("splitAndSaveOnline", "password", "string");
            let varstorage = <string>TestInitializer.getValue("splitAndSaveOnline", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "fontsFolder", "string");
            return TestInitializer.initialize("splitAndSaveOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), false, "splitAndSaveOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitAndSaveOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitAndSaveOnline", "format", "string");
        let vardestFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "destFolder", "string");
        let varwidth = <number>TestInitializer.getValue("splitAndSaveOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitAndSaveOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitAndSaveOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitAndSaveOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitAndSaveOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitAndSaveOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "fontsFolder", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "splitAndSaveOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitAndSaveOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitAndSaveOnline", field, vardocument);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitAndSaveOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitAndSaveOnline", "format", "string");
        let vardestFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "destFolder", "string");
        let varwidth = <number>TestInitializer.getValue("splitAndSaveOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitAndSaveOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitAndSaveOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitAndSaveOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitAndSaveOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitAndSaveOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "splitAndSaveOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitAndSaveOnline", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitAndSaveOnline", field, varformat);
            });
        });
    });

    it("invalid destFolder test", () => {
        const field = "destFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitAndSaveOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitAndSaveOnline", "format", "string");
        let vardestFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "destFolder", "string");
        let varwidth = <number>TestInitializer.getValue("splitAndSaveOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitAndSaveOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitAndSaveOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitAndSaveOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitAndSaveOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitAndSaveOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "fontsFolder", "string");
        vardestFolder = <string>TestInitializer.invalidizeValue(vardestFolder, field, "string", "splitAndSaveOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitAndSaveOnline", field, vardestFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitAndSaveOnline", field, vardestFolder);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitAndSaveOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitAndSaveOnline", "format", "string");
        let vardestFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "destFolder", "string");
        let varwidth = <number>TestInitializer.getValue("splitAndSaveOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitAndSaveOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitAndSaveOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitAndSaveOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitAndSaveOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitAndSaveOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "fontsFolder", "string");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "splitAndSaveOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitAndSaveOnline", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitAndSaveOnline", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitAndSaveOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitAndSaveOnline", "format", "string");
        let vardestFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "destFolder", "string");
        let varwidth = <number>TestInitializer.getValue("splitAndSaveOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitAndSaveOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitAndSaveOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitAndSaveOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitAndSaveOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitAndSaveOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "fontsFolder", "string");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "splitAndSaveOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitAndSaveOnline", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitAndSaveOnline", field, varheight);
            });
        });
    });

    it("invalid from test", () => {
        const field = "from";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitAndSaveOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitAndSaveOnline", "format", "string");
        let vardestFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "destFolder", "string");
        let varwidth = <number>TestInitializer.getValue("splitAndSaveOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitAndSaveOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitAndSaveOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitAndSaveOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitAndSaveOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitAndSaveOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "fontsFolder", "string");
        varfrom = <number>TestInitializer.invalidizeValue(varfrom, field, "number", "splitAndSaveOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitAndSaveOnline", field, varfrom).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitAndSaveOnline", field, varfrom);
            });
        });
    });

    it("invalid to test", () => {
        const field = "to";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitAndSaveOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitAndSaveOnline", "format", "string");
        let vardestFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "destFolder", "string");
        let varwidth = <number>TestInitializer.getValue("splitAndSaveOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitAndSaveOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitAndSaveOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitAndSaveOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitAndSaveOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitAndSaveOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "fontsFolder", "string");
        varto = <number>TestInitializer.invalidizeValue(varto, field, "number", "splitAndSaveOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitAndSaveOnline", field, varto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitAndSaveOnline", field, varto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitAndSaveOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitAndSaveOnline", "format", "string");
        let vardestFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "destFolder", "string");
        let varwidth = <number>TestInitializer.getValue("splitAndSaveOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitAndSaveOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitAndSaveOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitAndSaveOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitAndSaveOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitAndSaveOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "splitAndSaveOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitAndSaveOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitAndSaveOnline", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitAndSaveOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitAndSaveOnline", "format", "string");
        let vardestFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "destFolder", "string");
        let varwidth = <number>TestInitializer.getValue("splitAndSaveOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitAndSaveOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitAndSaveOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitAndSaveOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitAndSaveOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitAndSaveOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "splitAndSaveOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitAndSaveOnline", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitAndSaveOnline", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitAndSaveOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitAndSaveOnline", "format", "string");
        let vardestFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "destFolder", "string");
        let varwidth = <number>TestInitializer.getValue("splitAndSaveOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitAndSaveOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitAndSaveOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitAndSaveOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitAndSaveOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitAndSaveOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitAndSaveOnline", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "splitAndSaveOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitAndSaveOnline", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitAndSaveOnline(vardocument, varformat, vardestFolder, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitAndSaveOnline", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for splitOnline", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let vardocument = <Buffer>TestInitializer.getStreamValue("splitOnline", "document");
            let varformat = <string>TestInitializer.getValue("splitOnline", "format", "string");
            let varwidth = <number>TestInitializer.getValue("splitOnline", "width", "number");
            let varheight = <number>TestInitializer.getValue("splitOnline", "height", "number");
            let varfrom = <number>TestInitializer.getValue("splitOnline", "from", "number");
            let varto = <number>TestInitializer.getValue("splitOnline", "to", "number");
            let varpassword = <string>TestInitializer.getValue("splitOnline", "password", "string");
            let varstorage = <string>TestInitializer.getValue("splitOnline", "storage", "string");
            let varfontsFolder = <string>TestInitializer.getValue("splitOnline", "fontsFolder", "string");
            return TestInitializer.initialize("splitOnline", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), true, "splitOnline");
            });
        });
    });

    it("invalid document test", () => {
        const field = "document";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("splitOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitOnline", "fontsFolder", "string");
        vardocument = <Buffer>TestInitializer.invalidizeValue(vardocument, field, "Buffer", "splitOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitOnline", field, vardocument).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitOnline", field, vardocument);
            });
        });
    });

    it("invalid format test", () => {
        const field = "format";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("splitOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitOnline", "fontsFolder", "string");
        varformat = <string>TestInitializer.invalidizeValue(varformat, field, "string", "splitOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitOnline", field, varformat).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitOnline", field, varformat);
            });
        });
    });

    it("invalid width test", () => {
        const field = "width";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("splitOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitOnline", "fontsFolder", "string");
        varwidth = <number>TestInitializer.invalidizeValue(varwidth, field, "number", "splitOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitOnline", field, varwidth).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitOnline", field, varwidth);
            });
        });
    });

    it("invalid height test", () => {
        const field = "height";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("splitOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitOnline", "fontsFolder", "string");
        varheight = <number>TestInitializer.invalidizeValue(varheight, field, "number", "splitOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitOnline", field, varheight).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitOnline", field, varheight);
            });
        });
    });

    it("invalid from test", () => {
        const field = "from";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("splitOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitOnline", "fontsFolder", "string");
        varfrom = <number>TestInitializer.invalidizeValue(varfrom, field, "number", "splitOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitOnline", field, varfrom).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitOnline", field, varfrom);
            });
        });
    });

    it("invalid to test", () => {
        const field = "to";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("splitOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitOnline", "fontsFolder", "string");
        varto = <number>TestInitializer.invalidizeValue(varto, field, "number", "splitOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitOnline", field, varto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitOnline", field, varto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("splitOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitOnline", "fontsFolder", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "splitOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitOnline", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitOnline", field, varpassword);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("splitOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitOnline", "fontsFolder", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "splitOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitOnline", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitOnline", field, varstorage);
            });
        });
    });

    it("invalid fontsFolder test", () => {
        const field = "fontsFolder";
        let vardocument = <Buffer>TestInitializer.getStreamValue("splitOnline", "document");
        let varformat = <string>TestInitializer.getValue("splitOnline", "format", "string");
        let varwidth = <number>TestInitializer.getValue("splitOnline", "width", "number");
        let varheight = <number>TestInitializer.getValue("splitOnline", "height", "number");
        let varfrom = <number>TestInitializer.getValue("splitOnline", "from", "number");
        let varto = <number>TestInitializer.getValue("splitOnline", "to", "number");
        let varpassword = <string>TestInitializer.getValue("splitOnline", "password", "string");
        let varstorage = <string>TestInitializer.getValue("splitOnline", "storage", "string");
        let varfontsFolder = <string>TestInitializer.getValue("splitOnline", "fontsFolder", "string");
        varfontsFolder = <string>TestInitializer.invalidizeValue(varfontsFolder, field, "string", "splitOnline");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("splitOnline", field, varfontsFolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().splitOnline(vardocument, varformat, varwidth, varheight, varfrom, varto, varpassword, varstorage, varfontsFolder), "splitOnline", field, varfontsFolder);
            });
        });
    });
});

describe("Tests for storageExists", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varstorageName = <string>TestInitializer.getValue("storageExists", "storageName", "string");
            return TestInitializer.initialize("storageExists", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().storageExists(varstorageName), false, "storageExists");
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varstorageName = <string>TestInitializer.getValue("storageExists", "storageName", "string");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "storageExists");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("storageExists", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().storageExists(varstorageName), "storageExists", field, varstorageName);
            });
        });
    });
});

describe("Tests for updateAnimationEffect", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateAnimationEffect", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateAnimationEffect", "slideIndex", "number");
            let vareffectIndex = <number>TestInitializer.getValue("updateAnimationEffect", "effectIndex", "number");
            let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationEffect", "effect", "Effect");
            let varpassword = <string>TestInitializer.getValue("updateAnimationEffect", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateAnimationEffect", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateAnimationEffect", "storage", "string");
            return TestInitializer.initialize("updateAnimationEffect", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), false, "updateAnimationEffect");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateAnimationEffect", "slideIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("updateAnimationEffect", "effectIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("updateAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateAnimationEffect", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateAnimationEffect", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "updateAnimationEffect", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateAnimationEffect", "slideIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("updateAnimationEffect", "effectIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("updateAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateAnimationEffect", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateAnimationEffect", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "updateAnimationEffect", field, varslideIndex);
            });
        });
    });

    it("invalid effectIndex test", () => {
        const field = "effectIndex";
        let varname = <string>TestInitializer.getValue("updateAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateAnimationEffect", "slideIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("updateAnimationEffect", "effectIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("updateAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateAnimationEffect", "storage", "string");
        vareffectIndex = <number>TestInitializer.invalidizeValue(vareffectIndex, field, "number", "updateAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateAnimationEffect", field, vareffectIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "updateAnimationEffect", field, vareffectIndex);
            });
        });
    });

    it("invalid effect test", () => {
        const field = "effect";
        let varname = <string>TestInitializer.getValue("updateAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateAnimationEffect", "slideIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("updateAnimationEffect", "effectIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("updateAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateAnimationEffect", "storage", "string");
        vareffect = <model.Effect>TestInitializer.invalidizeValue(vareffect, field, "Effect", "updateAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateAnimationEffect", field, vareffect).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "updateAnimationEffect", field, vareffect);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateAnimationEffect", "slideIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("updateAnimationEffect", "effectIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("updateAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateAnimationEffect", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateAnimationEffect", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "updateAnimationEffect", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateAnimationEffect", "slideIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("updateAnimationEffect", "effectIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("updateAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateAnimationEffect", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateAnimationEffect", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "updateAnimationEffect", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateAnimationEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateAnimationEffect", "slideIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("updateAnimationEffect", "effectIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("updateAnimationEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateAnimationEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateAnimationEffect", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateAnimationEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateAnimationEffect", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationEffect(varname, varslideIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "updateAnimationEffect", field, varstorage);
            });
        });
    });
});

describe("Tests for updateAnimationInteractiveSequenceEffect", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "number");
            let varsequenceIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
            let vareffectIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "number");
            let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effect", "Effect");
            let varpassword = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "storage", "string");
            return TestInitializer.initialize("updateAnimationInteractiveSequenceEffect", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), false, "updateAnimationInteractiveSequenceEffect");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateAnimationInteractiveSequenceEffect", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "updateAnimationInteractiveSequenceEffect", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateAnimationInteractiveSequenceEffect", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "updateAnimationInteractiveSequenceEffect", field, varslideIndex);
            });
        });
    });

    it("invalid sequenceIndex test", () => {
        const field = "sequenceIndex";
        let varname = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "storage", "string");
        varsequenceIndex = <number>TestInitializer.invalidizeValue(varsequenceIndex, field, "number", "updateAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateAnimationInteractiveSequenceEffect", field, varsequenceIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "updateAnimationInteractiveSequenceEffect", field, varsequenceIndex);
            });
        });
    });

    it("invalid effectIndex test", () => {
        const field = "effectIndex";
        let varname = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "storage", "string");
        vareffectIndex = <number>TestInitializer.invalidizeValue(vareffectIndex, field, "number", "updateAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateAnimationInteractiveSequenceEffect", field, vareffectIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "updateAnimationInteractiveSequenceEffect", field, vareffectIndex);
            });
        });
    });

    it("invalid effect test", () => {
        const field = "effect";
        let varname = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "storage", "string");
        vareffect = <model.Effect>TestInitializer.invalidizeValue(vareffect, field, "Effect", "updateAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateAnimationInteractiveSequenceEffect", field, vareffect).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "updateAnimationInteractiveSequenceEffect", field, vareffect);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateAnimationInteractiveSequenceEffect", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "updateAnimationInteractiveSequenceEffect", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateAnimationInteractiveSequenceEffect", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "updateAnimationInteractiveSequenceEffect", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "slideIndex", "number");
        let varsequenceIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", "number");
        let vareffectIndex = <number>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effectIndex", "number");
        let vareffect = <model.Effect>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "effect", "Effect");
        let varpassword = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateAnimationInteractiveSequenceEffect", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateAnimationInteractiveSequenceEffect");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateAnimationInteractiveSequenceEffect", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateAnimationInteractiveSequenceEffect(varname, varslideIndex, varsequenceIndex, vareffectIndex, vareffect, varpassword, varfolder, varstorage), "updateAnimationInteractiveSequenceEffect", field, varstorage);
            });
        });
    });
});

describe("Tests for updateChartCategory", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateChartCategory", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateChartCategory", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("updateChartCategory", "shapeIndex", "number");
            let varcategoryIndex = <number>TestInitializer.getValue("updateChartCategory", "categoryIndex", "number");
            let varcategory = <model.ChartCategory>TestInitializer.getValue("updateChartCategory", "category", "ChartCategory");
            let varpassword = <string>TestInitializer.getValue("updateChartCategory", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateChartCategory", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateChartCategory", "storage", "string");
            return TestInitializer.initialize("updateChartCategory", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), false, "updateChartCategory");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartCategory", "shapeIndex", "number");
        let varcategoryIndex = <number>TestInitializer.getValue("updateChartCategory", "categoryIndex", "number");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("updateChartCategory", "category", "ChartCategory");
        let varpassword = <string>TestInitializer.getValue("updateChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartCategory", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartCategory", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "updateChartCategory", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartCategory", "shapeIndex", "number");
        let varcategoryIndex = <number>TestInitializer.getValue("updateChartCategory", "categoryIndex", "number");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("updateChartCategory", "category", "ChartCategory");
        let varpassword = <string>TestInitializer.getValue("updateChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartCategory", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartCategory", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "updateChartCategory", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("updateChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartCategory", "shapeIndex", "number");
        let varcategoryIndex = <number>TestInitializer.getValue("updateChartCategory", "categoryIndex", "number");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("updateChartCategory", "category", "ChartCategory");
        let varpassword = <string>TestInitializer.getValue("updateChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartCategory", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "updateChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartCategory", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "updateChartCategory", field, varshapeIndex);
            });
        });
    });

    it("invalid categoryIndex test", () => {
        const field = "categoryIndex";
        let varname = <string>TestInitializer.getValue("updateChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartCategory", "shapeIndex", "number");
        let varcategoryIndex = <number>TestInitializer.getValue("updateChartCategory", "categoryIndex", "number");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("updateChartCategory", "category", "ChartCategory");
        let varpassword = <string>TestInitializer.getValue("updateChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartCategory", "storage", "string");
        varcategoryIndex = <number>TestInitializer.invalidizeValue(varcategoryIndex, field, "number", "updateChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartCategory", field, varcategoryIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "updateChartCategory", field, varcategoryIndex);
            });
        });
    });

    it("invalid category test", () => {
        const field = "category";
        let varname = <string>TestInitializer.getValue("updateChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartCategory", "shapeIndex", "number");
        let varcategoryIndex = <number>TestInitializer.getValue("updateChartCategory", "categoryIndex", "number");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("updateChartCategory", "category", "ChartCategory");
        let varpassword = <string>TestInitializer.getValue("updateChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartCategory", "storage", "string");
        varcategory = <model.ChartCategory>TestInitializer.invalidizeValue(varcategory, field, "ChartCategory", "updateChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartCategory", field, varcategory).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "updateChartCategory", field, varcategory);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartCategory", "shapeIndex", "number");
        let varcategoryIndex = <number>TestInitializer.getValue("updateChartCategory", "categoryIndex", "number");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("updateChartCategory", "category", "ChartCategory");
        let varpassword = <string>TestInitializer.getValue("updateChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartCategory", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartCategory", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "updateChartCategory", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartCategory", "shapeIndex", "number");
        let varcategoryIndex = <number>TestInitializer.getValue("updateChartCategory", "categoryIndex", "number");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("updateChartCategory", "category", "ChartCategory");
        let varpassword = <string>TestInitializer.getValue("updateChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartCategory", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartCategory", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "updateChartCategory", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateChartCategory", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartCategory", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartCategory", "shapeIndex", "number");
        let varcategoryIndex = <number>TestInitializer.getValue("updateChartCategory", "categoryIndex", "number");
        let varcategory = <model.ChartCategory>TestInitializer.getValue("updateChartCategory", "category", "ChartCategory");
        let varpassword = <string>TestInitializer.getValue("updateChartCategory", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartCategory", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartCategory", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateChartCategory");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartCategory", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartCategory(varname, varslideIndex, varshapeIndex, varcategoryIndex, varcategory, varpassword, varfolder, varstorage), "updateChartCategory", field, varstorage);
            });
        });
    });
});

describe("Tests for updateChartDataPoint", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateChartDataPoint", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateChartDataPoint", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("updateChartDataPoint", "shapeIndex", "number");
            let varseriesIndex = <number>TestInitializer.getValue("updateChartDataPoint", "seriesIndex", "number");
            let varpointIndex = <number>TestInitializer.getValue("updateChartDataPoint", "pointIndex", "number");
            let vardataPoint = <model.DataPoint>TestInitializer.getValue("updateChartDataPoint", "dataPoint", "DataPoint");
            let varpassword = <string>TestInitializer.getValue("updateChartDataPoint", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateChartDataPoint", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateChartDataPoint", "storage", "string");
            return TestInitializer.initialize("updateChartDataPoint", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), false, "updateChartDataPoint");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("updateChartDataPoint", "pointIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("updateChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("updateChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartDataPoint", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartDataPoint", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "updateChartDataPoint", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("updateChartDataPoint", "pointIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("updateChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("updateChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartDataPoint", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartDataPoint", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "updateChartDataPoint", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("updateChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("updateChartDataPoint", "pointIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("updateChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("updateChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartDataPoint", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "updateChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartDataPoint", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "updateChartDataPoint", field, varshapeIndex);
            });
        });
    });

    it("invalid seriesIndex test", () => {
        const field = "seriesIndex";
        let varname = <string>TestInitializer.getValue("updateChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("updateChartDataPoint", "pointIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("updateChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("updateChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartDataPoint", "storage", "string");
        varseriesIndex = <number>TestInitializer.invalidizeValue(varseriesIndex, field, "number", "updateChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartDataPoint", field, varseriesIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "updateChartDataPoint", field, varseriesIndex);
            });
        });
    });

    it("invalid pointIndex test", () => {
        const field = "pointIndex";
        let varname = <string>TestInitializer.getValue("updateChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("updateChartDataPoint", "pointIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("updateChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("updateChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartDataPoint", "storage", "string");
        varpointIndex = <number>TestInitializer.invalidizeValue(varpointIndex, field, "number", "updateChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartDataPoint", field, varpointIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "updateChartDataPoint", field, varpointIndex);
            });
        });
    });

    it("invalid dataPoint test", () => {
        const field = "dataPoint";
        let varname = <string>TestInitializer.getValue("updateChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("updateChartDataPoint", "pointIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("updateChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("updateChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartDataPoint", "storage", "string");
        vardataPoint = <model.DataPoint>TestInitializer.invalidizeValue(vardataPoint, field, "DataPoint", "updateChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartDataPoint", field, vardataPoint).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "updateChartDataPoint", field, vardataPoint);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("updateChartDataPoint", "pointIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("updateChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("updateChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartDataPoint", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartDataPoint", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "updateChartDataPoint", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("updateChartDataPoint", "pointIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("updateChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("updateChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartDataPoint", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartDataPoint", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "updateChartDataPoint", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateChartDataPoint", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartDataPoint", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartDataPoint", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartDataPoint", "seriesIndex", "number");
        let varpointIndex = <number>TestInitializer.getValue("updateChartDataPoint", "pointIndex", "number");
        let vardataPoint = <model.DataPoint>TestInitializer.getValue("updateChartDataPoint", "dataPoint", "DataPoint");
        let varpassword = <string>TestInitializer.getValue("updateChartDataPoint", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartDataPoint", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartDataPoint", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateChartDataPoint");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartDataPoint", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartDataPoint(varname, varslideIndex, varshapeIndex, varseriesIndex, varpointIndex, vardataPoint, varpassword, varfolder, varstorage), "updateChartDataPoint", field, varstorage);
            });
        });
    });
});

describe("Tests for updateChartSeries", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateChartSeries", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateChartSeries", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("updateChartSeries", "shapeIndex", "number");
            let varseriesIndex = <number>TestInitializer.getValue("updateChartSeries", "seriesIndex", "number");
            let varseries = <model.Series>TestInitializer.getValue("updateChartSeries", "series", "Series");
            let varpassword = <string>TestInitializer.getValue("updateChartSeries", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateChartSeries", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateChartSeries", "storage", "string");
            return TestInitializer.initialize("updateChartSeries", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), false, "updateChartSeries");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartSeries", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartSeries", "seriesIndex", "number");
        let varseries = <model.Series>TestInitializer.getValue("updateChartSeries", "series", "Series");
        let varpassword = <string>TestInitializer.getValue("updateChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartSeries", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartSeries", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "updateChartSeries", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartSeries", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartSeries", "seriesIndex", "number");
        let varseries = <model.Series>TestInitializer.getValue("updateChartSeries", "series", "Series");
        let varpassword = <string>TestInitializer.getValue("updateChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartSeries", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartSeries", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "updateChartSeries", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("updateChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartSeries", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartSeries", "seriesIndex", "number");
        let varseries = <model.Series>TestInitializer.getValue("updateChartSeries", "series", "Series");
        let varpassword = <string>TestInitializer.getValue("updateChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartSeries", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "updateChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartSeries", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "updateChartSeries", field, varshapeIndex);
            });
        });
    });

    it("invalid seriesIndex test", () => {
        const field = "seriesIndex";
        let varname = <string>TestInitializer.getValue("updateChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartSeries", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartSeries", "seriesIndex", "number");
        let varseries = <model.Series>TestInitializer.getValue("updateChartSeries", "series", "Series");
        let varpassword = <string>TestInitializer.getValue("updateChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartSeries", "storage", "string");
        varseriesIndex = <number>TestInitializer.invalidizeValue(varseriesIndex, field, "number", "updateChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartSeries", field, varseriesIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "updateChartSeries", field, varseriesIndex);
            });
        });
    });

    it("invalid series test", () => {
        const field = "series";
        let varname = <string>TestInitializer.getValue("updateChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartSeries", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartSeries", "seriesIndex", "number");
        let varseries = <model.Series>TestInitializer.getValue("updateChartSeries", "series", "Series");
        let varpassword = <string>TestInitializer.getValue("updateChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartSeries", "storage", "string");
        varseries = <model.Series>TestInitializer.invalidizeValue(varseries, field, "Series", "updateChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartSeries", field, varseries).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "updateChartSeries", field, varseries);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartSeries", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartSeries", "seriesIndex", "number");
        let varseries = <model.Series>TestInitializer.getValue("updateChartSeries", "series", "Series");
        let varpassword = <string>TestInitializer.getValue("updateChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartSeries", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartSeries", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "updateChartSeries", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartSeries", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartSeries", "seriesIndex", "number");
        let varseries = <model.Series>TestInitializer.getValue("updateChartSeries", "series", "Series");
        let varpassword = <string>TestInitializer.getValue("updateChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartSeries", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartSeries", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "updateChartSeries", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateChartSeries", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateChartSeries", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateChartSeries", "shapeIndex", "number");
        let varseriesIndex = <number>TestInitializer.getValue("updateChartSeries", "seriesIndex", "number");
        let varseries = <model.Series>TestInitializer.getValue("updateChartSeries", "series", "Series");
        let varpassword = <string>TestInitializer.getValue("updateChartSeries", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateChartSeries", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateChartSeries", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateChartSeries");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateChartSeries", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateChartSeries(varname, varslideIndex, varshapeIndex, varseriesIndex, varseries, varpassword, varfolder, varstorage), "updateChartSeries", field, varstorage);
            });
        });
    });
});

describe("Tests for updateLayoutSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateLayoutSlide", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateLayoutSlide", "slideIndex", "number");
            let varslideDto = <model.LayoutSlide>TestInitializer.getValue("updateLayoutSlide", "slideDto", "LayoutSlide");
            let varpassword = <string>TestInitializer.getValue("updateLayoutSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateLayoutSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateLayoutSlide", "storage", "string");
            return TestInitializer.initialize("updateLayoutSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateLayoutSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), false, "updateLayoutSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateLayoutSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateLayoutSlide", "slideIndex", "number");
        let varslideDto = <model.LayoutSlide>TestInitializer.getValue("updateLayoutSlide", "slideDto", "LayoutSlide");
        let varpassword = <string>TestInitializer.getValue("updateLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateLayoutSlide", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateLayoutSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateLayoutSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "updateLayoutSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateLayoutSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateLayoutSlide", "slideIndex", "number");
        let varslideDto = <model.LayoutSlide>TestInitializer.getValue("updateLayoutSlide", "slideDto", "LayoutSlide");
        let varpassword = <string>TestInitializer.getValue("updateLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateLayoutSlide", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateLayoutSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateLayoutSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "updateLayoutSlide", field, varslideIndex);
            });
        });
    });

    it("invalid slideDto test", () => {
        const field = "slideDto";
        let varname = <string>TestInitializer.getValue("updateLayoutSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateLayoutSlide", "slideIndex", "number");
        let varslideDto = <model.LayoutSlide>TestInitializer.getValue("updateLayoutSlide", "slideDto", "LayoutSlide");
        let varpassword = <string>TestInitializer.getValue("updateLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateLayoutSlide", "storage", "string");
        varslideDto = <model.LayoutSlide>TestInitializer.invalidizeValue(varslideDto, field, "LayoutSlide", "updateLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateLayoutSlide", field, varslideDto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateLayoutSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "updateLayoutSlide", field, varslideDto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateLayoutSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateLayoutSlide", "slideIndex", "number");
        let varslideDto = <model.LayoutSlide>TestInitializer.getValue("updateLayoutSlide", "slideDto", "LayoutSlide");
        let varpassword = <string>TestInitializer.getValue("updateLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateLayoutSlide", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateLayoutSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateLayoutSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "updateLayoutSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateLayoutSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateLayoutSlide", "slideIndex", "number");
        let varslideDto = <model.LayoutSlide>TestInitializer.getValue("updateLayoutSlide", "slideDto", "LayoutSlide");
        let varpassword = <string>TestInitializer.getValue("updateLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateLayoutSlide", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateLayoutSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateLayoutSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "updateLayoutSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateLayoutSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateLayoutSlide", "slideIndex", "number");
        let varslideDto = <model.LayoutSlide>TestInitializer.getValue("updateLayoutSlide", "slideDto", "LayoutSlide");
        let varpassword = <string>TestInitializer.getValue("updateLayoutSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateLayoutSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateLayoutSlide", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateLayoutSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateLayoutSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateLayoutSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "updateLayoutSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for updateNotesSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateNotesSlide", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateNotesSlide", "slideIndex", "number");
            let vardto = <model.NotesSlide>TestInitializer.getValue("updateNotesSlide", "dto", "NotesSlide");
            let varpassword = <string>TestInitializer.getValue("updateNotesSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateNotesSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateNotesSlide", "storage", "string");
            return TestInitializer.initialize("updateNotesSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), false, "updateNotesSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlide", "slideIndex", "number");
        let vardto = <model.NotesSlide>TestInitializer.getValue("updateNotesSlide", "dto", "NotesSlide");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlide", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlide", "slideIndex", "number");
        let vardto = <model.NotesSlide>TestInitializer.getValue("updateNotesSlide", "dto", "NotesSlide");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlide", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlide", field, varslideIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("updateNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlide", "slideIndex", "number");
        let vardto = <model.NotesSlide>TestInitializer.getValue("updateNotesSlide", "dto", "NotesSlide");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlide", "storage", "string");
        vardto = <model.NotesSlide>TestInitializer.invalidizeValue(vardto, field, "NotesSlide", "updateNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlide", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlide", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlide", "slideIndex", "number");
        let vardto = <model.NotesSlide>TestInitializer.getValue("updateNotesSlide", "dto", "NotesSlide");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlide", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlide", "slideIndex", "number");
        let vardto = <model.NotesSlide>TestInitializer.getValue("updateNotesSlide", "dto", "NotesSlide");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlide", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateNotesSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlide", "slideIndex", "number");
        let vardto = <model.NotesSlide>TestInitializer.getValue("updateNotesSlide", "dto", "NotesSlide");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlide", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateNotesSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlide(varname, varslideIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for updateNotesSlideParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateNotesSlideParagraph", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "paragraphIndex", "number");
            let vardto = <model.Paragraph>TestInitializer.getValue("updateNotesSlideParagraph", "dto", "Paragraph");
            let varpassword = <string>TestInitializer.getValue("updateNotesSlideParagraph", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateNotesSlideParagraph", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateNotesSlideParagraph", "storage", "string");
            return TestInitializer.initialize("updateNotesSlideParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), false, "updateNotesSlideParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateNotesSlideParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlideParagraph", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlideParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlideParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateNotesSlideParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlideParagraph", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlideParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlideParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("updateNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateNotesSlideParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlideParagraph", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "updateNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlideParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlideParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("updateNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateNotesSlideParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlideParagraph", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "updateNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlideParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlideParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("updateNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateNotesSlideParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlideParagraph", "storage", "string");
        vardto = <model.Paragraph>TestInitializer.invalidizeValue(vardto, field, "Paragraph", "updateNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlideParagraph", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlideParagraph", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateNotesSlideParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlideParagraph", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlideParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlideParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateNotesSlideParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlideParagraph", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlideParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlideParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateNotesSlideParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlideParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateNotesSlideParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlideParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlideParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlideParagraph", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateNotesSlideParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlideParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlideParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for updateNotesSlidePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateNotesSlidePortion", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "paragraphIndex", "number");
            let varportionIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "portionIndex", "number");
            let vardto = <model.Portion>TestInitializer.getValue("updateNotesSlidePortion", "dto", "Portion");
            let varpassword = <string>TestInitializer.getValue("updateNotesSlidePortion", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateNotesSlidePortion", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateNotesSlidePortion", "storage", "string");
            return TestInitializer.initialize("updateNotesSlidePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), false, "updateNotesSlidePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateNotesSlidePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlidePortion", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlidePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlidePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateNotesSlidePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlidePortion", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlidePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlidePortion", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("updateNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateNotesSlidePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlidePortion", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "updateNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlidePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlidePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("updateNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateNotesSlidePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlidePortion", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "updateNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlidePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlidePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("updateNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateNotesSlidePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlidePortion", "storage", "string");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "updateNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlidePortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlidePortion", field, varportionIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("updateNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateNotesSlidePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlidePortion", "storage", "string");
        vardto = <model.Portion>TestInitializer.invalidizeValue(vardto, field, "Portion", "updateNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlidePortion", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlidePortion", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateNotesSlidePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlidePortion", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlidePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlidePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateNotesSlidePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlidePortion", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlidePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlidePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateNotesSlidePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateNotesSlidePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateNotesSlidePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlidePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlidePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlidePortion", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateNotesSlidePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlidePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlidePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlidePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for updateNotesSlideShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateNotesSlideShape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "shapeIndex", "number");
            let vardto = <model.ShapeBase>TestInitializer.getValue("updateNotesSlideShape", "dto", "ShapeBase");
            let varpassword = <string>TestInitializer.getValue("updateNotesSlideShape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateNotesSlideShape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateNotesSlideShape", "storage", "string");
            return TestInitializer.initialize("updateNotesSlideShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), false, "updateNotesSlideShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateNotesSlideShape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlideShape", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlideShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlideShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateNotesSlideShape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlideShape", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlideShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlideShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("updateNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateNotesSlideShape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlideShape", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "updateNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlideShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlideShape", field, varshapeIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("updateNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateNotesSlideShape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlideShape", "storage", "string");
        vardto = <model.ShapeBase>TestInitializer.invalidizeValue(vardto, field, "ShapeBase", "updateNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlideShape", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlideShape", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateNotesSlideShape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlideShape", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlideShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlideShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateNotesSlideShape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlideShape", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlideShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlideShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateNotesSlideShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateNotesSlideShape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateNotesSlideShape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateNotesSlideShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateNotesSlideShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateNotesSlideShape", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateNotesSlideShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateNotesSlideShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateNotesSlideShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateNotesSlideShape", field, varstorage);
            });
        });
    });
});

describe("Tests for updateParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateParagraph", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateParagraph", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("updateParagraph", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("updateParagraph", "paragraphIndex", "number");
            let vardto = <model.Paragraph>TestInitializer.getValue("updateParagraph", "dto", "Paragraph");
            let varpassword = <string>TestInitializer.getValue("updateParagraph", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateParagraph", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateParagraph", "storage", "string");
            return TestInitializer.initialize("updateParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), false, "updateParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateParagraph", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateParagraph", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("updateParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateParagraph", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "updateParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("updateParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateParagraph", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "updateParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("updateParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateParagraph", "storage", "string");
        vardto = <model.Paragraph>TestInitializer.invalidizeValue(vardto, field, "Paragraph", "updateParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateParagraph", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateParagraph", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateParagraph", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateParagraph", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateParagraph", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateParagraph", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateParagraph(varname, varslideIndex, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for updatePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updatePortion", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updatePortion", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("updatePortion", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("updatePortion", "paragraphIndex", "number");
            let varportionIndex = <number>TestInitializer.getValue("updatePortion", "portionIndex", "number");
            let vardto = <model.Portion>TestInitializer.getValue("updatePortion", "dto", "Portion");
            let varpassword = <string>TestInitializer.getValue("updatePortion", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updatePortion", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updatePortion", "storage", "string");
            return TestInitializer.initialize("updatePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), false, "updatePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updatePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updatePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updatePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updatePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updatePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updatePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updatePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updatePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updatePortion", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updatePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updatePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updatePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updatePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updatePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updatePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updatePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updatePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updatePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updatePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updatePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updatePortion", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updatePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updatePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updatePortion", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("updatePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updatePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updatePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updatePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updatePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updatePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updatePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updatePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updatePortion", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "updatePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updatePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updatePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("updatePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updatePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updatePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updatePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updatePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updatePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updatePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updatePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updatePortion", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "updatePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updatePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updatePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("updatePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updatePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updatePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updatePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updatePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updatePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updatePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updatePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updatePortion", "storage", "string");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "updatePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updatePortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updatePortion", field, varportionIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("updatePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updatePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updatePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updatePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updatePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updatePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updatePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updatePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updatePortion", "storage", "string");
        vardto = <model.Portion>TestInitializer.invalidizeValue(vardto, field, "Portion", "updatePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updatePortion", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updatePortion", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updatePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updatePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updatePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updatePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updatePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updatePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updatePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updatePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updatePortion", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updatePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updatePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updatePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updatePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updatePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updatePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updatePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updatePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updatePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updatePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updatePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updatePortion", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updatePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updatePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updatePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updatePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updatePortion", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updatePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updatePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updatePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updatePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updatePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updatePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updatePortion", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updatePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updatePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updatePortion(varname, varslideIndex, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updatePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for updateSection", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateSection", "name", "string");
            let varsectionIndex = <number>TestInitializer.getValue("updateSection", "sectionIndex", "number");
            let varsectionName = <string>TestInitializer.getValue("updateSection", "sectionName", "string");
            let varpassword = <string>TestInitializer.getValue("updateSection", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateSection", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateSection", "storage", "string");
            return TestInitializer.initialize("updateSection", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateSection(varname, varsectionIndex, varsectionName, varpassword, varfolder, varstorage), false, "updateSection");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("updateSection", "sectionIndex", "number");
        let varsectionName = <string>TestInitializer.getValue("updateSection", "sectionName", "string");
        let varpassword = <string>TestInitializer.getValue("updateSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSection", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSection", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSection(varname, varsectionIndex, varsectionName, varpassword, varfolder, varstorage), "updateSection", field, varname);
            });
        });
    });

    it("invalid sectionIndex test", () => {
        const field = "sectionIndex";
        let varname = <string>TestInitializer.getValue("updateSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("updateSection", "sectionIndex", "number");
        let varsectionName = <string>TestInitializer.getValue("updateSection", "sectionName", "string");
        let varpassword = <string>TestInitializer.getValue("updateSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSection", "storage", "string");
        varsectionIndex = <number>TestInitializer.invalidizeValue(varsectionIndex, field, "number", "updateSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSection", field, varsectionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSection(varname, varsectionIndex, varsectionName, varpassword, varfolder, varstorage), "updateSection", field, varsectionIndex);
            });
        });
    });

    it("invalid sectionName test", () => {
        const field = "sectionName";
        let varname = <string>TestInitializer.getValue("updateSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("updateSection", "sectionIndex", "number");
        let varsectionName = <string>TestInitializer.getValue("updateSection", "sectionName", "string");
        let varpassword = <string>TestInitializer.getValue("updateSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSection", "storage", "string");
        varsectionName = <string>TestInitializer.invalidizeValue(varsectionName, field, "string", "updateSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSection", field, varsectionName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSection(varname, varsectionIndex, varsectionName, varpassword, varfolder, varstorage), "updateSection", field, varsectionName);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("updateSection", "sectionIndex", "number");
        let varsectionName = <string>TestInitializer.getValue("updateSection", "sectionName", "string");
        let varpassword = <string>TestInitializer.getValue("updateSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSection", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSection", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSection(varname, varsectionIndex, varsectionName, varpassword, varfolder, varstorage), "updateSection", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("updateSection", "sectionIndex", "number");
        let varsectionName = <string>TestInitializer.getValue("updateSection", "sectionName", "string");
        let varpassword = <string>TestInitializer.getValue("updateSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSection", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSection", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSection(varname, varsectionIndex, varsectionName, varpassword, varfolder, varstorage), "updateSection", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateSection", "name", "string");
        let varsectionIndex = <number>TestInitializer.getValue("updateSection", "sectionIndex", "number");
        let varsectionName = <string>TestInitializer.getValue("updateSection", "sectionName", "string");
        let varpassword = <string>TestInitializer.getValue("updateSection", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSection", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSection", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateSection");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSection", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSection(varname, varsectionIndex, varsectionName, varpassword, varfolder, varstorage), "updateSection", field, varstorage);
            });
        });
    });
});

describe("Tests for updateShape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateShape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateShape", "slideIndex", "number");
            let varshapeIndex = <number>TestInitializer.getValue("updateShape", "shapeIndex", "number");
            let vardto = <model.ShapeBase>TestInitializer.getValue("updateShape", "dto", "ShapeBase");
            let varpassword = <string>TestInitializer.getValue("updateShape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateShape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateShape", "storage", "string");
            return TestInitializer.initialize("updateShape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), false, "updateShape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateShape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateShape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateShape", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateShape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateShape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateShape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateShape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateShape", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateShape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateShape", field, varslideIndex);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("updateShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateShape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateShape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateShape", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "updateShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateShape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateShape", field, varshapeIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("updateShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateShape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateShape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateShape", "storage", "string");
        vardto = <model.ShapeBase>TestInitializer.invalidizeValue(vardto, field, "ShapeBase", "updateShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateShape", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateShape", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateShape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateShape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateShape", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateShape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateShape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateShape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateShape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateShape", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateShape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateShape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateShape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateShape", "slideIndex", "number");
        let varshapeIndex = <number>TestInitializer.getValue("updateShape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateShape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateShape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateShape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateShape", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateShape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateShape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateShape(varname, varslideIndex, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateShape", field, varstorage);
            });
        });
    });
});

describe("Tests for updateSlide", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateSlide", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateSlide", "slideIndex", "number");
            let varslideDto = <model.Slide>TestInitializer.getValue("updateSlide", "slideDto", "Slide");
            let varpassword = <string>TestInitializer.getValue("updateSlide", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateSlide", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateSlide", "storage", "string");
            return TestInitializer.initialize("updateSlide", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), false, "updateSlide");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSlide", "slideIndex", "number");
        let varslideDto = <model.Slide>TestInitializer.getValue("updateSlide", "slideDto", "Slide");
        let varpassword = <string>TestInitializer.getValue("updateSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSlide", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSlide", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "updateSlide", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSlide", "slideIndex", "number");
        let varslideDto = <model.Slide>TestInitializer.getValue("updateSlide", "slideDto", "Slide");
        let varpassword = <string>TestInitializer.getValue("updateSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSlide", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSlide", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "updateSlide", field, varslideIndex);
            });
        });
    });

    it("invalid slideDto test", () => {
        const field = "slideDto";
        let varname = <string>TestInitializer.getValue("updateSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSlide", "slideIndex", "number");
        let varslideDto = <model.Slide>TestInitializer.getValue("updateSlide", "slideDto", "Slide");
        let varpassword = <string>TestInitializer.getValue("updateSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSlide", "storage", "string");
        varslideDto = <model.Slide>TestInitializer.invalidizeValue(varslideDto, field, "Slide", "updateSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSlide", field, varslideDto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "updateSlide", field, varslideDto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSlide", "slideIndex", "number");
        let varslideDto = <model.Slide>TestInitializer.getValue("updateSlide", "slideDto", "Slide");
        let varpassword = <string>TestInitializer.getValue("updateSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSlide", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSlide", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "updateSlide", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSlide", "slideIndex", "number");
        let varslideDto = <model.Slide>TestInitializer.getValue("updateSlide", "slideDto", "Slide");
        let varpassword = <string>TestInitializer.getValue("updateSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSlide", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSlide", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "updateSlide", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateSlide", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSlide", "slideIndex", "number");
        let varslideDto = <model.Slide>TestInitializer.getValue("updateSlide", "slideDto", "Slide");
        let varpassword = <string>TestInitializer.getValue("updateSlide", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSlide", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSlide", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateSlide");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSlide", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSlide(varname, varslideIndex, varslideDto, varpassword, varfolder, varstorage), "updateSlide", field, varstorage);
            });
        });
    });
});

describe("Tests for updateSubshape", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateSubshape", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateSubshape", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("updateSubshape", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("updateSubshape", "shapeIndex", "number");
            let vardto = <model.ShapeBase>TestInitializer.getValue("updateSubshape", "dto", "ShapeBase");
            let varpassword = <string>TestInitializer.getValue("updateSubshape", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateSubshape", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateSubshape", "storage", "string");
            return TestInitializer.initialize("updateSubshape", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), false, "updateSubshape");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateSubshape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshape", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshape", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateSubshape", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateSubshape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshape", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshape", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateSubshape", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("updateSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateSubshape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshape", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "updateSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshape", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateSubshape", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("updateSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateSubshape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshape", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "updateSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshape", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateSubshape", field, varshapeIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("updateSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateSubshape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshape", "storage", "string");
        vardto = <model.ShapeBase>TestInitializer.invalidizeValue(vardto, field, "ShapeBase", "updateSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshape", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateSubshape", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateSubshape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshape", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshape", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateSubshape", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateSubshape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshape", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshape", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateSubshape", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateSubshape", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshape", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshape", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshape", "shapeIndex", "number");
        let vardto = <model.ShapeBase>TestInitializer.getValue("updateSubshape", "dto", "ShapeBase");
        let varpassword = <string>TestInitializer.getValue("updateSubshape", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshape", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshape", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateSubshape");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshape", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshape(varname, varslideIndex, varpath, varshapeIndex, vardto, varpassword, varfolder, varstorage), "updateSubshape", field, varstorage);
            });
        });
    });
});

describe("Tests for updateSubshapeParagraph", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateSubshapeParagraph", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("updateSubshapeParagraph", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "paragraphIndex", "number");
            let vardto = <model.Paragraph>TestInitializer.getValue("updateSubshapeParagraph", "dto", "Paragraph");
            let varpassword = <string>TestInitializer.getValue("updateSubshapeParagraph", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateSubshapeParagraph", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateSubshapeParagraph", "storage", "string");
            return TestInitializer.initialize("updateSubshapeParagraph", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), false, "updateSubshapeParagraph");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateSubshapeParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapeParagraph", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapeParagraph", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapeParagraph", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateSubshapeParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapeParagraph", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapeParagraph", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapeParagraph", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("updateSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateSubshapeParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapeParagraph", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "updateSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapeParagraph", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapeParagraph", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("updateSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateSubshapeParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapeParagraph", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "updateSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapeParagraph", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapeParagraph", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("updateSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateSubshapeParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapeParagraph", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "updateSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapeParagraph", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapeParagraph", field, varparagraphIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("updateSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateSubshapeParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapeParagraph", "storage", "string");
        vardto = <model.Paragraph>TestInitializer.invalidizeValue(vardto, field, "Paragraph", "updateSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapeParagraph", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapeParagraph", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateSubshapeParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapeParagraph", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapeParagraph", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapeParagraph", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateSubshapeParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapeParagraph", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapeParagraph", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapeParagraph", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateSubshapeParagraph", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapeParagraph", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapeParagraph", "paragraphIndex", "number");
        let vardto = <model.Paragraph>TestInitializer.getValue("updateSubshapeParagraph", "dto", "Paragraph");
        let varpassword = <string>TestInitializer.getValue("updateSubshapeParagraph", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapeParagraph", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapeParagraph", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateSubshapeParagraph");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapeParagraph", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapeParagraph(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapeParagraph", field, varstorage);
            });
        });
    });
});

describe("Tests for updateSubshapePortion", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varname = <string>TestInitializer.getValue("updateSubshapePortion", "name", "string");
            let varslideIndex = <number>TestInitializer.getValue("updateSubshapePortion", "slideIndex", "number");
            let varpath = <string>TestInitializer.getValue("updateSubshapePortion", "path", "string");
            let varshapeIndex = <number>TestInitializer.getValue("updateSubshapePortion", "shapeIndex", "number");
            let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapePortion", "paragraphIndex", "number");
            let varportionIndex = <number>TestInitializer.getValue("updateSubshapePortion", "portionIndex", "number");
            let vardto = <model.Portion>TestInitializer.getValue("updateSubshapePortion", "dto", "Portion");
            let varpassword = <string>TestInitializer.getValue("updateSubshapePortion", "password", "string");
            let varfolder = <string>TestInitializer.getValue("updateSubshapePortion", "folder", "string");
            let varstorage = <string>TestInitializer.getValue("updateSubshapePortion", "storage", "string");
            return TestInitializer.initialize("updateSubshapePortion", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), false, "updateSubshapePortion");
            });
        });
    });

    it("invalid name test", () => {
        const field = "name";
        let varname = <string>TestInitializer.getValue("updateSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateSubshapePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateSubshapePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapePortion", "storage", "string");
        varname = <string>TestInitializer.invalidizeValue(varname, field, "string", "updateSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapePortion", field, varname).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapePortion", field, varname);
            });
        });
    });

    it("invalid slideIndex test", () => {
        const field = "slideIndex";
        let varname = <string>TestInitializer.getValue("updateSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateSubshapePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateSubshapePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapePortion", "storage", "string");
        varslideIndex = <number>TestInitializer.invalidizeValue(varslideIndex, field, "number", "updateSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapePortion", field, varslideIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapePortion", field, varslideIndex);
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varname = <string>TestInitializer.getValue("updateSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateSubshapePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateSubshapePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapePortion", "storage", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "updateSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapePortion", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapePortion", field, varpath);
            });
        });
    });

    it("invalid shapeIndex test", () => {
        const field = "shapeIndex";
        let varname = <string>TestInitializer.getValue("updateSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateSubshapePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateSubshapePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapePortion", "storage", "string");
        varshapeIndex = <number>TestInitializer.invalidizeValue(varshapeIndex, field, "number", "updateSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapePortion", field, varshapeIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapePortion", field, varshapeIndex);
            });
        });
    });

    it("invalid paragraphIndex test", () => {
        const field = "paragraphIndex";
        let varname = <string>TestInitializer.getValue("updateSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateSubshapePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateSubshapePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapePortion", "storage", "string");
        varparagraphIndex = <number>TestInitializer.invalidizeValue(varparagraphIndex, field, "number", "updateSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapePortion", field, varparagraphIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapePortion", field, varparagraphIndex);
            });
        });
    });

    it("invalid portionIndex test", () => {
        const field = "portionIndex";
        let varname = <string>TestInitializer.getValue("updateSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateSubshapePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateSubshapePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapePortion", "storage", "string");
        varportionIndex = <number>TestInitializer.invalidizeValue(varportionIndex, field, "number", "updateSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapePortion", field, varportionIndex).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapePortion", field, varportionIndex);
            });
        });
    });

    it("invalid dto test", () => {
        const field = "dto";
        let varname = <string>TestInitializer.getValue("updateSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateSubshapePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateSubshapePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapePortion", "storage", "string");
        vardto = <model.Portion>TestInitializer.invalidizeValue(vardto, field, "Portion", "updateSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapePortion", field, vardto).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapePortion", field, vardto);
            });
        });
    });

    it("invalid password test", () => {
        const field = "password";
        let varname = <string>TestInitializer.getValue("updateSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateSubshapePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateSubshapePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapePortion", "storage", "string");
        varpassword = <string>TestInitializer.invalidizeValue(varpassword, field, "string", "updateSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapePortion", field, varpassword).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapePortion", field, varpassword);
            });
        });
    });

    it("invalid folder test", () => {
        const field = "folder";
        let varname = <string>TestInitializer.getValue("updateSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateSubshapePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateSubshapePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapePortion", "storage", "string");
        varfolder = <string>TestInitializer.invalidizeValue(varfolder, field, "string", "updateSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapePortion", field, varfolder).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapePortion", field, varfolder);
            });
        });
    });

    it("invalid storage test", () => {
        const field = "storage";
        let varname = <string>TestInitializer.getValue("updateSubshapePortion", "name", "string");
        let varslideIndex = <number>TestInitializer.getValue("updateSubshapePortion", "slideIndex", "number");
        let varpath = <string>TestInitializer.getValue("updateSubshapePortion", "path", "string");
        let varshapeIndex = <number>TestInitializer.getValue("updateSubshapePortion", "shapeIndex", "number");
        let varparagraphIndex = <number>TestInitializer.getValue("updateSubshapePortion", "paragraphIndex", "number");
        let varportionIndex = <number>TestInitializer.getValue("updateSubshapePortion", "portionIndex", "number");
        let vardto = <model.Portion>TestInitializer.getValue("updateSubshapePortion", "dto", "Portion");
        let varpassword = <string>TestInitializer.getValue("updateSubshapePortion", "password", "string");
        let varfolder = <string>TestInitializer.getValue("updateSubshapePortion", "folder", "string");
        let varstorage = <string>TestInitializer.getValue("updateSubshapePortion", "storage", "string");
        varstorage = <string>TestInitializer.invalidizeValue(varstorage, field, "string", "updateSubshapePortion");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("updateSubshapePortion", field, varstorage).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().updateSubshapePortion(varname, varslideIndex, varpath, varshapeIndex, varparagraphIndex, varportionIndex, vardto, varpassword, varfolder, varstorage), "updateSubshapePortion", field, varstorage);
            });
        });
    });
});

describe("Tests for uploadFile", () => {
    it("main test", () => {
        return TestInitializer.runTest(() => {
            let varpath = <string>TestInitializer.getValue("uploadFile", "path", "string");
            let varfile = <Buffer>TestInitializer.getStreamValue("uploadFile", "file");
            let varstorageName = <string>TestInitializer.getValue("uploadFile", "storageName", "string");
            return TestInitializer.initialize("uploadFile", null, null).then(() => {
                return TestInitializer.assertValidCall(TestInitializer.getApi().uploadFile(varpath, varfile, varstorageName), false, "uploadFile");
            });
        });
    });

    it("invalid path test", () => {
        const field = "path";
        let varpath = <string>TestInitializer.getValue("uploadFile", "path", "string");
        let varfile = <Buffer>TestInitializer.getStreamValue("uploadFile", "file");
        let varstorageName = <string>TestInitializer.getValue("uploadFile", "storageName", "string");
        varpath = <string>TestInitializer.invalidizeValue(varpath, field, "string", "uploadFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("uploadFile", field, varpath).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().uploadFile(varpath, varfile, varstorageName), "uploadFile", field, varpath);
            });
        });
    });

    it("invalid file test", () => {
        const field = "file";
        let varpath = <string>TestInitializer.getValue("uploadFile", "path", "string");
        let varfile = <Buffer>TestInitializer.getStreamValue("uploadFile", "file");
        let varstorageName = <string>TestInitializer.getValue("uploadFile", "storageName", "string");
        varfile = <Buffer>TestInitializer.invalidizeValue(varfile, field, "Buffer", "uploadFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("uploadFile", field, varfile).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().uploadFile(varpath, varfile, varstorageName), "uploadFile", field, varfile);
            });
        });
    });

    it("invalid storageName test", () => {
        const field = "storageName";
        let varpath = <string>TestInitializer.getValue("uploadFile", "path", "string");
        let varfile = <Buffer>TestInitializer.getStreamValue("uploadFile", "file");
        let varstorageName = <string>TestInitializer.getValue("uploadFile", "storageName", "string");
        varstorageName = <string>TestInitializer.invalidizeValue(varstorageName, field, "string", "uploadFile");
        return TestInitializer.runTest(() => {
            return TestInitializer.initialize("uploadFile", field, varstorageName).then(() => {
                return TestInitializer.assertInvalidCall(TestInitializer.getApi().uploadFile(varpath, varfile, varstorageName), "uploadFile", field, varstorageName);
            });
        });
    });
});
